{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from IPython.core.interactiveshell import InteractiveShell\n",
    "InteractiveShell.ast_node_interactivity = \"all\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from pandas.plotting import scatter_matrix\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.linear_model import SGDRegressor\n",
    "from  sklearn.preprocessing  import PolynomialFeatures\n",
    "from  sklearn.linear_model import Ridge\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn import svm\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn import metrics\n",
    "import warnings\n",
    "from sklearn.svm import SVC\n",
    "import sklearn\n",
    "from sklearn.metrics import accuracy_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Suburb</th>\n",
       "      <th>Address</th>\n",
       "      <th>Rooms</th>\n",
       "      <th>Type</th>\n",
       "      <th>Price</th>\n",
       "      <th>Method</th>\n",
       "      <th>SellerG</th>\n",
       "      <th>Date</th>\n",
       "      <th>Distance</th>\n",
       "      <th>Postcode</th>\n",
       "      <th>...</th>\n",
       "      <th>Bathroom</th>\n",
       "      <th>Car</th>\n",
       "      <th>Landsize</th>\n",
       "      <th>BuildingArea</th>\n",
       "      <th>YearBuilt</th>\n",
       "      <th>CouncilArea</th>\n",
       "      <th>Lattitude</th>\n",
       "      <th>Longtitude</th>\n",
       "      <th>Regionname</th>\n",
       "      <th>Propertycount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Abbotsford</td>\n",
       "      <td>68 Studley St</td>\n",
       "      <td>2</td>\n",
       "      <td>h</td>\n",
       "      <td>NaN</td>\n",
       "      <td>SS</td>\n",
       "      <td>Jellis</td>\n",
       "      <td>3/09/2016</td>\n",
       "      <td>2.5</td>\n",
       "      <td>3067.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>126.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Yarra City Council</td>\n",
       "      <td>-37.80140</td>\n",
       "      <td>144.99580</td>\n",
       "      <td>Northern Metropolitan</td>\n",
       "      <td>4019.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Abbotsford</td>\n",
       "      <td>85 Turner St</td>\n",
       "      <td>2</td>\n",
       "      <td>h</td>\n",
       "      <td>1480000.0</td>\n",
       "      <td>S</td>\n",
       "      <td>Biggin</td>\n",
       "      <td>3/12/2016</td>\n",
       "      <td>2.5</td>\n",
       "      <td>3067.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>202.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Yarra City Council</td>\n",
       "      <td>-37.79960</td>\n",
       "      <td>144.99840</td>\n",
       "      <td>Northern Metropolitan</td>\n",
       "      <td>4019.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Abbotsford</td>\n",
       "      <td>25 Bloomburg St</td>\n",
       "      <td>2</td>\n",
       "      <td>h</td>\n",
       "      <td>1035000.0</td>\n",
       "      <td>S</td>\n",
       "      <td>Biggin</td>\n",
       "      <td>4/02/2016</td>\n",
       "      <td>2.5</td>\n",
       "      <td>3067.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>156.0</td>\n",
       "      <td>79.0</td>\n",
       "      <td>1900.0</td>\n",
       "      <td>Yarra City Council</td>\n",
       "      <td>-37.80790</td>\n",
       "      <td>144.99340</td>\n",
       "      <td>Northern Metropolitan</td>\n",
       "      <td>4019.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Abbotsford</td>\n",
       "      <td>18/659 Victoria St</td>\n",
       "      <td>3</td>\n",
       "      <td>u</td>\n",
       "      <td>NaN</td>\n",
       "      <td>VB</td>\n",
       "      <td>Rounds</td>\n",
       "      <td>4/02/2016</td>\n",
       "      <td>2.5</td>\n",
       "      <td>3067.0</td>\n",
       "      <td>...</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Yarra City Council</td>\n",
       "      <td>-37.81140</td>\n",
       "      <td>145.01160</td>\n",
       "      <td>Northern Metropolitan</td>\n",
       "      <td>4019.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Abbotsford</td>\n",
       "      <td>5 Charles St</td>\n",
       "      <td>3</td>\n",
       "      <td>h</td>\n",
       "      <td>1465000.0</td>\n",
       "      <td>SP</td>\n",
       "      <td>Biggin</td>\n",
       "      <td>4/03/2017</td>\n",
       "      <td>2.5</td>\n",
       "      <td>3067.0</td>\n",
       "      <td>...</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>134.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>1900.0</td>\n",
       "      <td>Yarra City Council</td>\n",
       "      <td>-37.80930</td>\n",
       "      <td>144.99440</td>\n",
       "      <td>Northern Metropolitan</td>\n",
       "      <td>4019.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>34852</td>\n",
       "      <td>Yarraville</td>\n",
       "      <td>13 Burns St</td>\n",
       "      <td>4</td>\n",
       "      <td>h</td>\n",
       "      <td>1480000.0</td>\n",
       "      <td>PI</td>\n",
       "      <td>Jas</td>\n",
       "      <td>24/02/2018</td>\n",
       "      <td>6.3</td>\n",
       "      <td>3013.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>593.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Maribyrnong City Council</td>\n",
       "      <td>-37.81053</td>\n",
       "      <td>144.88467</td>\n",
       "      <td>Western Metropolitan</td>\n",
       "      <td>6543.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>34853</td>\n",
       "      <td>Yarraville</td>\n",
       "      <td>29A Murray St</td>\n",
       "      <td>2</td>\n",
       "      <td>h</td>\n",
       "      <td>888000.0</td>\n",
       "      <td>SP</td>\n",
       "      <td>Sweeney</td>\n",
       "      <td>24/02/2018</td>\n",
       "      <td>6.3</td>\n",
       "      <td>3013.0</td>\n",
       "      <td>...</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>98.0</td>\n",
       "      <td>104.0</td>\n",
       "      <td>2018.0</td>\n",
       "      <td>Maribyrnong City Council</td>\n",
       "      <td>-37.81551</td>\n",
       "      <td>144.88826</td>\n",
       "      <td>Western Metropolitan</td>\n",
       "      <td>6543.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>34854</td>\n",
       "      <td>Yarraville</td>\n",
       "      <td>147A Severn St</td>\n",
       "      <td>2</td>\n",
       "      <td>t</td>\n",
       "      <td>705000.0</td>\n",
       "      <td>S</td>\n",
       "      <td>Jas</td>\n",
       "      <td>24/02/2018</td>\n",
       "      <td>6.3</td>\n",
       "      <td>3013.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>220.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>Maribyrnong City Council</td>\n",
       "      <td>-37.82286</td>\n",
       "      <td>144.87856</td>\n",
       "      <td>Western Metropolitan</td>\n",
       "      <td>6543.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>34855</td>\n",
       "      <td>Yarraville</td>\n",
       "      <td>12/37 Stephen St</td>\n",
       "      <td>3</td>\n",
       "      <td>h</td>\n",
       "      <td>1140000.0</td>\n",
       "      <td>SP</td>\n",
       "      <td>hockingstuart</td>\n",
       "      <td>24/02/2018</td>\n",
       "      <td>6.3</td>\n",
       "      <td>3013.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Maribyrnong City Council</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Western Metropolitan</td>\n",
       "      <td>6543.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>34856</td>\n",
       "      <td>Yarraville</td>\n",
       "      <td>3 Tarrengower St</td>\n",
       "      <td>2</td>\n",
       "      <td>h</td>\n",
       "      <td>1020000.0</td>\n",
       "      <td>PI</td>\n",
       "      <td>RW</td>\n",
       "      <td>24/02/2018</td>\n",
       "      <td>6.3</td>\n",
       "      <td>3013.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>250.0</td>\n",
       "      <td>103.0</td>\n",
       "      <td>1930.0</td>\n",
       "      <td>Maribyrnong City Council</td>\n",
       "      <td>-37.81810</td>\n",
       "      <td>144.89351</td>\n",
       "      <td>Western Metropolitan</td>\n",
       "      <td>6543.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>34857 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           Suburb             Address  Rooms Type      Price Method  \\\n",
       "0      Abbotsford       68 Studley St      2    h        NaN     SS   \n",
       "1      Abbotsford        85 Turner St      2    h  1480000.0      S   \n",
       "2      Abbotsford     25 Bloomburg St      2    h  1035000.0      S   \n",
       "3      Abbotsford  18/659 Victoria St      3    u        NaN     VB   \n",
       "4      Abbotsford        5 Charles St      3    h  1465000.0     SP   \n",
       "...           ...                 ...    ...  ...        ...    ...   \n",
       "34852  Yarraville         13 Burns St      4    h  1480000.0     PI   \n",
       "34853  Yarraville       29A Murray St      2    h   888000.0     SP   \n",
       "34854  Yarraville      147A Severn St      2    t   705000.0      S   \n",
       "34855  Yarraville    12/37 Stephen St      3    h  1140000.0     SP   \n",
       "34856  Yarraville    3 Tarrengower St      2    h  1020000.0     PI   \n",
       "\n",
       "             SellerG        Date  Distance  Postcode  ...  Bathroom  Car  \\\n",
       "0             Jellis   3/09/2016       2.5    3067.0  ...       1.0  1.0   \n",
       "1             Biggin   3/12/2016       2.5    3067.0  ...       1.0  1.0   \n",
       "2             Biggin   4/02/2016       2.5    3067.0  ...       1.0  0.0   \n",
       "3             Rounds   4/02/2016       2.5    3067.0  ...       2.0  1.0   \n",
       "4             Biggin   4/03/2017       2.5    3067.0  ...       2.0  0.0   \n",
       "...              ...         ...       ...       ...  ...       ...  ...   \n",
       "34852            Jas  24/02/2018       6.3    3013.0  ...       1.0  3.0   \n",
       "34853        Sweeney  24/02/2018       6.3    3013.0  ...       2.0  1.0   \n",
       "34854            Jas  24/02/2018       6.3    3013.0  ...       1.0  2.0   \n",
       "34855  hockingstuart  24/02/2018       6.3    3013.0  ...       NaN  NaN   \n",
       "34856             RW  24/02/2018       6.3    3013.0  ...       1.0  0.0   \n",
       "\n",
       "       Landsize  BuildingArea  YearBuilt               CouncilArea Lattitude  \\\n",
       "0         126.0           NaN        NaN        Yarra City Council -37.80140   \n",
       "1         202.0           NaN        NaN        Yarra City Council -37.79960   \n",
       "2         156.0          79.0     1900.0        Yarra City Council -37.80790   \n",
       "3           0.0           NaN        NaN        Yarra City Council -37.81140   \n",
       "4         134.0         150.0     1900.0        Yarra City Council -37.80930   \n",
       "...         ...           ...        ...                       ...       ...   \n",
       "34852     593.0           NaN        NaN  Maribyrnong City Council -37.81053   \n",
       "34853      98.0         104.0     2018.0  Maribyrnong City Council -37.81551   \n",
       "34854     220.0         120.0     2000.0  Maribyrnong City Council -37.82286   \n",
       "34855       NaN           NaN        NaN  Maribyrnong City Council       NaN   \n",
       "34856     250.0         103.0     1930.0  Maribyrnong City Council -37.81810   \n",
       "\n",
       "       Longtitude             Regionname Propertycount  \n",
       "0       144.99580  Northern Metropolitan        4019.0  \n",
       "1       144.99840  Northern Metropolitan        4019.0  \n",
       "2       144.99340  Northern Metropolitan        4019.0  \n",
       "3       145.01160  Northern Metropolitan        4019.0  \n",
       "4       144.99440  Northern Metropolitan        4019.0  \n",
       "...           ...                    ...           ...  \n",
       "34852   144.88467   Western Metropolitan        6543.0  \n",
       "34853   144.88826   Western Metropolitan        6543.0  \n",
       "34854   144.87856   Western Metropolitan        6543.0  \n",
       "34855         NaN   Western Metropolitan        6543.0  \n",
       "34856   144.89351   Western Metropolitan        6543.0  \n",
       "\n",
       "[34857 rows x 21 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mel = pd.read_csv('Melbourne_housing_FULL.csv')\n",
    "mel"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Attributes\n",
    "Suburb: Suburb\n",
    "\n",
    "Address: Address\n",
    "\n",
    "Rooms: Number of rooms\n",
    "\n",
    "Price: Price in Australian dollars\n",
    "\n",
    "Method:\n",
    "S - property sold;\n",
    "SP - property sold prior;\n",
    "PI - property passed in;\n",
    "PN - sold prior not disclosed;\n",
    "SN - sold not disclosed;\n",
    "NB - no bid;\n",
    "VB - vendor bid;\n",
    "W - withdrawn prior to auction;\n",
    "SA - sold after auction;\n",
    "SS - sold after auction price not disclosed.\n",
    "N/A - price or highest bid not available.\n",
    "\n",
    "Type:\n",
    "br - bedroom(s);\n",
    "h - house,cottage,villa, semi,terrace;\n",
    "u - unit, duplex;\n",
    "t - townhouse;\n",
    "dev site - development site;\n",
    "o res - other residential.\n",
    "\n",
    "SellerG: Real Estate Agent\n",
    "\n",
    "Date: Date sold\n",
    "\n",
    "Distance: Distance from CBD in Kilometres\n",
    "\n",
    "Regionname: General Region (West, North West, North, North east …etc)\n",
    "\n",
    "Propertycount: Number of properties that exist in the suburb.\n",
    "\n",
    "Bedroom2 : Scraped # of Bedrooms (from different source)\n",
    "\n",
    "Bathroom: Number of Bathrooms\n",
    "\n",
    "Car: Number of carspots\n",
    "\n",
    "Landsize: Land Size in Metres\n",
    "\n",
    "BuildingArea: Building Size in Metres\n",
    "\n",
    "YearBuilt: Year the house was built\n",
    "\n",
    "CouncilArea: Governing council for the area\n",
    "\n",
    "Lattitude: Self explanitory\n",
    "\n",
    "Longtitude: Self explanitory"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Rooms</th>\n",
       "      <th>Price</th>\n",
       "      <th>Distance</th>\n",
       "      <th>Postcode</th>\n",
       "      <th>Bedroom2</th>\n",
       "      <th>Bathroom</th>\n",
       "      <th>Car</th>\n",
       "      <th>Landsize</th>\n",
       "      <th>BuildingArea</th>\n",
       "      <th>YearBuilt</th>\n",
       "      <th>Lattitude</th>\n",
       "      <th>Longtitude</th>\n",
       "      <th>Propertycount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>34857.000000</td>\n",
       "      <td>2.724700e+04</td>\n",
       "      <td>34856.000000</td>\n",
       "      <td>34856.000000</td>\n",
       "      <td>26640.000000</td>\n",
       "      <td>26631.000000</td>\n",
       "      <td>26129.000000</td>\n",
       "      <td>23047.000000</td>\n",
       "      <td>13742.00000</td>\n",
       "      <td>15551.000000</td>\n",
       "      <td>26881.000000</td>\n",
       "      <td>26881.000000</td>\n",
       "      <td>34854.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>mean</td>\n",
       "      <td>3.031012</td>\n",
       "      <td>1.050173e+06</td>\n",
       "      <td>11.184929</td>\n",
       "      <td>3116.062859</td>\n",
       "      <td>3.084647</td>\n",
       "      <td>1.624798</td>\n",
       "      <td>1.728845</td>\n",
       "      <td>593.598993</td>\n",
       "      <td>160.25640</td>\n",
       "      <td>1965.289885</td>\n",
       "      <td>-37.810634</td>\n",
       "      <td>145.001851</td>\n",
       "      <td>7572.888306</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>std</td>\n",
       "      <td>0.969933</td>\n",
       "      <td>6.414671e+05</td>\n",
       "      <td>6.788892</td>\n",
       "      <td>109.023903</td>\n",
       "      <td>0.980690</td>\n",
       "      <td>0.724212</td>\n",
       "      <td>1.010771</td>\n",
       "      <td>3398.841946</td>\n",
       "      <td>401.26706</td>\n",
       "      <td>37.328178</td>\n",
       "      <td>0.090279</td>\n",
       "      <td>0.120169</td>\n",
       "      <td>4428.090313</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>min</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>8.500000e+04</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3000.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>1196.000000</td>\n",
       "      <td>-38.190430</td>\n",
       "      <td>144.423790</td>\n",
       "      <td>83.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25%</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>6.350000e+05</td>\n",
       "      <td>6.400000</td>\n",
       "      <td>3051.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>224.000000</td>\n",
       "      <td>102.00000</td>\n",
       "      <td>1940.000000</td>\n",
       "      <td>-37.862950</td>\n",
       "      <td>144.933500</td>\n",
       "      <td>4385.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50%</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>8.700000e+05</td>\n",
       "      <td>10.300000</td>\n",
       "      <td>3103.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>521.000000</td>\n",
       "      <td>136.00000</td>\n",
       "      <td>1970.000000</td>\n",
       "      <td>-37.807600</td>\n",
       "      <td>145.007800</td>\n",
       "      <td>6763.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75%</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.295000e+06</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>3156.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>670.000000</td>\n",
       "      <td>188.00000</td>\n",
       "      <td>2000.000000</td>\n",
       "      <td>-37.754100</td>\n",
       "      <td>145.071900</td>\n",
       "      <td>10412.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>max</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>1.120000e+07</td>\n",
       "      <td>48.100000</td>\n",
       "      <td>3978.000000</td>\n",
       "      <td>30.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>26.000000</td>\n",
       "      <td>433014.000000</td>\n",
       "      <td>44515.00000</td>\n",
       "      <td>2106.000000</td>\n",
       "      <td>-37.390200</td>\n",
       "      <td>145.526350</td>\n",
       "      <td>21650.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Rooms         Price      Distance      Postcode      Bedroom2  \\\n",
       "count  34857.000000  2.724700e+04  34856.000000  34856.000000  26640.000000   \n",
       "mean       3.031012  1.050173e+06     11.184929   3116.062859      3.084647   \n",
       "std        0.969933  6.414671e+05      6.788892    109.023903      0.980690   \n",
       "min        1.000000  8.500000e+04      0.000000   3000.000000      0.000000   \n",
       "25%        2.000000  6.350000e+05      6.400000   3051.000000      2.000000   \n",
       "50%        3.000000  8.700000e+05     10.300000   3103.000000      3.000000   \n",
       "75%        4.000000  1.295000e+06     14.000000   3156.000000      4.000000   \n",
       "max       16.000000  1.120000e+07     48.100000   3978.000000     30.000000   \n",
       "\n",
       "           Bathroom           Car       Landsize  BuildingArea     YearBuilt  \\\n",
       "count  26631.000000  26129.000000   23047.000000   13742.00000  15551.000000   \n",
       "mean       1.624798      1.728845     593.598993     160.25640   1965.289885   \n",
       "std        0.724212      1.010771    3398.841946     401.26706     37.328178   \n",
       "min        0.000000      0.000000       0.000000       0.00000   1196.000000   \n",
       "25%        1.000000      1.000000     224.000000     102.00000   1940.000000   \n",
       "50%        2.000000      2.000000     521.000000     136.00000   1970.000000   \n",
       "75%        2.000000      2.000000     670.000000     188.00000   2000.000000   \n",
       "max       12.000000     26.000000  433014.000000   44515.00000   2106.000000   \n",
       "\n",
       "          Lattitude    Longtitude  Propertycount  \n",
       "count  26881.000000  26881.000000   34854.000000  \n",
       "mean     -37.810634    145.001851    7572.888306  \n",
       "std        0.090279      0.120169    4428.090313  \n",
       "min      -38.190430    144.423790      83.000000  \n",
       "25%      -37.862950    144.933500    4385.000000  \n",
       "50%      -37.807600    145.007800    6763.000000  \n",
       "75%      -37.754100    145.071900   10412.000000  \n",
       "max      -37.390200    145.526350   21650.000000  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mel.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Suburb               0\n",
       "Address              0\n",
       "Rooms                0\n",
       "Type                 0\n",
       "Price             7610\n",
       "Method               0\n",
       "SellerG              0\n",
       "Date                 0\n",
       "Distance             1\n",
       "Postcode             1\n",
       "Bedroom2          8217\n",
       "Bathroom          8226\n",
       "Car               8728\n",
       "Landsize         11810\n",
       "BuildingArea     21115\n",
       "YearBuilt        19306\n",
       "CouncilArea          3\n",
       "Lattitude         7976\n",
       "Longtitude        7976\n",
       "Regionname           3\n",
       "Propertycount        3\n",
       "dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mel.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Suburb\n",
      "['Abbotsford' 'Airport West' 'Albert Park' 'Alphington' 'Altona'\n",
      " 'Altona North' 'Armadale' 'Ascot Vale' 'Ashburton' 'Ashwood'\n",
      " 'Avondale Heights' 'Balaclava' 'Balwyn' 'Balwyn North' 'Bentleigh'\n",
      " 'Bentleigh East' 'Box Hill' 'Braybrook' 'Brighton' 'Brighton East'\n",
      " 'Brunswick' 'Brunswick West' 'Bulleen' 'Burwood' 'Camberwell'\n",
      " 'Canterbury' 'Carlton North' 'Carnegie' 'Caulfield' 'Caulfield North'\n",
      " 'Caulfield South' 'Chadstone' 'Clifton Hill' 'Coburg' 'Coburg North'\n",
      " 'Collingwood' 'Doncaster' 'Eaglemont' 'Elsternwick' 'Elwood' 'Essendon'\n",
      " 'Essendon North' 'Fairfield' 'Fitzroy' 'Fitzroy North' 'Flemington'\n",
      " 'Footscray' 'Glen Iris' 'Glenroy' 'Gowanbrae' 'Hadfield' 'Hampton'\n",
      " 'Hampton East' 'Hawthorn' 'Heidelberg Heights' 'Heidelberg West'\n",
      " 'Hughesdale' 'Ivanhoe' 'Kealba' 'Keilor East' 'Kensington' 'Kew'\n",
      " 'Kew East' 'Kooyong' 'Maidstone' 'Malvern' 'Malvern East' 'Maribyrnong'\n",
      " 'Melbourne' 'Middle Park' 'Mont Albert' 'Moonee Ponds' 'Moorabbin'\n",
      " 'Newport' 'Niddrie' 'North Melbourne' 'Northcote' 'Oak Park'\n",
      " 'Oakleigh South' 'Parkville' 'Pascoe Vale' 'Port Melbourne' 'Prahran'\n",
      " 'Preston' 'Reservoir' 'Richmond' 'Rosanna' 'Seddon' 'South Melbourne'\n",
      " 'South Yarra' 'Southbank' 'Spotswood' 'St Kilda' 'Strathmore' 'Sunshine'\n",
      " 'Sunshine North' 'Sunshine West' 'Surrey Hills' 'Templestowe Lower'\n",
      " 'Thornbury' 'Toorak' 'Viewbank' 'Watsonia' 'West Melbourne'\n",
      " 'Williamstown' 'Williamstown North' 'Windsor' 'Yallambie' 'Yarraville'\n",
      " 'Aberfeldie' 'Bellfield' 'Brunswick East' 'Burnley' 'Campbellfield'\n",
      " 'Carlton' 'East Melbourne' 'Essendon West' 'Fawkner' 'Hawthorn East'\n",
      " 'Heidelberg' 'Ivanhoe East' 'Jacana' 'Kingsbury' 'Kingsville'\n",
      " 'Murrumbeena' 'Ormond' 'West Footscray' 'Albion' 'Brooklyn' 'Glen Huntly'\n",
      " 'Oakleigh' 'Ripponlea' 'Cremorne' 'Docklands' 'South Kingsville'\n",
      " 'Strathmore Heights' 'Travancore' 'Caulfield East' 'Seaholme'\n",
      " 'Keilor Park' 'Gardenvale' 'Princes Hill' 'Altona Meadows' 'Ardeer'\n",
      " 'Attwood' 'Bayswater' 'Bayswater North' 'Beaumaris' 'Berwick' 'Blackburn'\n",
      " 'Blackburn South' 'Boronia' 'Briar Hill' 'Broadmeadows' 'Bundoora'\n",
      " 'Burnside Heights' 'Burwood East' 'Cairnlea' 'Caroline Springs'\n",
      " 'Cheltenham' 'Clarinda' 'Clayton' 'Clyde North' 'Craigieburn'\n",
      " 'Cranbourne' 'Croydon' 'Croydon Hills' 'Croydon North' 'Dandenong'\n",
      " 'Dandenong North' 'Diamond Creek' 'Dingley Village' 'Doncaster East'\n",
      " 'Donvale' 'Doreen' 'Edithvale' 'Eltham' 'Eltham North' 'Emerald' 'Epping'\n",
      " 'Eumemmerring' 'Ferntree Gully' 'Forest Hill' 'Frankston'\n",
      " 'Frankston North' 'Frankston South' 'Gisborne' 'Gladstone Park'\n",
      " 'Glen Waverley' 'Greensborough' 'Greenvale' 'Hallam' 'Healesville'\n",
      " 'Heathmont' 'Highett' 'Hillside' 'Hoppers Crossing' 'Huntingdale'\n",
      " 'Keilor Downs' 'Keilor Lodge' 'Keysborough' 'Kings Park' 'Lalor'\n",
      " 'Lower Plenty' 'Lynbrook' 'MacLeod' 'Melton' 'Melton South' 'Melton West'\n",
      " 'Mentone' 'Mernda' 'Mickleham' 'Mill Park' 'Mitcham' 'Montmorency'\n",
      " 'Montrose' 'Mordialloc' 'Mount Waverley' 'Mulgrave' 'Narre Warren'\n",
      " 'Noble Park' 'Nunawading' 'Oakleigh East' 'Parkdale' 'Point Cook'\n",
      " 'Ringwood' 'Ringwood East' 'Rockbank' 'Rowville' 'Roxburgh Park'\n",
      " 'Sandringham' 'Seabrook' 'Seaford' 'Skye' 'South Morang' 'Springvale'\n",
      " 'Springvale South' 'St Albans' 'St Helena' 'Sunbury' 'Sydenham' 'Tarneit'\n",
      " 'Taylors Hill' 'Taylors Lakes' 'Tecoma' 'Templestowe' 'The Basin'\n",
      " 'Thomastown' 'Truganina' 'Tullamarine' 'Vermont' 'Vermont South'\n",
      " 'Wantirna' 'Wantirna South' 'Werribee' 'Werribee South' 'Westmeadows'\n",
      " 'Williams Landing' 'Wollert' 'Wyndham Vale' 'Aspendale' 'Black Rock'\n",
      " 'Blackburn North' 'Bonbeach' 'Carrum' 'Chelsea' 'Clayton South' 'Dallas'\n",
      " 'Delahey' 'Doveton' 'McKinnon' 'Mooroolbark' 'Pakenham' 'Ringwood North'\n",
      " 'Scoresby' 'Warrandyte' 'Watsonia North' 'Wattle Glen' 'Wheelers Hill'\n",
      " 'Albanvale' 'Aspendale Gardens' 'Belgrave' 'Carrum Downs'\n",
      " 'Cranbourne East' 'Cranbourne North' 'Deer Park' 'Heatherton' 'Kilsyth'\n",
      " 'Langwarrin' 'Notting Hill' 'Patterson Lakes' 'Riddells Creek'\n",
      " 'Beaconsfield Upper' 'Chelsea Heights' 'Chirnside Park' 'Coolaroo'\n",
      " 'Darley' 'Hampton Park' 'Keilor' 'Meadow Heights' 'Mount Evelyn'\n",
      " 'North Warrandyte' 'Sandhurst' 'Silvan' 'Wallan' 'Croydon South'\n",
      " 'Derrimut' 'Diggers Rest' 'Knoxfield' 'Upwey' 'Warranwood'\n",
      " 'Bacchus Marsh' 'Bullengarook' 'Deepdene' 'Hurstbridge' 'Kurunjang'\n",
      " 'Laverton' 'Lilydale' 'Wonga Park' 'Endeavour Hills' 'Officer' 'Olinda'\n",
      " 'Waterways' 'Beaconsfield' 'Yarra Glen' 'Brookfield' 'Lysterfield'\n",
      " 'Plenty' 'Whittlesea' 'Burnside' 'New Gisborne' 'Guys Hill' 'Plumpton'\n",
      " 'croydon' 'Monbulk' 'Avonsleigh' 'Wildwood' 'Gisborne South' 'Research'\n",
      " 'viewbank' 'Botanic Ridge' 'Bulla' 'Coldstream' 'Hopetoun Park'\n",
      " 'Cranbourne West' 'Eynesbury' 'Fawkner Lot' 'Ferny Creek' 'Wandin North'\n",
      " 'Kalkallo' 'Menzies Creek']\n",
      "351\n",
      " \n",
      "Address\n",
      "['68 Studley St' '85 Turner St' '25 Bloomburg St' ... '147A Severn St'\n",
      " '12/37 Stephen St' '3 Tarrengower St']\n",
      "34009\n",
      " \n",
      "Rooms\n",
      "[ 2  3  4  1  5  6  7  8 10  9 12 16]\n",
      "12\n",
      " \n",
      "Type\n",
      "['h' 'u' 't']\n",
      "3\n",
      " \n",
      "Price\n",
      "[     nan 1480000. 1035000. ... 2685000. 1671000. 1605500.]\n",
      "2871\n",
      " \n",
      "Method\n",
      "['SS' 'S' 'VB' 'SP' 'PI' 'SN' 'W' 'PN' 'SA']\n",
      "9\n",
      " \n",
      "SellerG\n",
      "['Jellis' 'Biggin' 'Rounds' 'Nelson' 'Collins' 'Dingle' 'Purplebricks'\n",
      " 'Greg' 'Philip' 'LITTLE' 'Kay' 'Beller' 'Marshall' 'hockingstuart' 'Brad'\n",
      " 'Maddison' 'Barry' 'Airport' 'Considine' 'Rendina' 'Ray' 'Propertyau'\n",
      " 'McDonald' 'Frank' 'Prof.' 'Harcourts' 'Thomson' 'Buxton' 'RT'\n",
      " \"Sotheby's\" 'Cayzer' 'Chisholm' 'McGrath' 'Brace' 'Miles' 'Holland'\n",
      " 'Love' 'Thomas' 'Barlow' 'Sweeney' 'Village' 'Jas' 'Williams' 'Gunn&Co'\n",
      " 'Burnham' 'Point' 'Compton' 'FN' 'Hunter' 'Raine&Horne' 'Noel' 'Hodges'\n",
      " 'Gary' 'Fletchers' 'Woodards' 'Raine' 'Alexkarbon' 'Walshe' 'Weda'\n",
      " 'Stockdale' 'Tim' 'Buxton/Marshall' 'AIME' 'Moonee' 'HAR' 'Edward' 'RW'\n",
      " 'North' 'MICM' 'Ascend' 'Christopher' 'Morrison' 'Bekdon' 'Mandy' 'R&H'\n",
      " 'Fletchers/One' 'Lindellas' 'Appleby' 'Assisi' 'One' 'Owen' 'Parkes'\n",
      " 'C21' 'Century' \"O'Brien\" 'Bayside' 'Anderson' 'Paul'\n",
      " 'hockingstuart/Buxton' 'Smart' 'First' 'Matthew' 'Melbourne' 'Nick'\n",
      " 'Allens' 'Bells' 'Nguyen' 'Trimson' 'Douglas' 'Batty' 'GL' 'YPA'\n",
      " \"Tiernan's\" 'J' 'Castran' 'Branon' 'Rodney' 'Joseph' 'Harrington'\n",
      " 'Galldon' 'Grantham' 'Chambers' 'Pagan' 'Peter' 'hockingstuart/Advantage'\n",
      " 'Ross' 'Rayner' 'Garvey' \"O'Donoghues\" 'Hamilton' 'Weast' 'Kelly'\n",
      " 'Property' \"Private/Tiernan's\" 'Australian' 'Bustin' \"Abercromby's\"\n",
      " 'Whiting' 'iTRAK' 'Del' 'Caine' 'Nicholson' 'JMRE' 'ASL' 'Changing' 'Re'\n",
      " 'RE' 'Walsh' 'Foxtons' 'Ham' 'Darren' 'Vic' 'Haughton' 'Scott' 'Pride'\n",
      " 'Morleys' 'Wilson' 'Buxton/Advantage' 'Professionals' 'Joe' 'Red'\n",
      " 'hockingstuart/Jellis' 'Craig' 'Naison' 'Sweeney/Advantage' 'Reach'\n",
      " 'Domain' 'Eview' 'Jason' \"D'Aprano\" 'Charlton' 'CASTRAN' 'Wood' 'William'\n",
      " 'Coventry' 'Buckingham' 'Nardella' 'Karen' 'LJ' 'Shape' 'Direct'\n",
      " 'Fletchers/Fletchers' 'Besser' 'Johnston' 'Avion' 'Redina' 'Clairmont'\n",
      " 'Lucas' 'Dixon' 'Xynergy' 'Elite' 'Buxton/Find' 'W.B.' 'Leased'\n",
      " 'Harcourts/Barry' 'Win' 'Collings' 'New' 'Parkinson' 'Geoff'\n",
      " 'hockingstuart/Barry' 'Blue' 'MSM' 'Steveway' 'hockingstuart/Village'\n",
      " 'VICPROP' 'Inner' 'Meadows' 'Allan' 'S&L' 'Crane' 'Calder' 'Metro'\n",
      " 'Homes' 'Zahn' 'Mason' 'Landfield' 'David' 'Luxe' 'Prowse' 'Ken'\n",
      " 'Rombotis' 'iOne' 'hockingstuart/Sweeney' 'Iconek' 'Luxton' 'Hooper'\n",
      " 'JRW' 'Oak' 'White' 'Jim' 'Weston' '@Realty' 'Reed' 'Oriental' 'Max'\n",
      " 'Steller' 'Rosin' 'Real' 'Jeffrey' 'Hall' 'Icon' 'buyMyplace' 'WHITEFOX'\n",
      " 'Christou' 'Marvelli' \"Grant's\" 'Hoskins' 'Gardiner' 'McLennan' 'Triwest'\n",
      " 'Reliance' 'PRDNationwide' 'Only' 'Leyton' 'iSell' 'Obrien' 'Maitland'\n",
      " 'Millership' 'L' 'Emerson' 'Follett' 'Ash' 'LLC' 'Ace' 'Flannagan'\n",
      " 'Carter' 'WeSell' 'M.J' 'iProperty' 'Hayeswinckle' 'Schroeder' 'iHomes'\n",
      " 'VICProp' 'REMAX' 'Space' 'Victory' 'Aumeca' 'Mindacom' 'Ryder'\n",
      " 'Sanctuary' 'Leeburn' 'Asset' 'Westside' 'Sell' 'Mitchell' 'Darras' 'U'\n",
      " 'Nicholas' 'Rexhepi' 'Keatings' 'Aquire' 'Conquest' 'Prime' 'Donovan'\n",
      " 'Community' 'Free' 'Veitch' 'John' 'Peake' 'Ristic' 'JY' 'Upper' 'Daniel'\n",
      " 'VicHomes' 'TRUE' 'McNaughton' 'Leading' 'Bullen' 'Better' 'Boutique'\n",
      " 'Royston' 'Langwell' 'Silver' 'Wyndham' 'Kaye' 'Nicholls' 'Bowman' 'Just'\n",
      " 'Home' 'Le' 'Cooper' 'Black' 'The' 'Open' 'Roger' 'McEwing' 'Sandhurst'\n",
      " 'Boran' 'hockingstuart/hockingstuart' 'Area' 'MJ' 'Eric' 'SN'\n",
      " 'Waterfront' 'P' 'PRD' 'Bombay' 'Quinta' 'T' 'Tanner' 'LJH' 'Munn'\n",
      " 'Knight' 'Justin' 'Blackbird' 'Sweeney/Burnham' 'H' 'Alex' 'Can'\n",
      " 'Pavilion' 'Benchmark' 'Gellibrand' 'hockingstuart/Harcourts' 'Charter'\n",
      " 'Surreal' 'Vicprop' 'A' 'Upside' 'OBrien' 'Meallin' 'Malvern' 'Mark'\n",
      " 'Bradly' 'For' 'Peninsula' 'Sutherland' 'Leaders' 'Spencer'\n",
      " 'McGrath/Langwell' 'Benlor' 'Burns' 'Sterling' 'K.R.Peters'\n",
      " 'Buxton/Buxton' 'CarlinSmith' 'Gold' 'Hill' 'People'\n",
      " 'hockingstuart/Biggin' 'Mega' 'Skad' 'Ruralco' 'Create' 'Janice' 'R'\n",
      " 'G&H' 'Commercial' 'PSP' 'hockingstuart/Cayzer' 'Unity' 'Sprint'\n",
      " 'McGrath/Buxton' 'hockingstuart/Marshall' 'McGrath/First' 'voglwalpole'\n",
      " 'Watermark' 'Methven']\n",
      "388\n",
      " \n",
      "Date\n",
      "['3/09/2016' '3/12/2016' '4/02/2016' '4/03/2017' '4/06/2016' '6/08/2016'\n",
      " '7/05/2016' '7/11/2016' '8/10/2016' '10/12/2016' '12/11/2016'\n",
      " '13/08/2016' '14/05/2016' '15/10/2016' '16/04/2016' '16/07/2016'\n",
      " '17/09/2016' '18/03/2017' '18/06/2016' '19/11/2016' '22/05/2016'\n",
      " '22/08/2016' '23/04/2016' '24/09/2016' '25/02/2017' '26/07/2016'\n",
      " '27/11/2016' '28/05/2016' '30/07/2016' '10/09/2016' '11/02/2017'\n",
      " '27/06/2016' '28/08/2016' '12/06/2016' '11/03/2017' '28/01/2016'\n",
      " '6/05/2017' '8/04/2017' '13/05/2017' '29/04/2017' '20/05/2017'\n",
      " '22/04/2017' '1/07/2017' '3/06/2017' '17/06/2017' '24/06/2017'\n",
      " '27/05/2017' '8/07/2017' '12/08/2017' '15/07/2017' '22/07/2017'\n",
      " '29/07/2017' '3/09/2017' '9/09/2017' '16/09/2017' '19/08/2017'\n",
      " '23/09/2017' '26/08/2017' '7/10/2017' '14/10/2017' '21/10/2017'\n",
      " '28/10/2017' '30/09/2017' '4/11/2017' '11/11/2017' '18/11/2017'\n",
      " '25/11/2017' '6/01/2018' '9/12/2017' '3/02/2018' '10/02/2018'\n",
      " '20/01/2018' '27/01/2018' '3/03/2018' '10/03/2018' '17/02/2018'\n",
      " '17/03/2018' '24/02/2018']\n",
      "78\n",
      " \n",
      "Distance\n",
      "[ 2.5 13.5  3.3  6.4 13.8 11.1  6.3  5.9 11.  12.2 10.5  6.6  9.7  9.2\n",
      " 13.  13.9 13.1 10.8 11.2 10.7  5.2 11.8 11.7  7.8  9.   3.2 11.4  8.9\n",
      "  8.1  9.3 13.6  3.4  1.6 10.3  8.5  7.7  8.   9.4  5.8  3.5  4.4 12.1\n",
      " 13.7 14.5  4.6  7.9 15.  12.8  4.2  5.6  7.5  6.2  7.4  8.7  2.8  4.1\n",
      "  6.9 14.6  8.4  2.3  5.5 11.5 14.7  2.6  9.9  3.8  4.5  8.8  2.1  1.2\n",
      "  6.1 12.6 13.3  6.5 14.9  1.9  5.1  7.   9.1  9.5  1.8  1.5  9.8 12.4\n",
      " 10.6  8.2 10.9 10.4 14.  12.5  5.3 12.7  3.7  3.   5.7 15.5  4.3 10.2\n",
      " 16.5 23.2 17.3 35.2 13.4 25.  16.1  4.  14.8 10.1 17.9 17.5 16.7  3.6\n",
      " 43.4  6.7 20.6 34.7 23.  24.7 21.8 22.2 14.3 25.9  1.3 27.  18.   7.2\n",
      " 36.9 19.6 28.8 24.8 15.4 38.  45.9 12.9  7.3 20.4 32.3 45.2 21.3 16.\n",
      " 18.4 12.3  5.4 25.2 16.3 33.8 31.7 29.8 20.  17.2 16.2 21.5 14.2 18.8\n",
      " 34.1 22.7 12.   2.4 19.9 23.8 23.5 15.2 35.4 20.5  2.7 20.8  5.  30.4\n",
      " 15.3  3.1 17.6 25.5 27.2  8.6 31.2  2.   1.4  0.  26.5 47.3  0.7 21.1\n",
      " 23.6  6.8 34.9 18.7 26.  41.  47.4 39.8 27.1 17.4 37.5 33.3 31.6 34.6\n",
      " 44.2 27.7 23.3 29.3 26.1 29.9 28.5 43.3 30.6 39.  31.4 20.1 35.5 48.1\n",
      " 16.6 22.9 33.   nan 29.5 32.6]\n",
      "215\n",
      " \n",
      "Postcode\n",
      "[3067. 3042. 3206. 3078. 3018. 3025. 3143. 3032. 3147. 3034. 3183. 3103.\n",
      " 3104. 3204. 3165. 3128. 3019. 3186. 3187. 3056. 3055. 3105. 3125. 3124.\n",
      " 3126. 3054. 3163. 3162. 3161. 3148. 3068. 3058. 3066. 3108. 3084. 3185.\n",
      " 3184. 3040. 3041. 3065. 3031. 3011. 3146. 3046. 3043. 3188. 3122. 3081.\n",
      " 3166. 3079. 3021. 3033. 3101. 3102. 3144. 3012. 3145. 3000. 3127. 3039.\n",
      " 3189. 3015. 3051. 3070. 3167. 3052. 3044. 3207. 3181. 3072. 3073. 3121.\n",
      " 3205. 3141. 3006. 3182. 3020. 3107. 3071. 3142. 3087. 3003. 3016. 3085.\n",
      " 3013. 3057. 3061. 3053. 3002. 3060. 3123. 3047. 3083. 3008. 3028. 3022.\n",
      " 3049. 3153. 3193. 3806. 3130. 3155. 3088. 3023. 3151. 3192. 3169. 3168.\n",
      " 3978. 3064. 3977. 3136. 3175. 3089. 3172. 3109. 3111. 3754. 3196. 3095.\n",
      " 3782. 3076. 3177. 3156. 3131. 3199. 3200. 3437. 3150. 3059. 3803. 3777.\n",
      " 3135. 3190. 3037. 3029. 3038. 3173. 3075. 3093. 3975. 3337. 3338. 3194.\n",
      " 3082. 3132. 3094. 3765. 3195. 3149. 3170. 3805. 3174. 3030. 3134. 3335.\n",
      " 3178. 3191. 3198. 3752. 3171. 3429. 3160. 3106. 3154. 3074. 3133. 3152.\n",
      " 3027. 3750. 3024. 3197. 3138. 3810. 3179. 3113. 3096. 3201. 3202. 3137.\n",
      " 3910. 3431. 3808. 3116. 3048. 3340. 3976. 3036. 3796. 3795. 3756. 3427.\n",
      " 3180. 3158. 3099. 3140. 3115. 3802. 3809. 3788. 3807. 3775. 3090. 3757.\n",
      " 3438. 3793. 3428. 3770.   nan 3786. 3139. 3159.]\n",
      "211\n",
      " \n",
      "Bedroom2\n",
      "[ 2.  3.  4.  6. nan  1.  5.  7.  0.  8.  9. 30. 20. 10. 16. 12.]\n",
      "15\n",
      " \n",
      "Bathroom\n",
      "[ 1.  2. nan  3.  7.  4.  0.  5.  6. 12.  8.  9.]\n",
      "11\n",
      " \n",
      "Car\n",
      "[ 1.  0.  2. nan  6.  5.  4.  3.  8.  7. 11. 26.  9. 10. 18. 12.]\n",
      "15\n",
      " \n",
      "Landsize\n",
      "[ 126.  202.  156. ... 1098. 1109. 1163.]\n",
      "1684\n",
      " \n",
      "BuildingArea\n",
      "[         nan 7.900000e+01 1.500000e+02 1.420000e+02 2.200000e+02\n",
      " 2.100000e+02 8.200000e+01 1.470000e+02 1.070000e+02 7.500000e+01\n",
      " 8.000000e+01 1.900000e+02 9.400000e+01 9.700000e+01 1.290000e+02\n",
      " 1.100000e+02 1.050000e+02 7.300000e+01 1.350000e+02 1.670000e+02\n",
      " 2.700000e+01 6.000000e+01 8.500000e+01 1.740000e+02 5.000000e+01\n",
      " 1.280000e+02 1.800000e+01 1.240000e+02 9.100000e+01 8.100000e+01\n",
      " 2.250000e+02 1.450000e+02 1.140000e+02 8.400000e+01 1.340000e+02\n",
      " 1.160000e+02 8.600000e+01 1.270000e+02 1.860000e+02 9.000000e+01\n",
      " 1.330000e+02 1.300000e+02 1.130000e+02 1.000000e+02 3.090000e+02\n",
      " 1.920000e+02 1.260000e+02 1.010000e+02 1.020000e+02 7.600000e+01\n",
      " 1.460000e+02 1.980000e+02 1.800000e+02 1.250000e+02 1.590000e+02\n",
      " 1.220000e+02 8.800000e+01 1.810000e+02 1.170000e+02 9.800000e+01\n",
      " 8.300000e+01 2.540000e+02 1.230000e+02 1.190000e+02 1.310000e+02\n",
      " 3.400000e+01 2.070000e+02 6.800000e+01 6.500000e+01 1.850000e+02\n",
      " 5.400000e+01 2.630000e+02 2.030000e+02 1.650000e+02 1.400000e+02\n",
      " 1.120000e+02 2.710000e+02 6.100000e+01 2.720000e+02 2.110000e+02\n",
      " 2.420000e+02 2.680000e+02 1.200000e+02 9.300000e+01 2.200000e+01\n",
      " 5.700000e+01 1.520000e+02 1.760000e+02 1.410000e+02 7.700000e+01\n",
      " 8.700000e+01 1.360000e+02 5.800000e+01 3.000000e+00 1.080000e+02\n",
      " 2.510000e+02 1.180000e+02 1.690000e+02 1.960000e+02 1.090000e+02\n",
      " 4.600000e+01 6.030000e+02 1.700000e+02 1.570000e+02 1.600000e+02\n",
      " 1.580000e+02 7.000000e+01 1.680000e+02 1.400000e+01 2.920000e+02\n",
      " 3.800000e+01 2.080000e+02 2.040000e+02 1.430000e+02 9.600000e+01\n",
      " 2.220000e+02 1.820000e+02 1.110000e+02 1.210000e+02 1.630000e+02\n",
      " 5.160000e+02 2.320000e+02 5.300000e+01 1.060000e+02 6.700000e+01\n",
      " 7.400000e+01 1.490000e+02 3.330000e+02 2.850000e+02 1.550000e+02\n",
      " 6.200000e+01 2.700000e+02 4.350000e+02 9.200000e+01 1.480000e+02\n",
      " 1.770000e+02 1.390000e+02 1.950000e+02 2.860000e+02 1.040000e+02\n",
      " 1.320000e+02 4.110000e+02 4.020000e+02 1.150000e+02 6.900000e+01\n",
      " 1.720000e+02 1.440000e+02 1.660000e+02 1.750000e+02 7.100000e+01\n",
      " 2.730000e+02 3.990000e+02 3.150000e+02 1.780000e+02 6.180000e+02\n",
      " 2.280000e+02 3.980000e+02 4.440000e+02 3.900000e+02 2.060000e+02\n",
      " 1.970000e+02 1.990000e+02 2.660000e+02 2.740000e+02 2.400000e+02\n",
      " 2.780000e+02 1.640000e+02 2.010000e+02 3.020000e+02 7.920000e+02\n",
      " 2.150000e+02 1.510000e+02 2.550000e+02 3.170000e+02 2.350000e+02\n",
      " 3.110000e+02 2.430000e+02 1.030000e+02 5.000000e+02 2.810000e+02\n",
      " 3.950000e+02 1.530000e+02 4.900000e+01 5.900000e+01 5.100000e+01\n",
      " 2.180000e+02 4.200000e+02 2.260000e+02 4.100000e+02 4.490000e+02\n",
      " 3.560000e+02 3.490000e+02 2.500000e+02 3.260000e+02 7.200000e+01\n",
      " 2.520000e+02 2.000000e+02 3.080000e+02 2.410000e+02 4.650000e+02\n",
      " 3.360000e+02 5.020000e+02 2.640000e+02 2.530000e+02 3.500000e+02\n",
      " 3.220000e+02 3.140000e+02 3.930000e+02 2.910000e+02 2.760000e+02\n",
      " 1.930000e+02 2.600000e+02 3.230000e+02 1.540000e+02 2.750000e+02\n",
      " 4.770000e+02 1.370000e+02 2.050000e+02 2.140000e+02 5.200000e+02\n",
      " 2.330000e+02 3.300000e+02 3.650000e+02 4.450000e+02 3.550000e+02\n",
      " 2.470000e+02 1.880000e+02 3.600000e+02 5.290000e+02 2.440000e+02\n",
      " 2.960000e+02 7.200000e+02 5.180000e+02 5.000000e+00 5.420000e+02\n",
      " 2.390000e+02 2.120000e+02 1.940000e+02 1.380000e+02 3.530000e+02\n",
      " 4.750000e+02 2.450000e+02 2.840000e+02 3.610000e+02 7.660000e+02\n",
      " 9.500000e+01 1.910000e+02 7.800000e+01 2.800000e+02 2.310000e+02\n",
      " 1.560000e+02 2.570000e+02 2.560000e+02 3.370000e+02 2.800000e+01\n",
      " 2.650000e+02 5.380000e+02 9.900000e+01 2.190000e+02 1.044000e+03\n",
      " 1.620000e+02 2.380000e+02 2.160000e+02 4.320000e+02 2.580000e+02\n",
      " 2.090000e+02 3.000000e+02 1.710000e+02 3.410000e+02 3.400000e+02\n",
      " 2.830000e+02 2.020000e+02 2.620000e+02 3.640000e+02 4.120000e+02\n",
      " 2.210000e+02 3.010000e+02 4.230000e+02 4.000000e+01 4.190000e+02\n",
      " 2.290000e+02 3.050000e+02 2.000000e+00 3.190000e+02 2.460000e+02\n",
      " 1.610000e+02 3.040000e+02 3.420000e+02 4.040000e+02 3.700000e+02\n",
      " 2.130000e+02 1.830000e+02 3.210000e+02 1.870000e+02 5.940000e+02\n",
      " 3.940000e+02 2.490000e+02 2.890000e+02 3.460000e+02 6.600000e+01\n",
      " 4.000000e+00 2.880000e+02 2.870000e+02 4.500000e+01 8.900000e+01\n",
      " 5.500000e+01 1.041000e+03 1.000000e+00 4.200000e+01 3.700000e+01\n",
      " 6.400000e+01 4.300000e+01 1.840000e+02 6.791000e+03 3.720000e+02\n",
      " 7.190000e+02 3.670000e+02 3.800000e+02 1.890000e+02 3.480000e+02\n",
      " 5.600000e+01 4.670000e+02 3.340000e+02 3.070000e+02 3.112000e+03\n",
      " 4.070000e+02 2.820000e+02 4.530000e+02 3.630000e+02 2.970000e+02\n",
      " 1.730000e+02 4.270000e+02 4.800000e+01 3.300000e+01 3.200000e+02\n",
      " 2.370000e+02 2.230000e+02 5.440000e+02 3.130000e+02 6.300000e+01\n",
      " 4.400000e+01 2.770000e+02 2.170000e+02 4.600000e+02 2.300000e+02\n",
      " 4.700000e+01 1.300000e+01 5.200000e+01 4.810000e+02 4.290000e+02\n",
      " 2.610000e+02 3.060000e+02 3.250000e+02 2.980000e+02 3.270000e+02\n",
      " 3.710000e+02 2.900000e+02 2.360000e+02 4.780000e+02 1.561000e+03\n",
      " 3.620000e+02 2.670000e+02 3.780000e+02 2.240000e+02 3.440000e+02\n",
      " 2.270000e+02 4.540000e+02 7.000000e+02 3.558000e+03 4.400000e+02\n",
      " 2.000000e+01 3.500000e+01 2.590000e+02 3.510000e+02 3.000000e+01\n",
      " 2.480000e+02 2.600000e+01 3.380000e+02 1.143000e+03 6.070000e+02\n",
      " 4.610000e+02 3.540000e+02 2.950000e+02 4.010000e+02 4.240000e+02\n",
      " 6.720000e+02 2.690000e+02 1.900000e+01 4.130000e+02 3.240000e+02\n",
      " 6.130000e+02 3.030000e+02 3.160000e+02 3.740000e+02 4.100000e+01\n",
      " 2.340000e+02 3.730000e+02 1.700000e+01 1.790000e+02 4.140000e+02\n",
      " 1.200000e+01 4.260000e+02 4.000000e+02 3.580000e+02 1.022000e+03\n",
      " 2.930000e+02 4.180000e+02 3.100000e+02 3.920000e+02 3.390000e+02\n",
      " 2.500000e+01 3.900000e+01 3.290000e+02 1.600000e+01 0.000000e+00\n",
      " 3.850000e+02 3.310000e+02 1.000000e+01 5.010000e+02 4.500000e+02\n",
      " 5.060000e+02 5.280000e+02 5.580000e+02 5.250000e+02 5.570000e+02\n",
      " 3.600000e+01 3.120000e+02 3.470000e+02 6.500000e+02 6.730000e+02\n",
      " 1.500000e+01 4.340000e+02 3.350000e+02 3.450000e+02 3.770000e+02\n",
      " 2.940000e+02 3.320000e+02 7.000000e+00 3.750000e+02 2.790000e+02\n",
      " 5.930000e+02 3.870000e+02 3.570000e+02 4.050000e+02 3.180000e+02\n",
      " 8.080000e+02 5.080000e+02 6.430000e+02 7.230000e+01 2.313300e+02\n",
      " 6.623000e+01 3.760000e+02 1.015100e+02 1.953000e+02 6.811000e+01\n",
      " 1.126000e+02 1.968000e+02 1.734500e+02 1.793000e+02 1.343000e+02\n",
      " 4.643000e+02 7.677000e+01 1.062000e+02 1.129000e+02 1.137600e+02\n",
      " 1.531000e+02 3.200000e+01 8.520000e+01 7.290000e+01 9.950000e+01\n",
      " 1.074000e+02 1.426000e+02 5.300000e+02 7.750000e+01 8.230000e+01\n",
      " 9.290000e+01 2.557900e+02 1.863600e+02 4.900000e+02 1.472000e+02\n",
      " 8.074000e+01 2.259800e+02 9.000000e+00 1.036000e+02 6.370000e+01\n",
      " 1.108700e+02 1.625200e+02 9.384000e+01 1.244500e+02 3.010800e+02\n",
      " 1.138100e+02 1.067600e+02 2.106800e+02 1.313000e+02 3.950000e+01\n",
      " 1.052300e+02 1.013700e+02 1.421000e+02 1.232100e+02 1.407481e+02\n",
      " 8.650000e+01 3.060000e+01 2.255000e+02 4.095400e+02 3.647000e+03\n",
      " 1.566000e+02 1.565000e+02 2.276000e+02 1.903600e+02 1.046300e+02\n",
      " 4.430000e+02 1.671300e+02 1.485000e+02 2.701800e+02 5.330000e+01\n",
      " 9.850000e+01 1.579351e+02 3.280000e+02 5.450000e+01 2.132300e+02\n",
      " 9.430000e+01 4.645000e+03 2.100000e+01 9.588000e+01 3.292400e+02\n",
      " 1.057000e+02 4.540000e+01 6.950000e+01 2.213000e+02 1.216000e+02\n",
      " 1.132000e+02 1.867500e+02 5.400000e+02 9.870000e+01 1.278000e+02\n",
      " 2.686000e+02 1.064000e+02 5.600000e+02 1.680100e+02 3.061900e+02\n",
      " 5.157800e+02 1.961000e+02 7.890000e+02 1.312700e+02 1.678700e+02\n",
      " 1.839700e+02 2.715000e+02 1.995000e+02 2.900000e+01 4.460000e+02\n",
      " 7.545000e+01 1.655000e+02 6.290000e+02 1.446500e+02 2.635000e+02\n",
      " 4.310000e+02 5.850000e+02 1.216300e+02 7.360000e+02 3.716122e+02\n",
      " 1.997300e+02 1.185400e+02 4.123100e+02 2.982100e+02 1.095000e+02\n",
      " 8.874000e+01 1.226000e+02 3.690000e+02 1.695000e+02 4.220000e+01\n",
      " 4.890000e+02 1.355000e+02 2.667600e+02 2.724000e+02 1.000000e-02\n",
      " 2.298000e+02 1.778000e+02 1.394000e+02 1.017600e+02 6.650000e+02\n",
      " 6.340000e+02 1.950964e+02 4.700000e+02 1.305200e+02 5.470000e+02\n",
      " 1.110400e+02 6.340000e+01 2.714700e+02 9.250000e+01 1.159600e+02\n",
      " 1.218400e+02 1.228600e+02 1.142000e+02 2.665300e+02 7.854000e+01\n",
      " 8.535000e+01 3.520000e+02 3.910000e+02 1.218000e+02 8.260000e+01\n",
      " 1.364900e+02 1.256000e+02 1.255100e+02 6.800000e+02 1.579352e+02\n",
      " 1.268000e+02 1.006000e+02 4.440000e+01 1.986000e+02 1.515400e+02\n",
      " 1.809000e+02 8.268367e+02 5.720000e+02 3.660000e+02 6.250000e+02\n",
      " 9.450000e+01 1.166500e+02 1.100000e+01 1.346000e+02 1.838400e+02\n",
      " 1.267000e+02 1.578500e+02 1.554000e+02 1.164000e+02 1.828500e+02\n",
      " 1.297000e+02 1.484700e+02 1.143900e+02 5.530000e+02 5.310000e+02\n",
      " 1.829000e+02 1.847500e+02 1.937400e+02 6.850000e+01 1.099800e+02\n",
      " 1.222500e+02 1.059000e+02 1.017000e+02 1.069000e+02 9.382000e+01\n",
      " 1.326000e+02 1.543000e+02 1.787400e+02 8.830000e+01 8.070000e+01\n",
      " 8.925000e+01 1.816000e+02 2.990000e+02 1.044000e+02 1.805600e+02\n",
      " 1.235000e+02 1.454000e+02 1.609100e+02 2.007100e+02 2.857000e+02\n",
      " 1.008000e+02 8.179000e+01 9.340000e+02 7.030000e+02 1.299200e+02\n",
      " 4.366400e+02 4.370000e+01 1.136000e+02 6.632000e+01 3.564000e+01\n",
      " 6.160000e+01 3.885000e+02 3.890000e+02 3.970000e+02 4.250000e+02\n",
      " 4.950000e+02 4.150000e+02 3.810000e+02 6.770000e+02 4.390000e+02\n",
      " 8.570000e+02 2.300000e+01 5.030000e+02 5.120000e+02 6.640000e+02\n",
      " 5.750000e+02 8.590000e+02 6.530000e+02 9.990000e+02 4.451500e+04\n",
      " 3.960000e+02 9.240000e+02 6.380000e+02 3.680000e+02 4.300000e+02\n",
      " 5.110000e+02 4.370000e+02 4.720000e+02 4.870000e+02 3.100000e+01\n",
      " 4.640000e+02 7.370000e+02 7.840000e+02 4.740000e+02 4.480000e+02\n",
      " 4.080000e+02 6.970000e+02 4.660000e+02 7.390000e+02 3.790000e+02\n",
      " 6.140000e+02 4.210000e+02 5.240000e+02 4.580000e+02 5.340000e+02\n",
      " 5.320000e+02 8.020000e+02 5.130000e+02 4.910000e+02 8.360000e+02\n",
      " 3.860000e+02 2.002000e+03 4.280000e+02 6.600000e+02 4.630000e+02\n",
      " 7.820000e+02 5.640000e+02 5.840000e+02 9.580000e+02 6.220000e+02\n",
      " 6.020000e+02 4.960000e+02 7.260000e+02 4.470000e+02 4.160000e+02\n",
      " 6.400000e+02 7.350000e+02 4.060000e+02 5.210000e+02 6.178000e+03\n",
      " 6.540000e+02 7.270000e+02 4.170000e+02 4.380000e+02 6.860000e+02\n",
      " 6.490000e+02]\n",
      "740\n",
      " \n",
      "YearBuilt\n",
      "[  nan 1900. 2014. 2006. 1910. 2009. 1860. 1890. 1925. 2005. 2010. 1880.\n",
      " 1985. 1970. 2013. 2012. 1920. 1950. 1998. 1930. 2016. 1965. 1960. 1980.\n",
      " 2011. 2015. 1975. 1993. 2003. 1995. 1996. 2000. 1990. 1915. 2004. 2008.\n",
      " 1916. 1962. 1955. 1988. 1953. 1997. 2007. 1967. 1964. 1889. 1888. 1934.\n",
      " 1966. 1935. 1969. 1940. 1938. 1887. 1904. 1972. 1978. 1939. 1945. 1927.\n",
      " 1948. 1947. 1968. 1958. 2017. 1999. 1992. 1961. 1928. 1977. 1919. 1976.\n",
      " 2001. 1926. 1981. 1986. 1943. 1974. 1956. 1936. 1957. 1987. 2002. 1952.\n",
      " 1994. 1949. 1905. 1912. 1924. 1885. 1923. 1918. 1991. 1942. 1973. 2018.\n",
      " 1982. 2106. 1971. 1963. 1931. 1897. 1906. 1883. 1989. 1983. 1937. 1903.\n",
      " 1913. 1830. 1895. 1908. 1917. 1902. 1854. 1850. 1898. 1941. 1951. 1946.\n",
      " 1984. 1901. 1921. 1929. 1959. 1979. 1892. 1933. 1911. 1886. 1876. 1907.\n",
      " 1881. 1870. 1932. 1875. 1863. 1893. 1856. 1877. 1894. 1857. 1914. 1868.\n",
      " 1884. 1872. 1954. 1922. 1896. 1800. 1909. 1196. 1891. 1862. 1871. 1899.\n",
      " 1820. 1869. 1855. 2019. 1879.]\n",
      "160\n",
      " \n",
      "CouncilArea\n",
      "['Yarra City Council' 'Moonee Valley City Council'\n",
      " 'Port Phillip City Council' 'Darebin City Council'\n",
      " 'Hobsons Bay City Council' 'Stonnington City Council'\n",
      " 'Boroondara City Council' 'Monash City Council' 'Glen Eira City Council'\n",
      " 'Whitehorse City Council' 'Maribyrnong City Council'\n",
      " 'Bayside City Council' 'Moreland City Council' 'Manningham City Council'\n",
      " 'Melbourne City Council' 'Banyule City Council' 'Brimbank City Council'\n",
      " 'Kingston City Council' 'Hume City Council' 'Knox City Council'\n",
      " 'Maroondah City Council' 'Casey City Council' 'Melton City Council'\n",
      " 'Greater Dandenong City Council' 'Nillumbik Shire Council'\n",
      " 'Cardinia Shire Council' 'Whittlesea City Council'\n",
      " 'Frankston City Council' 'Macedon Ranges Shire Council'\n",
      " 'Yarra Ranges Shire Council' 'Wyndham City Council'\n",
      " 'Moorabool Shire Council' 'Mitchell Shire Council' nan]\n",
      "33\n",
      " \n",
      "Lattitude\n",
      "[-37.8014  -37.7996  -37.8079  ... -37.61094 -37.81053 -37.81551]\n",
      "13402\n",
      " \n",
      "Longtitude\n",
      "[144.9958  144.9984  144.9934  ... 144.88516 144.88467 144.89351]\n",
      "14524\n",
      " \n",
      "Regionname\n",
      "['Northern Metropolitan' 'Western Metropolitan' 'Southern Metropolitan'\n",
      " 'Eastern Metropolitan' 'South-Eastern Metropolitan' 'Eastern Victoria'\n",
      " 'Northern Victoria' 'Western Victoria' nan]\n",
      "8\n",
      " \n",
      "Propertycount\n",
      "[ 4019.  3464.  3280.  2211.  5301.  5132.  4836.  6567.  3052.  2894.\n",
      "  4502.  2952.  5682.  7809.  6795. 10969.  4605.  3589. 10579.  6938.\n",
      " 11918.  7082.  4480.  5678.  8920.  3265.  3106.  7822.  2379.  6923.\n",
      "  5051.  3582.  2954. 11204.  3445.  4553.  9028.  1651.  4898.  8989.\n",
      "  9264.  1308.  2970.  5825.  6244.  3593.  7570. 10412.  8870.  1071.\n",
      "  2606.  5454.  2356. 11308.  2947.  2674.  3145.  5549.  1202.  5629.\n",
      "  5263. 10331.  2671.   394.  3873.  4675.  8801.  4918. 17496.  2019.\n",
      "  2079.  6232.  2555.  5498.  2291.  6821. 11364.  2651.  3692.  2309.\n",
      "  7485.  8648.  7717. 14577. 21650. 14949.  3540.  2417.  5943. 14887.\n",
      "  8400.  1223. 13240.  3284.  3755.  4217.  6763.  5457.  5420.  7217.\n",
      "  2698.  2329.  2230.  6380.   802.  4380.  1369.  6543.  1543.   790.\n",
      "  5533.   438.  1889.  6786.  3040.   588.  5070.  6482.  2890.  1554.\n",
      "   851.  1414.  1808.  4442.  3578.  5058.  2185.   962.  2403.  3224.\n",
      "   821.  1123.  4707.   984.   389.  1052.   608.   852.  1119.   534.\n",
      "  1008.  7630.  1281.  1130.  5030.  3598.  5366. 17093.  5713.  4387.\n",
      "  9704.  1390.  4294. 10175.  1686.  4048.  7719.  9758.  2727.  5837.\n",
      "  2987. 15510.  7680. 11925.  1705.  2985. 10894.  8322.  4258.  3940.\n",
      " 10999.  4790.  7254.  2546.  6990.  2346.  2259. 10926.   845. 10788.\n",
      "  4385. 17055.  2500.  7566.  3376.  3285. 15321.  8524.  4864.  3728.\n",
      "  3307.  3794.  4794.  5556. 13830.   768.  3656.   570.  8459.  2878.\n",
      "  8279.  1624.  2322.  4168.  3600.  4718.  6065.  6162.  5812.  1158.\n",
      " 10529.  6871.  3891.  2493.  3650. 13366.  7113.  9376. 11806.  4973.\n",
      "  2547.  5087. 15542.  7785.  4407.   538. 11667.  5833.  4497.  1793.\n",
      "  8077.  2756.  7969.  7412.  4054. 14042.   915. 14092.  3640. 10160.\n",
      "  4242.  5336.   869.  6202.  1690.  7955.  5811.  3296.  4181.  4280.\n",
      "  5424. 16166.  2474.  1999.  2940.  5262.  2824.  2866.  2867.  2887.\n",
      "  1989.  3906.  4734.  2246.  2898.  3533.  2397.  8280. 17384.  3619.\n",
      "  2206.  2003.  1442.   642.  7392.  1899.  2243.  1588.  8060.  5462.\n",
      "  6464.  6388.  1048.  4654.  8743.   902.  3351.  1475.   973.  2076.\n",
      "  3789.  1124.  2992.  8256.  2339.  4704.  3532.  1058.  1721.   457.\n",
      "  3988.  1863.  2276.  1184.  2949.  2591.  1595.  2871.   249.   892.\n",
      "  1345.  3553.  2004.  6732.  1328.  8443.    nan  2768.   794.   709.\n",
      "  2332.  1160.  3122.  2126.   777.  2170.  1607.   849.   129.  1490.\n",
      "  1424.   335.    83.   290.   938.  1240.   271.   810.   242.  4939.\n",
      "   604.   121.   342.]\n",
      "342\n",
      " \n"
     ]
    }
   ],
   "source": [
    "cols = mel.columns\n",
    "for i in cols:\n",
    "    print(i)\n",
    "    print(mel[i].unique())\n",
    "    print(mel[i].nunique())\n",
    "    print(' ')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Suburb\n",
      "Reservoir         844\n",
      "Bentleigh East    583\n",
      "Richmond          552\n",
      "Glen Iris         491\n",
      "Preston           485\n",
      "                 ... \n",
      "viewbank            1\n",
      "Guys Hill           1\n",
      "Hopetoun Park       1\n",
      "Eynesbury           1\n",
      "Wildwood            1\n",
      "Name: Suburb, Length: 351, dtype: int64\n",
      " \n",
      "Address\n",
      "5 Charles St         6\n",
      "25 William St        4\n",
      "13 Robinson St       3\n",
      "2 Bruce St           3\n",
      "28 Blair St          3\n",
      "                    ..\n",
      "42 Agg St            1\n",
      "94 Graham St         1\n",
      "27b Toolambool Rd    1\n",
      "28 Percy St          1\n",
      "50 Hyde St           1\n",
      "Name: Address, Length: 34009, dtype: int64\n",
      " \n",
      "Rooms\n",
      "3     15084\n",
      "2      8332\n",
      "4      7956\n",
      "5      1737\n",
      "1      1479\n",
      "6       204\n",
      "7        32\n",
      "8        19\n",
      "10        6\n",
      "9         4\n",
      "12        3\n",
      "16        1\n",
      "Name: Rooms, dtype: int64\n",
      " \n",
      "Type\n",
      "h    23980\n",
      "u     7297\n",
      "t     3580\n",
      "Name: Type, dtype: int64\n",
      " \n",
      "Price\n",
      "600000.0     235\n",
      "1100000.0    235\n",
      "650000.0     219\n",
      "800000.0     217\n",
      "1300000.0    210\n",
      "            ... \n",
      "2077000.0      1\n",
      "615888.0       1\n",
      "1133000.0      1\n",
      "3512500.0      1\n",
      "1111500.0      1\n",
      "Name: Price, Length: 2871, dtype: int64\n",
      " \n",
      "Method\n",
      "S     19744\n",
      "SP     5095\n",
      "PI     4850\n",
      "VB     3108\n",
      "SN     1317\n",
      "PN      308\n",
      "SA      226\n",
      "W       173\n",
      "SS       36\n",
      "Name: Method, dtype: int64\n",
      " \n",
      "SellerG\n",
      "Jellis           3359\n",
      "Nelson           3236\n",
      "Barry            3235\n",
      "hockingstuart    2623\n",
      "Marshall         2027\n",
      "                 ... \n",
      "Meallin             1\n",
      "John                1\n",
      "Vic                 1\n",
      "Hill                1\n",
      "R                   1\n",
      "Name: SellerG, Length: 388, dtype: int64\n",
      " \n",
      "Date\n",
      "28/10/2017    1119\n",
      "17/03/2018     970\n",
      "24/02/2018     941\n",
      "9/12/2017      927\n",
      "25/11/2017     902\n",
      "              ... \n",
      "4/02/2016       44\n",
      "30/09/2017      22\n",
      "20/01/2018      19\n",
      "27/01/2018      12\n",
      "28/01/2016       3\n",
      "Name: Date, Length: 78, dtype: int64\n",
      " \n",
      "Distance\n",
      "11.2    1420\n",
      "13.8     681\n",
      "9.2      665\n",
      "7.8      662\n",
      "10.5     660\n",
      "        ... \n",
      "33.0       1\n",
      "31.4       1\n",
      "30.6       1\n",
      "22.9       1\n",
      "32.6       1\n",
      "Name: Distance, Length: 215, dtype: int64\n",
      " \n",
      "Postcode\n",
      "3073.0    844\n",
      "3046.0    638\n",
      "3020.0    617\n",
      "3121.0    612\n",
      "3165.0    583\n",
      "         ... \n",
      "3139.0      1\n",
      "3159.0      1\n",
      "3793.0      1\n",
      "3788.0      1\n",
      "3428.0      1\n",
      "Name: Postcode, Length: 211, dtype: int64\n",
      " \n",
      "Bedroom2\n",
      "3.0     11881\n",
      "4.0      6348\n",
      "2.0      5777\n",
      "5.0      1427\n",
      "1.0       966\n",
      "6.0       168\n",
      "7.0        30\n",
      "0.0        17\n",
      "8.0        13\n",
      "9.0         5\n",
      "10.0        4\n",
      "30.0        1\n",
      "12.0        1\n",
      "20.0        1\n",
      "16.0        1\n",
      "Name: Bedroom2, dtype: int64\n",
      " \n",
      "Bathroom\n",
      "1.0     12969\n",
      "2.0     11064\n",
      "3.0      2181\n",
      "4.0       269\n",
      "5.0        77\n",
      "0.0        46\n",
      "6.0        16\n",
      "7.0         4\n",
      "8.0         3\n",
      "9.0         1\n",
      "12.0        1\n",
      "Name: Bathroom, dtype: int64\n",
      " \n",
      "Car\n",
      "2.0     12214\n",
      "1.0      9164\n",
      "0.0      1631\n",
      "3.0      1606\n",
      "4.0      1161\n",
      "5.0       151\n",
      "6.0       140\n",
      "7.0        25\n",
      "8.0        23\n",
      "10.0        6\n",
      "9.0         3\n",
      "11.0        2\n",
      "26.0        1\n",
      "12.0        1\n",
      "18.0        1\n",
      "Name: Car, dtype: int64\n",
      " \n",
      "Landsize\n",
      "0.0       2437\n",
      "650.0      204\n",
      "697.0      123\n",
      "585.0       97\n",
      "700.0       86\n",
      "          ... \n",
      "38.0         1\n",
      "1633.0       1\n",
      "1856.0       1\n",
      "1957.0       1\n",
      "1543.0       1\n",
      "Name: Landsize, Length: 1684, dtype: int64\n",
      " \n",
      "BuildingArea\n",
      "120.00     185\n",
      "100.00     161\n",
      "110.00     159\n",
      "130.00     153\n",
      "115.00     149\n",
      "          ... \n",
      "157.85       1\n",
      "130.52       1\n",
      "196.10       1\n",
      "2002.00      1\n",
      "664.00       1\n",
      "Name: BuildingArea, Length: 740, dtype: int64\n",
      " \n",
      "YearBuilt\n",
      "1970.0    1490\n",
      "1960.0    1260\n",
      "1950.0    1089\n",
      "1980.0     726\n",
      "1900.0     606\n",
      "          ... \n",
      "1868.0       1\n",
      "1883.0       1\n",
      "1196.0       1\n",
      "1855.0       1\n",
      "1830.0       1\n",
      "Name: YearBuilt, Length: 160, dtype: int64\n",
      " \n",
      "CouncilArea\n",
      "Boroondara City Council           3675\n",
      "Darebin City Council              2851\n",
      "Moreland City Council             2122\n",
      "Glen Eira City Council            2006\n",
      "Melbourne City Council            1952\n",
      "Banyule City Council              1861\n",
      "Moonee Valley City Council        1791\n",
      "Bayside City Council              1764\n",
      "Brimbank City Council             1593\n",
      "Monash City Council               1466\n",
      "Stonnington City Council          1460\n",
      "Maribyrnong City Council          1451\n",
      "Port Phillip City Council         1280\n",
      "Hume City Council                 1214\n",
      "Yarra City Council                1186\n",
      "Manningham City Council           1046\n",
      "Hobsons Bay City Council           942\n",
      "Kingston City Council              871\n",
      "Whittlesea City Council            828\n",
      "Wyndham City Council               624\n",
      "Whitehorse City Council            618\n",
      "Maroondah City Council             506\n",
      "Knox City Council                  371\n",
      "Greater Dandenong City Council     314\n",
      "Melton City Council                292\n",
      "Frankston City Council             290\n",
      "Casey City Council                 176\n",
      "Yarra Ranges Shire Council         102\n",
      "Nillumbik Shire Council             88\n",
      "Macedon Ranges Shire Council        46\n",
      "Cardinia Shire Council              41\n",
      "Mitchell Shire Council              20\n",
      "Moorabool Shire Council              7\n",
      "Name: CouncilArea, dtype: int64\n",
      " \n",
      "Lattitude\n",
      "-37.83610    25\n",
      "-37.84240    22\n",
      "-37.79560    20\n",
      "-37.81980    20\n",
      "-37.84140    18\n",
      "             ..\n",
      "-37.73953     1\n",
      "-37.59883     1\n",
      "-37.57355     1\n",
      "-37.91147     1\n",
      "-37.84346     1\n",
      "Name: Lattitude, Length: 13402, dtype: int64\n",
      " \n",
      "Longtitude\n",
      "144.99660    21\n",
      "144.98500    17\n",
      "144.99100    17\n",
      "145.01040    17\n",
      "145.02430    16\n",
      "             ..\n",
      "145.00502     1\n",
      "144.91973     1\n",
      "145.41470     1\n",
      "145.15528     1\n",
      "145.23032     1\n",
      "Name: Longtitude, Length: 14524, dtype: int64\n",
      " \n",
      "Regionname\n",
      "Southern Metropolitan         11836\n",
      "Northern Metropolitan          9557\n",
      "Western Metropolitan           6799\n",
      "Eastern Metropolitan           4377\n",
      "South-Eastern Metropolitan     1739\n",
      "Eastern Victoria                228\n",
      "Northern Victoria               203\n",
      "Western Victoria                115\n",
      "Name: Regionname, dtype: int64\n",
      " \n",
      "Propertycount\n",
      "21650.0    844\n",
      "8870.0     722\n",
      "10969.0    583\n",
      "14949.0    552\n",
      "10412.0    491\n",
      "          ... \n",
      "5462.0       1\n",
      "129.0        1\n",
      "335.0        1\n",
      "1240.0       1\n",
      "271.0        1\n",
      "Name: Propertycount, Length: 342, dtype: int64\n",
      " \n"
     ]
    }
   ],
   "source": [
    "cols = mel.columns\n",
    "for i in cols:\n",
    "    print(i)\n",
    "    print(mel[i].value_counts())\n",
    "    print(' ')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 34857 entries, 0 to 34856\n",
      "Data columns (total 21 columns):\n",
      "Suburb           34857 non-null object\n",
      "Address          34857 non-null object\n",
      "Rooms            34857 non-null int64\n",
      "Type             34857 non-null object\n",
      "Price            27247 non-null float64\n",
      "Method           34857 non-null object\n",
      "SellerG          34857 non-null object\n",
      "Date             34857 non-null object\n",
      "Distance         34856 non-null float64\n",
      "Postcode         34856 non-null float64\n",
      "Bedroom2         26640 non-null float64\n",
      "Bathroom         26631 non-null float64\n",
      "Car              26129 non-null float64\n",
      "Landsize         23047 non-null float64\n",
      "BuildingArea     13742 non-null float64\n",
      "YearBuilt        15551 non-null float64\n",
      "CouncilArea      34854 non-null object\n",
      "Lattitude        26881 non-null float64\n",
      "Longtitude       26881 non-null float64\n",
      "Regionname       34854 non-null object\n",
      "Propertycount    34854 non-null float64\n",
      "dtypes: float64(12), int64(1), object(8)\n",
      "memory usage: 5.6+ MB\n"
     ]
    }
   ],
   "source": [
    "mel.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Rooms</th>\n",
       "      <th>Price</th>\n",
       "      <th>Distance</th>\n",
       "      <th>Postcode</th>\n",
       "      <th>Bedroom2</th>\n",
       "      <th>Bathroom</th>\n",
       "      <th>Car</th>\n",
       "      <th>Landsize</th>\n",
       "      <th>BuildingArea</th>\n",
       "      <th>YearBuilt</th>\n",
       "      <th>Lattitude</th>\n",
       "      <th>Longtitude</th>\n",
       "      <th>Propertycount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>34857.000000</td>\n",
       "      <td>2.724700e+04</td>\n",
       "      <td>34856.000000</td>\n",
       "      <td>34856.000000</td>\n",
       "      <td>26640.000000</td>\n",
       "      <td>26631.000000</td>\n",
       "      <td>26129.000000</td>\n",
       "      <td>23047.000000</td>\n",
       "      <td>13742.00000</td>\n",
       "      <td>15551.000000</td>\n",
       "      <td>26881.000000</td>\n",
       "      <td>26881.000000</td>\n",
       "      <td>34854.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>mean</td>\n",
       "      <td>3.031012</td>\n",
       "      <td>1.050173e+06</td>\n",
       "      <td>11.184929</td>\n",
       "      <td>3116.062859</td>\n",
       "      <td>3.084647</td>\n",
       "      <td>1.624798</td>\n",
       "      <td>1.728845</td>\n",
       "      <td>593.598993</td>\n",
       "      <td>160.25640</td>\n",
       "      <td>1965.289885</td>\n",
       "      <td>-37.810634</td>\n",
       "      <td>145.001851</td>\n",
       "      <td>7572.888306</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>std</td>\n",
       "      <td>0.969933</td>\n",
       "      <td>6.414671e+05</td>\n",
       "      <td>6.788892</td>\n",
       "      <td>109.023903</td>\n",
       "      <td>0.980690</td>\n",
       "      <td>0.724212</td>\n",
       "      <td>1.010771</td>\n",
       "      <td>3398.841946</td>\n",
       "      <td>401.26706</td>\n",
       "      <td>37.328178</td>\n",
       "      <td>0.090279</td>\n",
       "      <td>0.120169</td>\n",
       "      <td>4428.090313</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>min</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>8.500000e+04</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3000.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>1196.000000</td>\n",
       "      <td>-38.190430</td>\n",
       "      <td>144.423790</td>\n",
       "      <td>83.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25%</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>6.350000e+05</td>\n",
       "      <td>6.400000</td>\n",
       "      <td>3051.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>224.000000</td>\n",
       "      <td>102.00000</td>\n",
       "      <td>1940.000000</td>\n",
       "      <td>-37.862950</td>\n",
       "      <td>144.933500</td>\n",
       "      <td>4385.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50%</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>8.700000e+05</td>\n",
       "      <td>10.300000</td>\n",
       "      <td>3103.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>521.000000</td>\n",
       "      <td>136.00000</td>\n",
       "      <td>1970.000000</td>\n",
       "      <td>-37.807600</td>\n",
       "      <td>145.007800</td>\n",
       "      <td>6763.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75%</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.295000e+06</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>3156.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>670.000000</td>\n",
       "      <td>188.00000</td>\n",
       "      <td>2000.000000</td>\n",
       "      <td>-37.754100</td>\n",
       "      <td>145.071900</td>\n",
       "      <td>10412.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>max</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>1.120000e+07</td>\n",
       "      <td>48.100000</td>\n",
       "      <td>3978.000000</td>\n",
       "      <td>30.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>26.000000</td>\n",
       "      <td>433014.000000</td>\n",
       "      <td>44515.00000</td>\n",
       "      <td>2106.000000</td>\n",
       "      <td>-37.390200</td>\n",
       "      <td>145.526350</td>\n",
       "      <td>21650.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Rooms         Price      Distance      Postcode      Bedroom2  \\\n",
       "count  34857.000000  2.724700e+04  34856.000000  34856.000000  26640.000000   \n",
       "mean       3.031012  1.050173e+06     11.184929   3116.062859      3.084647   \n",
       "std        0.969933  6.414671e+05      6.788892    109.023903      0.980690   \n",
       "min        1.000000  8.500000e+04      0.000000   3000.000000      0.000000   \n",
       "25%        2.000000  6.350000e+05      6.400000   3051.000000      2.000000   \n",
       "50%        3.000000  8.700000e+05     10.300000   3103.000000      3.000000   \n",
       "75%        4.000000  1.295000e+06     14.000000   3156.000000      4.000000   \n",
       "max       16.000000  1.120000e+07     48.100000   3978.000000     30.000000   \n",
       "\n",
       "           Bathroom           Car       Landsize  BuildingArea     YearBuilt  \\\n",
       "count  26631.000000  26129.000000   23047.000000   13742.00000  15551.000000   \n",
       "mean       1.624798      1.728845     593.598993     160.25640   1965.289885   \n",
       "std        0.724212      1.010771    3398.841946     401.26706     37.328178   \n",
       "min        0.000000      0.000000       0.000000       0.00000   1196.000000   \n",
       "25%        1.000000      1.000000     224.000000     102.00000   1940.000000   \n",
       "50%        2.000000      2.000000     521.000000     136.00000   1970.000000   \n",
       "75%        2.000000      2.000000     670.000000     188.00000   2000.000000   \n",
       "max       12.000000     26.000000  433014.000000   44515.00000   2106.000000   \n",
       "\n",
       "          Lattitude    Longtitude  Propertycount  \n",
       "count  26881.000000  26881.000000   34854.000000  \n",
       "mean     -37.810634    145.001851    7572.888306  \n",
       "std        0.090279      0.120169    4428.090313  \n",
       "min      -38.190430    144.423790      83.000000  \n",
       "25%      -37.862950    144.933500    4385.000000  \n",
       "50%      -37.807600    145.007800    6763.000000  \n",
       "75%      -37.754100    145.071900   10412.000000  \n",
       "max      -37.390200    145.526350   21650.000000  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mel.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Suburb</th>\n",
       "      <th>Address</th>\n",
       "      <th>Type</th>\n",
       "      <th>Method</th>\n",
       "      <th>SellerG</th>\n",
       "      <th>Date</th>\n",
       "      <th>CouncilArea</th>\n",
       "      <th>Regionname</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>34857</td>\n",
       "      <td>34857</td>\n",
       "      <td>34857</td>\n",
       "      <td>34857</td>\n",
       "      <td>34857</td>\n",
       "      <td>34857</td>\n",
       "      <td>34854</td>\n",
       "      <td>34854</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>unique</td>\n",
       "      <td>351</td>\n",
       "      <td>34009</td>\n",
       "      <td>3</td>\n",
       "      <td>9</td>\n",
       "      <td>388</td>\n",
       "      <td>78</td>\n",
       "      <td>33</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>top</td>\n",
       "      <td>Reservoir</td>\n",
       "      <td>5 Charles St</td>\n",
       "      <td>h</td>\n",
       "      <td>S</td>\n",
       "      <td>Jellis</td>\n",
       "      <td>28/10/2017</td>\n",
       "      <td>Boroondara City Council</td>\n",
       "      <td>Southern Metropolitan</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>freq</td>\n",
       "      <td>844</td>\n",
       "      <td>6</td>\n",
       "      <td>23980</td>\n",
       "      <td>19744</td>\n",
       "      <td>3359</td>\n",
       "      <td>1119</td>\n",
       "      <td>3675</td>\n",
       "      <td>11836</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Suburb       Address   Type Method SellerG        Date  \\\n",
       "count       34857         34857  34857  34857   34857       34857   \n",
       "unique        351         34009      3      9     388          78   \n",
       "top     Reservoir  5 Charles St      h      S  Jellis  28/10/2017   \n",
       "freq          844             6  23980  19744    3359        1119   \n",
       "\n",
       "                    CouncilArea             Regionname  \n",
       "count                     34854                  34854  \n",
       "unique                       33                      8  \n",
       "top     Boroondara City Council  Southern Metropolitan  \n",
       "freq                       3675                  11836  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mel.describe(include=['O'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Text(0, 0, '1'),\n",
       " Text(0, 0, '2'),\n",
       " Text(0, 0, '3'),\n",
       " Text(0, 0, '4'),\n",
       " Text(0, 0, '5'),\n",
       " Text(0, 0, '6'),\n",
       " Text(0, 0, '7'),\n",
       " Text(0, 0, '8'),\n",
       " Text(0, 0, '9'),\n",
       " Text(0, 0, '10'),\n",
       " Text(0, 0, '12'),\n",
       " Text(0, 0, '16')]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1aadfdb0788>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot\n",
    "%matplotlib inline\n",
    "count_plt = sns.countplot(x=\"Rooms\",data=mel, palette = \"Set1\")\n",
    "count_plt.set_xticklabels(count_plt.get_xticklabels(), rotation=90, ha=\"right\")\n",
    "count_plt "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Text(0, 0, '3000.0'),\n",
       " Text(0, 0, '3002.0'),\n",
       " Text(0, 0, '3003.0'),\n",
       " Text(0, 0, '3006.0'),\n",
       " Text(0, 0, '3008.0'),\n",
       " Text(0, 0, '3011.0'),\n",
       " Text(0, 0, '3012.0'),\n",
       " Text(0, 0, '3013.0'),\n",
       " Text(0, 0, '3015.0'),\n",
       " Text(0, 0, '3016.0'),\n",
       " Text(0, 0, '3018.0'),\n",
       " Text(0, 0, '3019.0'),\n",
       " Text(0, 0, '3020.0'),\n",
       " Text(0, 0, '3021.0'),\n",
       " Text(0, 0, '3022.0'),\n",
       " Text(0, 0, '3023.0'),\n",
       " Text(0, 0, '3024.0'),\n",
       " Text(0, 0, '3025.0'),\n",
       " Text(0, 0, '3027.0'),\n",
       " Text(0, 0, '3028.0'),\n",
       " Text(0, 0, '3029.0'),\n",
       " Text(0, 0, '3030.0'),\n",
       " Text(0, 0, '3031.0'),\n",
       " Text(0, 0, '3032.0'),\n",
       " Text(0, 0, '3033.0'),\n",
       " Text(0, 0, '3034.0'),\n",
       " Text(0, 0, '3036.0'),\n",
       " Text(0, 0, '3037.0'),\n",
       " Text(0, 0, '3038.0'),\n",
       " Text(0, 0, '3039.0'),\n",
       " Text(0, 0, '3040.0'),\n",
       " Text(0, 0, '3041.0'),\n",
       " Text(0, 0, '3042.0'),\n",
       " Text(0, 0, '3043.0'),\n",
       " Text(0, 0, '3044.0'),\n",
       " Text(0, 0, '3046.0'),\n",
       " Text(0, 0, '3047.0'),\n",
       " Text(0, 0, '3048.0'),\n",
       " Text(0, 0, '3049.0'),\n",
       " Text(0, 0, '3051.0'),\n",
       " Text(0, 0, '3052.0'),\n",
       " Text(0, 0, '3053.0'),\n",
       " Text(0, 0, '3054.0'),\n",
       " Text(0, 0, '3055.0'),\n",
       " Text(0, 0, '3056.0'),\n",
       " Text(0, 0, '3057.0'),\n",
       " Text(0, 0, '3058.0'),\n",
       " Text(0, 0, '3059.0'),\n",
       " Text(0, 0, '3060.0'),\n",
       " Text(0, 0, '3061.0'),\n",
       " Text(0, 0, '3064.0'),\n",
       " Text(0, 0, '3065.0'),\n",
       " Text(0, 0, '3066.0'),\n",
       " Text(0, 0, '3067.0'),\n",
       " Text(0, 0, '3068.0'),\n",
       " Text(0, 0, '3070.0'),\n",
       " Text(0, 0, '3071.0'),\n",
       " Text(0, 0, '3072.0'),\n",
       " Text(0, 0, '3073.0'),\n",
       " Text(0, 0, '3074.0'),\n",
       " Text(0, 0, '3075.0'),\n",
       " Text(0, 0, '3076.0'),\n",
       " Text(0, 0, '3078.0'),\n",
       " Text(0, 0, '3079.0'),\n",
       " Text(0, 0, '3081.0'),\n",
       " Text(0, 0, '3082.0'),\n",
       " Text(0, 0, '3083.0'),\n",
       " Text(0, 0, '3084.0'),\n",
       " Text(0, 0, '3085.0'),\n",
       " Text(0, 0, '3087.0'),\n",
       " Text(0, 0, '3088.0'),\n",
       " Text(0, 0, '3089.0'),\n",
       " Text(0, 0, '3090.0'),\n",
       " Text(0, 0, '3093.0'),\n",
       " Text(0, 0, '3094.0'),\n",
       " Text(0, 0, '3095.0'),\n",
       " Text(0, 0, '3096.0'),\n",
       " Text(0, 0, '3099.0'),\n",
       " Text(0, 0, '3101.0'),\n",
       " Text(0, 0, '3102.0'),\n",
       " Text(0, 0, '3103.0'),\n",
       " Text(0, 0, '3104.0'),\n",
       " Text(0, 0, '3105.0'),\n",
       " Text(0, 0, '3106.0'),\n",
       " Text(0, 0, '3107.0'),\n",
       " Text(0, 0, '3108.0'),\n",
       " Text(0, 0, '3109.0'),\n",
       " Text(0, 0, '3111.0'),\n",
       " Text(0, 0, '3113.0'),\n",
       " Text(0, 0, '3115.0'),\n",
       " Text(0, 0, '3116.0'),\n",
       " Text(0, 0, '3121.0'),\n",
       " Text(0, 0, '3122.0'),\n",
       " Text(0, 0, '3123.0'),\n",
       " Text(0, 0, '3124.0'),\n",
       " Text(0, 0, '3125.0'),\n",
       " Text(0, 0, '3126.0'),\n",
       " Text(0, 0, '3127.0'),\n",
       " Text(0, 0, '3128.0'),\n",
       " Text(0, 0, '3130.0'),\n",
       " Text(0, 0, '3131.0'),\n",
       " Text(0, 0, '3132.0'),\n",
       " Text(0, 0, '3133.0'),\n",
       " Text(0, 0, '3134.0'),\n",
       " Text(0, 0, '3135.0'),\n",
       " Text(0, 0, '3136.0'),\n",
       " Text(0, 0, '3137.0'),\n",
       " Text(0, 0, '3138.0'),\n",
       " Text(0, 0, '3139.0'),\n",
       " Text(0, 0, '3140.0'),\n",
       " Text(0, 0, '3141.0'),\n",
       " Text(0, 0, '3142.0'),\n",
       " Text(0, 0, '3143.0'),\n",
       " Text(0, 0, '3144.0'),\n",
       " Text(0, 0, '3145.0'),\n",
       " Text(0, 0, '3146.0'),\n",
       " Text(0, 0, '3147.0'),\n",
       " Text(0, 0, '3148.0'),\n",
       " Text(0, 0, '3149.0'),\n",
       " Text(0, 0, '3150.0'),\n",
       " Text(0, 0, '3151.0'),\n",
       " Text(0, 0, '3152.0'),\n",
       " Text(0, 0, '3153.0'),\n",
       " Text(0, 0, '3154.0'),\n",
       " Text(0, 0, '3155.0'),\n",
       " Text(0, 0, '3156.0'),\n",
       " Text(0, 0, '3158.0'),\n",
       " Text(0, 0, '3159.0'),\n",
       " Text(0, 0, '3160.0'),\n",
       " Text(0, 0, '3161.0'),\n",
       " Text(0, 0, '3162.0'),\n",
       " Text(0, 0, '3163.0'),\n",
       " Text(0, 0, '3165.0'),\n",
       " Text(0, 0, '3166.0'),\n",
       " Text(0, 0, '3167.0'),\n",
       " Text(0, 0, '3168.0'),\n",
       " Text(0, 0, '3169.0'),\n",
       " Text(0, 0, '3170.0'),\n",
       " Text(0, 0, '3171.0'),\n",
       " Text(0, 0, '3172.0'),\n",
       " Text(0, 0, '3173.0'),\n",
       " Text(0, 0, '3174.0'),\n",
       " Text(0, 0, '3175.0'),\n",
       " Text(0, 0, '3177.0'),\n",
       " Text(0, 0, '3178.0'),\n",
       " Text(0, 0, '3179.0'),\n",
       " Text(0, 0, '3180.0'),\n",
       " Text(0, 0, '3181.0'),\n",
       " Text(0, 0, '3182.0'),\n",
       " Text(0, 0, '3183.0'),\n",
       " Text(0, 0, '3184.0'),\n",
       " Text(0, 0, '3185.0'),\n",
       " Text(0, 0, '3186.0'),\n",
       " Text(0, 0, '3187.0'),\n",
       " Text(0, 0, '3188.0'),\n",
       " Text(0, 0, '3189.0'),\n",
       " Text(0, 0, '3190.0'),\n",
       " Text(0, 0, '3191.0'),\n",
       " Text(0, 0, '3192.0'),\n",
       " Text(0, 0, '3193.0'),\n",
       " Text(0, 0, '3194.0'),\n",
       " Text(0, 0, '3195.0'),\n",
       " Text(0, 0, '3196.0'),\n",
       " Text(0, 0, '3197.0'),\n",
       " Text(0, 0, '3198.0'),\n",
       " Text(0, 0, '3199.0'),\n",
       " Text(0, 0, '3200.0'),\n",
       " Text(0, 0, '3201.0'),\n",
       " Text(0, 0, '3202.0'),\n",
       " Text(0, 0, '3204.0'),\n",
       " Text(0, 0, '3205.0'),\n",
       " Text(0, 0, '3206.0'),\n",
       " Text(0, 0, '3207.0'),\n",
       " Text(0, 0, '3335.0'),\n",
       " Text(0, 0, '3337.0'),\n",
       " Text(0, 0, '3338.0'),\n",
       " Text(0, 0, '3340.0'),\n",
       " Text(0, 0, '3427.0'),\n",
       " Text(0, 0, '3428.0'),\n",
       " Text(0, 0, '3429.0'),\n",
       " Text(0, 0, '3431.0'),\n",
       " Text(0, 0, '3437.0'),\n",
       " Text(0, 0, '3438.0'),\n",
       " Text(0, 0, '3750.0'),\n",
       " Text(0, 0, '3752.0'),\n",
       " Text(0, 0, '3754.0'),\n",
       " Text(0, 0, '3756.0'),\n",
       " Text(0, 0, '3757.0'),\n",
       " Text(0, 0, '3765.0'),\n",
       " Text(0, 0, '3770.0'),\n",
       " Text(0, 0, '3775.0'),\n",
       " Text(0, 0, '3777.0'),\n",
       " Text(0, 0, '3782.0'),\n",
       " Text(0, 0, '3786.0'),\n",
       " Text(0, 0, '3788.0'),\n",
       " Text(0, 0, '3793.0'),\n",
       " Text(0, 0, '3795.0'),\n",
       " Text(0, 0, '3796.0'),\n",
       " Text(0, 0, '3802.0'),\n",
       " Text(0, 0, '3803.0'),\n",
       " Text(0, 0, '3805.0'),\n",
       " Text(0, 0, '3806.0'),\n",
       " Text(0, 0, '3807.0'),\n",
       " Text(0, 0, '3808.0'),\n",
       " Text(0, 0, '3809.0'),\n",
       " Text(0, 0, '3810.0'),\n",
       " Text(0, 0, '3910.0'),\n",
       " Text(0, 0, '3975.0'),\n",
       " Text(0, 0, '3976.0'),\n",
       " Text(0, 0, '3977.0'),\n",
       " Text(0, 0, '3978.0')]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1aadfb67c48>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "count_plt = sns.countplot(x=\"Postcode\",data=mel, palette = \"Set1\")\n",
    "count_plt.set_xticklabels(count_plt.get_xticklabels(), rotation=90, ha=\"right\")\n",
    "count_plt "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Text(0, 0, '0.0'),\n",
       " Text(0, 0, '1.0'),\n",
       " Text(0, 0, '2.0'),\n",
       " Text(0, 0, '3.0'),\n",
       " Text(0, 0, '4.0'),\n",
       " Text(0, 0, '5.0'),\n",
       " Text(0, 0, '6.0'),\n",
       " Text(0, 0, '7.0'),\n",
       " Text(0, 0, '8.0'),\n",
       " Text(0, 0, '9.0'),\n",
       " Text(0, 0, '10.0'),\n",
       " Text(0, 0, '12.0'),\n",
       " Text(0, 0, '16.0'),\n",
       " Text(0, 0, '20.0'),\n",
       " Text(0, 0, '30.0')]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1aae2194548>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "count_plt = sns.countplot(x=\"Bedroom2\",data=mel, palette = \"Set1\")\n",
    "count_plt.set_xticklabels(count_plt.get_xticklabels(), rotation=90, ha=\"right\")\n",
    "count_plt "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Text(0, 0, '0.0'),\n",
       " Text(0, 0, '1.0'),\n",
       " Text(0, 0, '2.0'),\n",
       " Text(0, 0, '3.0'),\n",
       " Text(0, 0, '4.0'),\n",
       " Text(0, 0, '5.0'),\n",
       " Text(0, 0, '6.0'),\n",
       " Text(0, 0, '7.0'),\n",
       " Text(0, 0, '8.0'),\n",
       " Text(0, 0, '9.0'),\n",
       " Text(0, 0, '12.0')]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1aae31d3a88>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "count_plt = sns.countplot(x=\"Bathroom\",data=mel, palette = \"Set1\")\n",
    "count_plt.set_xticklabels(count_plt.get_xticklabels(), rotation=90, ha=\"right\")\n",
    "count_plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Text(0, 0, '0.0'),\n",
       " Text(0, 0, '1.0'),\n",
       " Text(0, 0, '2.0'),\n",
       " Text(0, 0, '3.0'),\n",
       " Text(0, 0, '4.0'),\n",
       " Text(0, 0, '5.0'),\n",
       " Text(0, 0, '6.0'),\n",
       " Text(0, 0, '7.0'),\n",
       " Text(0, 0, '8.0'),\n",
       " Text(0, 0, '9.0'),\n",
       " Text(0, 0, '10.0'),\n",
       " Text(0, 0, '11.0'),\n",
       " Text(0, 0, '12.0'),\n",
       " Text(0, 0, '18.0'),\n",
       " Text(0, 0, '26.0')]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1aae3262348>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "count_plt = sns.countplot(x=\"Car\",data=mel, palette = \"Set1\")\n",
    "count_plt.set_xticklabels(count_plt.get_xticklabels(), rotation=90, ha=\"right\")\n",
    "count_plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Text(0, 0, 'SS'),\n",
       " Text(0, 0, 'S'),\n",
       " Text(0, 0, 'VB'),\n",
       " Text(0, 0, 'SP'),\n",
       " Text(0, 0, 'PI'),\n",
       " Text(0, 0, 'SN'),\n",
       " Text(0, 0, 'W'),\n",
       " Text(0, 0, 'PN'),\n",
       " Text(0, 0, 'SA')]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1aae3305288>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "count_plt = sns.countplot(x=\"Method\",data=mel, palette = \"Set1\")\n",
    "count_plt.set_xticklabels(count_plt.get_xticklabels(), rotation=90, ha=\"right\")\n",
    "count_plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# columns       missing data\n",
    "#BuildingArea      21115\n",
    "#YearBuilt         19306\n",
    "#as more than 50% of data in the column is missing we will drop these two rows\n",
    "mel = mel.drop(['YearBuilt','BuildingArea'],axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Suburb', 'Address', 'Rooms', 'Type', 'Price', 'Method', 'SellerG',\n",
       "       'Date', 'Distance', 'Postcode', 'Bedroom2', 'Bathroom', 'Car',\n",
       "       'Landsize', 'CouncilArea', 'Lattitude', 'Longtitude', 'Regionname',\n",
       "       'Propertycount'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mel.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1aae33a0908>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "mel[(mel[\"Rooms\"]>2) & (mel[\"Type\"] == \"h\")& (mel[\"Landsize\"] <5000)][[\"Landsize\",\"Distance\"]].dropna().groupby(\"Distance\").mean().plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1aae3901988>"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#ushing heat map to visualize the correlation between attributes\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(10,10)) \n",
    "sns.heatmap(mel[mel[\"Type\"] == \"h\"].corr(), annot=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "#mel['Date'] =  pd.to_datetime( mel['Date'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1aae3d1f848>"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "## visualizing missing values\n",
    "fig, ax = plt.subplots(figsize=(15,10))\n",
    "sns.heatmap(mel.isnull(), yticklabels=False,cmap='viridis')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>b diff r</th>\n",
       "      <th>Bedroom2</th>\n",
       "      <th>Rooms</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   b diff r  Bedroom2  Rooms\n",
       "0       0.0       2.0      2\n",
       "1       0.0       2.0      2\n",
       "2       0.0       2.0      2\n",
       "3       0.0       3.0      3\n",
       "4       0.0       3.0      3"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# here we will verify if bedrooms2 and rooms indicate the same value or a different values\n",
    "mel['b diff r'] = mel[\"Bedroom2\"] - mel[\"Rooms\"]\n",
    "mel[['b diff r', 'Bedroom2', 'Rooms']].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       " 0.0     25692\n",
       "-1.0       569\n",
       " 1.0       248\n",
       "-2.0        77\n",
       " 2.0        23\n",
       "-3.0        18\n",
       "-4.0         4\n",
       " 6.0         2\n",
       " 3.0         2\n",
       " 7.0         1\n",
       " 17.0        1\n",
       " 27.0        1\n",
       " 5.0         1\n",
       "-8.0         1\n",
       "Name: b diff r, dtype: int64"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mel['b diff r'].value_counts()\n",
    "# in majority of cases the rooms and bedrooms are the same thing, so we remove one of the attribute to make the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#removing the latitude and logitude as the parameters shall not be involved in predicitng the house price\n",
    "#removing the bedrooms as the \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "mel = mel.drop(['Lattitude','Longtitude','b diff r'], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Suburb', 'Address', 'Rooms', 'Type', 'Price', 'Method', 'SellerG',\n",
       "       'Date', 'Distance', 'Postcode', 'Bedroom2', 'Bathroom', 'Car',\n",
       "       'Landsize', 'CouncilArea', 'Regionname', 'Propertycount'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mel.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1aae3843448>"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(mel['Car'].dropna())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1aae348d048>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(mel['Price'].dropna())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1aae357bbc8>"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(mel['Bedroom2'].dropna())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1aae3adb548>"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(mel['Bathroom'].dropna())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1aae3ad2bc8>"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(mel['Landsize'].dropna())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0       2437\n",
       "650.0      204\n",
       "697.0      123\n",
       "585.0       97\n",
       "700.0       86\n",
       "          ... \n",
       "38.0         1\n",
       "1633.0       1\n",
       "1856.0       1\n",
       "1957.0       1\n",
       "1543.0       1\n",
       "Name: Landsize, Length: 1684, dtype: int64"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mel['Landsize'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "#land size cannot be zero and have other values, so repalce the missing values and zeroes with mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "mel[\"Car\"] = mel['Car'].transform(lambda x: x.fillna(x.mean()))\n",
    "mel['Price'] = mel['Price'].transform(lambda x: x.fillna(x.mean()))\n",
    "mel['Bedroom2'] = mel['Bedroom2'].transform(lambda x: x.fillna(x.mean()))\n",
    "mel['Bathroom'] = mel['Bathroom'].transform(lambda x: x.fillna(x.mean()))\n",
    "mel['Landsize'] = mel['Landsize'].transform(lambda x: x.fillna(x.mean()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Suburb           0\n",
       "Address          0\n",
       "Rooms            0\n",
       "Type             0\n",
       "Price            0\n",
       "Method           0\n",
       "SellerG          0\n",
       "Date             0\n",
       "Distance         1\n",
       "Postcode         1\n",
       "Bedroom2         0\n",
       "Bathroom         0\n",
       "Car              0\n",
       "Landsize         0\n",
       "CouncilArea      3\n",
       "Regionname       3\n",
       "Propertycount    3\n",
       "dtype: int64"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mel.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "# very few  missing values are remaining, it is less than .5% so we can drop those\n",
    "mel = mel.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0         3/09/2016\n",
       "1         3/12/2016\n",
       "2         4/02/2016\n",
       "3         4/02/2016\n",
       "4         4/03/2017\n",
       "            ...    \n",
       "34852    24/02/2018\n",
       "34853    24/02/2018\n",
       "34854    24/02/2018\n",
       "34855    24/02/2018\n",
       "34856    24/02/2018\n",
       "Name: Date, Length: 34854, dtype: object"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mel['Date']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "import datetime\n",
    "\n",
    "mel['Year'] = pd.DatetimeIndex(mel['Date']).year\n",
    "mel['Month'] = pd.DatetimeIndex(mel['Date']).month"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "mel = mel.drop(['Date'],axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3     4507\n",
       "10    4340\n",
       "9     3773\n",
       "11    3699\n",
       "7     3365\n",
       "8     3350\n",
       "6     3322\n",
       "5     2761\n",
       "4     2116\n",
       "2     2008\n",
       "12    1097\n",
       "1      516\n",
       "Name: Month, dtype: int64"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mel.Month.value_counts()\n",
    "# in the first month of a year there would be less sales"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2017    19850\n",
       "2016    10292\n",
       "2018     4712\n",
       "Name: Year, dtype: int64"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mel.Year.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "#convert catergorical tpo numerical \n",
    "# Label encoder order is alphabetical\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "le_x = LabelEncoder()\n",
    "mel['Type']   = le_x.fit_transform(mel['Type']) \n",
    "mel['Method']= le_x.fit_transform(mel['Method']) \n",
    "mel['Regionname']= le_x.fit_transform(mel['Regionname'])\n",
    "mel['Year']= le_x.fit_transform(mel['Year'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Suburb</th>\n",
       "      <th>Address</th>\n",
       "      <th>Rooms</th>\n",
       "      <th>Type</th>\n",
       "      <th>Price</th>\n",
       "      <th>Method</th>\n",
       "      <th>SellerG</th>\n",
       "      <th>Distance</th>\n",
       "      <th>Postcode</th>\n",
       "      <th>Bedroom2</th>\n",
       "      <th>Bathroom</th>\n",
       "      <th>Car</th>\n",
       "      <th>Landsize</th>\n",
       "      <th>CouncilArea</th>\n",
       "      <th>Regionname</th>\n",
       "      <th>Propertycount</th>\n",
       "      <th>Year</th>\n",
       "      <th>Month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Abbotsford</td>\n",
       "      <td>68 Studley St</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1.050173e+06</td>\n",
       "      <td>6</td>\n",
       "      <td>Jellis</td>\n",
       "      <td>2.5</td>\n",
       "      <td>3067.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>126.000000</td>\n",
       "      <td>Yarra City Council</td>\n",
       "      <td>2</td>\n",
       "      <td>4019.0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Abbotsford</td>\n",
       "      <td>85 Turner St</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1.480000e+06</td>\n",
       "      <td>2</td>\n",
       "      <td>Biggin</td>\n",
       "      <td>2.5</td>\n",
       "      <td>3067.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>202.000000</td>\n",
       "      <td>Yarra City Council</td>\n",
       "      <td>2</td>\n",
       "      <td>4019.0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Abbotsford</td>\n",
       "      <td>25 Bloomburg St</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1.035000e+06</td>\n",
       "      <td>2</td>\n",
       "      <td>Biggin</td>\n",
       "      <td>2.5</td>\n",
       "      <td>3067.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>156.000000</td>\n",
       "      <td>Yarra City Council</td>\n",
       "      <td>2</td>\n",
       "      <td>4019.0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Abbotsford</td>\n",
       "      <td>18/659 Victoria St</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>1.050173e+06</td>\n",
       "      <td>7</td>\n",
       "      <td>Rounds</td>\n",
       "      <td>2.5</td>\n",
       "      <td>3067.0</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Yarra City Council</td>\n",
       "      <td>2</td>\n",
       "      <td>4019.0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Abbotsford</td>\n",
       "      <td>5 Charles St</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1.465000e+06</td>\n",
       "      <td>5</td>\n",
       "      <td>Biggin</td>\n",
       "      <td>2.5</td>\n",
       "      <td>3067.0</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>134.000000</td>\n",
       "      <td>Yarra City Council</td>\n",
       "      <td>2</td>\n",
       "      <td>4019.0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>34852</td>\n",
       "      <td>Yarraville</td>\n",
       "      <td>13 Burns St</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>1.480000e+06</td>\n",
       "      <td>0</td>\n",
       "      <td>Jas</td>\n",
       "      <td>6.3</td>\n",
       "      <td>3013.0</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>593.000000</td>\n",
       "      <td>Maribyrnong City Council</td>\n",
       "      <td>6</td>\n",
       "      <td>6543.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>34853</td>\n",
       "      <td>Yarraville</td>\n",
       "      <td>29A Murray St</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>8.880000e+05</td>\n",
       "      <td>5</td>\n",
       "      <td>Sweeney</td>\n",
       "      <td>6.3</td>\n",
       "      <td>3013.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>98.000000</td>\n",
       "      <td>Maribyrnong City Council</td>\n",
       "      <td>6</td>\n",
       "      <td>6543.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>34854</td>\n",
       "      <td>Yarraville</td>\n",
       "      <td>147A Severn St</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>7.050000e+05</td>\n",
       "      <td>2</td>\n",
       "      <td>Jas</td>\n",
       "      <td>6.3</td>\n",
       "      <td>3013.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>220.000000</td>\n",
       "      <td>Maribyrnong City Council</td>\n",
       "      <td>6</td>\n",
       "      <td>6543.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>34855</td>\n",
       "      <td>Yarraville</td>\n",
       "      <td>12/37 Stephen St</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1.140000e+06</td>\n",
       "      <td>5</td>\n",
       "      <td>hockingstuart</td>\n",
       "      <td>6.3</td>\n",
       "      <td>3013.0</td>\n",
       "      <td>3.084647</td>\n",
       "      <td>1.624798</td>\n",
       "      <td>1.728845</td>\n",
       "      <td>593.598993</td>\n",
       "      <td>Maribyrnong City Council</td>\n",
       "      <td>6</td>\n",
       "      <td>6543.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>34856</td>\n",
       "      <td>Yarraville</td>\n",
       "      <td>3 Tarrengower St</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1.020000e+06</td>\n",
       "      <td>0</td>\n",
       "      <td>RW</td>\n",
       "      <td>6.3</td>\n",
       "      <td>3013.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>250.000000</td>\n",
       "      <td>Maribyrnong City Council</td>\n",
       "      <td>6</td>\n",
       "      <td>6543.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>34854 rows × 18 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           Suburb             Address  Rooms  Type         Price  Method  \\\n",
       "0      Abbotsford       68 Studley St      2     0  1.050173e+06       6   \n",
       "1      Abbotsford        85 Turner St      2     0  1.480000e+06       2   \n",
       "2      Abbotsford     25 Bloomburg St      2     0  1.035000e+06       2   \n",
       "3      Abbotsford  18/659 Victoria St      3     2  1.050173e+06       7   \n",
       "4      Abbotsford        5 Charles St      3     0  1.465000e+06       5   \n",
       "...           ...                 ...    ...   ...           ...     ...   \n",
       "34852  Yarraville         13 Burns St      4     0  1.480000e+06       0   \n",
       "34853  Yarraville       29A Murray St      2     0  8.880000e+05       5   \n",
       "34854  Yarraville      147A Severn St      2     1  7.050000e+05       2   \n",
       "34855  Yarraville    12/37 Stephen St      3     0  1.140000e+06       5   \n",
       "34856  Yarraville    3 Tarrengower St      2     0  1.020000e+06       0   \n",
       "\n",
       "             SellerG  Distance  Postcode  Bedroom2  Bathroom       Car  \\\n",
       "0             Jellis       2.5    3067.0  2.000000  1.000000  1.000000   \n",
       "1             Biggin       2.5    3067.0  2.000000  1.000000  1.000000   \n",
       "2             Biggin       2.5    3067.0  2.000000  1.000000  0.000000   \n",
       "3             Rounds       2.5    3067.0  3.000000  2.000000  1.000000   \n",
       "4             Biggin       2.5    3067.0  3.000000  2.000000  0.000000   \n",
       "...              ...       ...       ...       ...       ...       ...   \n",
       "34852            Jas       6.3    3013.0  4.000000  1.000000  3.000000   \n",
       "34853        Sweeney       6.3    3013.0  2.000000  2.000000  1.000000   \n",
       "34854            Jas       6.3    3013.0  2.000000  1.000000  2.000000   \n",
       "34855  hockingstuart       6.3    3013.0  3.084647  1.624798  1.728845   \n",
       "34856             RW       6.3    3013.0  2.000000  1.000000  0.000000   \n",
       "\n",
       "         Landsize               CouncilArea  Regionname  Propertycount  Year  \\\n",
       "0      126.000000        Yarra City Council           2         4019.0     0   \n",
       "1      202.000000        Yarra City Council           2         4019.0     0   \n",
       "2      156.000000        Yarra City Council           2         4019.0     0   \n",
       "3        0.000000        Yarra City Council           2         4019.0     0   \n",
       "4      134.000000        Yarra City Council           2         4019.0     1   \n",
       "...           ...                       ...         ...            ...   ...   \n",
       "34852  593.000000  Maribyrnong City Council           6         6543.0     2   \n",
       "34853   98.000000  Maribyrnong City Council           6         6543.0     2   \n",
       "34854  220.000000  Maribyrnong City Council           6         6543.0     2   \n",
       "34855  593.598993  Maribyrnong City Council           6         6543.0     2   \n",
       "34856  250.000000  Maribyrnong City Council           6         6543.0     2   \n",
       "\n",
       "       Month  \n",
       "0          3  \n",
       "1          3  \n",
       "2          4  \n",
       "3          4  \n",
       "4          4  \n",
       "...      ...  \n",
       "34852      2  \n",
       "34853      2  \n",
       "34854      2  \n",
       "34855      2  \n",
       "34856      2  \n",
       "\n",
       "[34854 rows x 18 columns]"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Rooms</th>\n",
       "      <th>Type</th>\n",
       "      <th>Method</th>\n",
       "      <th>Distance</th>\n",
       "      <th>Bedroom2</th>\n",
       "      <th>Bathroom</th>\n",
       "      <th>Car</th>\n",
       "      <th>Landsize</th>\n",
       "      <th>Regionname</th>\n",
       "      <th>Year</th>\n",
       "      <th>Month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>2.5</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>126.000000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2.5</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>202.000000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2.5</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>156.000000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>7</td>\n",
       "      <td>2.5</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>2.5</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>134.000000</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>34852</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6.3</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>593.000000</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>34853</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>6.3</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>98.000000</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>34854</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>6.3</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>220.000000</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>34855</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>6.3</td>\n",
       "      <td>3.084647</td>\n",
       "      <td>1.624798</td>\n",
       "      <td>1.728845</td>\n",
       "      <td>593.598993</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>34856</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6.3</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>250.000000</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>34854 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Rooms  Type  Method  Distance  Bedroom2  Bathroom       Car  \\\n",
       "0          2     0       6       2.5  2.000000  1.000000  1.000000   \n",
       "1          2     0       2       2.5  2.000000  1.000000  1.000000   \n",
       "2          2     0       2       2.5  2.000000  1.000000  0.000000   \n",
       "3          3     2       7       2.5  3.000000  2.000000  1.000000   \n",
       "4          3     0       5       2.5  3.000000  2.000000  0.000000   \n",
       "...      ...   ...     ...       ...       ...       ...       ...   \n",
       "34852      4     0       0       6.3  4.000000  1.000000  3.000000   \n",
       "34853      2     0       5       6.3  2.000000  2.000000  1.000000   \n",
       "34854      2     1       2       6.3  2.000000  1.000000  2.000000   \n",
       "34855      3     0       5       6.3  3.084647  1.624798  1.728845   \n",
       "34856      2     0       0       6.3  2.000000  1.000000  0.000000   \n",
       "\n",
       "         Landsize  Regionname  Year  Month  \n",
       "0      126.000000           2     0      3  \n",
       "1      202.000000           2     0      3  \n",
       "2      156.000000           2     0      4  \n",
       "3        0.000000           2     0      4  \n",
       "4      134.000000           2     1      4  \n",
       "...           ...         ...   ...    ...  \n",
       "34852  593.000000           6     2      2  \n",
       "34853   98.000000           6     2      2  \n",
       "34854  220.000000           6     2      2  \n",
       "34855  593.598993           6     2      2  \n",
       "34856  250.000000           6     2      2  \n",
       "\n",
       "[34854 rows x 11 columns]"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mel_x = mel.drop(['Suburb','Address','SellerG','Postcode','CouncilArea','Propertycount','Price'],axis =1)\n",
    "mel_x\n",
    "# columns considered for analysis as "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "y = mel['Price']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Modelling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "#standardisation\n",
    "sc = StandardScaler()\n",
    "mel_sc = sc.fit_transform(mel_x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(mel_sc, y, random_state = 10, test_size = 0.25)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Regression tasks:\n",
    "\n",
    "### KNN regressor:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "import sklearn.model_selection as ms\n",
    "from sklearn.model_selection import KFold \n",
    "from sklearn.model_selection import cross_val_score, cross_val_predict,cross_validate\n",
    "from sklearn import metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',\n",
       "                    metric_params=None, n_jobs=None, n_neighbors=5, p=2,\n",
       "                    weights='uniform')"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn = KNeighborsRegressor()\n",
    "knn.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "grid_params = {'n_neighbors' : [3, 5, 11, 15], 'weights': ['uniform', 'distance'], 'metric': ['euclidean', 'manhattan']}\n",
    "\n",
    "gs = GridSearchCV(knn, grid_params, verbose = 1, cv = 3, n_jobs = -1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 3 folds for each of 16 candidates, totalling 48 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 12 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done  48 out of  48 | elapsed:   25.3s finished\n"
     ]
    }
   ],
   "source": [
    "gs_fit = gs.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "KNN train score:  0.5043230957941527\n",
      "KNN test score:  0.4045355135372377\n",
      "Best score :  0.4229730875477869\n",
      "Best estimator:  KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='manhattan',\n",
      "                    metric_params=None, n_jobs=None, n_neighbors=15, p=2,\n",
      "                    weights='uniform')\n",
      "Best parameters:  {'metric': 'manhattan', 'n_neighbors': 15, 'weights': 'uniform'}\n"
     ]
    }
   ],
   "source": [
    "print(\"KNN train score: \",gs.score(X_train, y_train))\n",
    "print(\"KNN test score: \",gs.score(X_test, y_test))\n",
    "#print(\"R-Squared: \", r2_score(y_test,y_pred))\n",
    "print(\"Best score : \", gs_fit.best_score_)\n",
    "print(\"Best estimator: \",gs_fit.best_estimator_)\n",
    "print(\"Best parameters: \",gs_fit.best_params_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='manhattan',\n",
       "                    metric_params=None, n_jobs=None, n_neighbors=15, p=2,\n",
       "                    weights='uniform')"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "KNN scores:  {'fit_time': array([7.95340538e-03, 7.96055794e-03, 8.08382034e-03, 9.53674316e-05,\n",
      "       1.60484314e-02]), 'score_time': array([0.16381931, 0.14936304, 0.1393826 , 0.14725685, 0.13977766]), 'test_score': array([0.38786875, 0.40540997, 0.41680886, 0.31155503, 0.39113795])}\n"
     ]
    }
   ],
   "source": [
    "#cross-validation\n",
    "knn = KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='manhattan',\n",
    "                    metric_params=None, n_jobs=None, n_neighbors=15, p=2,\n",
    "                    weights='uniform')\n",
    "knn.fit(X_train, y_train)\n",
    "knn_scores = cross_validate(knn,X_test, y_test, cv=5)\n",
    "print(\"KNN scores: \",knn_scores)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Linear Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Linear Regression train score:  0.3146228521261771\n",
      "Linear Regression test score:  0.30239885260070554\n",
      "Accuracy:  0.30239885260070554\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "lreg = LinearRegression()\n",
    "lreg.fit(X_train, y_train)\n",
    "predictions = lreg.predict(X_test)\n",
    "print(\"Linear Regression train score: \", lreg.score(X_train, y_train))\n",
    "print(\"Linear Regression test score: \", lreg.score(X_test, y_test))\n",
    "accuracy = metrics.r2_score(y_test, predictions)\n",
    "print (\"Accuracy: \", accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "predictions = cross_val_predict(lreg, X_test, y_test, cv=6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cross-Predicted Accuracy:  0.30252814072023637\n"
     ]
    }
   ],
   "source": [
    "accuracy = metrics.r2_score(y_test, predictions)\n",
    "print (\"Cross-Predicted Accuracy: \", accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Linear regression scores:  {'fit_time': array([0.00795245, 0.        , 0.00803661, 0.        , 0.00799966]), 'score_time': array([0., 0., 0., 0., 0.]), 'test_score': array([0.33846318, 0.31472129, 0.32265264, 0.2407749 , 0.30654366])}\n"
     ]
    }
   ],
   "source": [
    "#cross-validation\n",
    "\n",
    "Linear_regression_scores = cross_validate(lreg,X_test, y_test, cv=5)\n",
    "print(\"Linear regression scores: \",Linear_regression_scores)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Ridge "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Ridge(alpha=0.01, copy_X=True, fit_intercept=True, max_iter=None,\n",
       "      normalize=False, random_state=None, solver='auto', tol=0.001)"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Ridge(alpha=0.1, copy_X=True, fit_intercept=True, max_iter=None,\n",
       "      normalize=False, random_state=None, solver='auto', tol=0.001)"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Ridge(alpha=1, copy_X=True, fit_intercept=True, max_iter=None, normalize=False,\n",
       "      random_state=None, solver='auto', tol=0.001)"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Ridge(alpha=10, copy_X=True, fit_intercept=True, max_iter=None, normalize=False,\n",
       "      random_state=None, solver='auto', tol=0.001)"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Ridge(alpha=100, copy_X=True, fit_intercept=True, max_iter=None,\n",
       "      normalize=False, random_state=None, solver='auto', tol=0.001)"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from  sklearn.linear_model import Ridge\n",
    "import matplotlib.pyplot as plt \n",
    "alpha_range = [0.01, 0.1, 1, 10, 100]\n",
    "train_score_list = []\n",
    "test_score_list = []\n",
    "\n",
    "for alpha in alpha_range: \n",
    "    ridge = Ridge(alpha)\n",
    "    ridge.fit(X_train,y_train)\n",
    "    train_score_list.append(ridge.score(X_train,y_train))\n",
    "    test_score_list.append(ridge.score(X_test, y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1aae4439188>]"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1aae43c4fc8>]"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1aae3581688>"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(alpha_range, train_score_list, c = 'r', label = 'Train Score')\n",
    "plt.plot(alpha_range, test_score_list, c = 'b', label = 'Test Score')\n",
    "plt.xscale('log')\n",
    "plt.legend(loc = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "#With gridsearch cv\n",
    "param_values = {\"alpha\":[1.0/50.0, 1.0/200.0, 1.0/500.0, 1.0/1000.0,.00001]}\n",
    "gs = GridSearchCV(ridge, param_values,n_jobs = -1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best score :  0.3121996665934842\n",
      "Best estimator:  Ridge(alpha=0.02, copy_X=True, fit_intercept=True, max_iter=None,\n",
      "      normalize=False, random_state=None, solver='auto', tol=0.001)\n",
      "Best parameters:  {'alpha': 0.02}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\vunda\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n"
     ]
    }
   ],
   "source": [
    "gs_fit = gs.fit(X_train,y_train)\n",
    "print(\"Best score : \", gs_fit.best_score_)\n",
    "print(\"Best estimator: \",gs_fit.best_estimator_)\n",
    "print(\"Best parameters: \",gs_fit.best_params_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ridge scores:  {'fit_time': array([0.        , 0.        , 0.        , 0.00799441, 0.        ]), 'score_time': array([0.00799561, 0.        , 0.        , 0.        , 0.        ]), 'test_score': array([0.33846335, 0.31472132, 0.32265244, 0.24077505, 0.30654367])}\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Ridge(alpha=0.02, copy_X=True, fit_intercept=True, max_iter=None,\n",
       "      normalize=False, random_state=None, solver='auto', tol=0.001)"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ridge train score:  0.31462285212573204\n",
      "ridge test score:  0.3023988647394775\n"
     ]
    }
   ],
   "source": [
    "#cross-validation\n",
    "ridge = Ridge(alpha=0.02, copy_X=True, fit_intercept=True, max_iter=None,\n",
    "      normalize=False, random_state=None, solver='auto', tol=0.001)\n",
    "ridgescores = cross_validate(ridge,X_test, y_test, cv=5)\n",
    "print(\"Ridge scores: \",ridgescores)\n",
    "ridge.fit(X_train,y_train)\n",
    "print(\"ridge train score: \", ridge.score(X_train, y_train))\n",
    "print(\"ridge test score: \", ridge.score(X_test, y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Lasso "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Lasso(alpha=0.01, copy_X=True, fit_intercept=True, max_iter=1000,\n",
       "      normalize=False, positive=False, precompute=False, random_state=None,\n",
       "      selection='cyclic', tol=0.0001, warm_start=False)"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Lasso(alpha=0.1, copy_X=True, fit_intercept=True, max_iter=1000,\n",
       "      normalize=False, positive=False, precompute=False, random_state=None,\n",
       "      selection='cyclic', tol=0.0001, warm_start=False)"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Lasso(alpha=1, copy_X=True, fit_intercept=True, max_iter=1000, normalize=False,\n",
       "      positive=False, precompute=False, random_state=None, selection='cyclic',\n",
       "      tol=0.0001, warm_start=False)"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Lasso(alpha=10, copy_X=True, fit_intercept=True, max_iter=1000, normalize=False,\n",
       "      positive=False, precompute=False, random_state=None, selection='cyclic',\n",
       "      tol=0.0001, warm_start=False)"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Lasso(alpha=100, copy_X=True, fit_intercept=True, max_iter=1000,\n",
       "      normalize=False, positive=False, precompute=False, random_state=None,\n",
       "      selection='cyclic', tol=0.0001, warm_start=False)"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import Lasso\n",
    "alpha_range = [0.01, 0.1, 1, 10, 100]\n",
    "train_score_list = []\n",
    "test_score_list = []\n",
    "\n",
    "for alpha in alpha_range: \n",
    "    lasso = Lasso(alpha)\n",
    "    lasso.fit(X_train,y_train)\n",
    "    train_score_list.append(lasso.score(X_train,y_train))\n",
    "    test_score_list.append(lasso.score(X_test, y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1aae48d6b08>]"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1aae48d3108>]"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1aae48e3288>"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(alpha_range, train_score_list, c = 'r', label = 'Train Score')\n",
    "plt.plot(alpha_range, test_score_list, c = 'b', label = 'Test Score')\n",
    "plt.xscale('log')\n",
    "plt.legend(loc = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "#With gridsearch cv\n",
    "param_values = {\"alpha\":[1.0/50.0, 1.0/200.0, 1.0/500.0, 1.0/1000.0,.00001]}\n",
    "gs = GridSearchCV(lasso, param_values,n_jobs = -1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\vunda\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best score :  0.31219964611848083\n",
      "Best estimator:  Lasso(alpha=0.02, copy_X=True, fit_intercept=True, max_iter=1000,\n",
      "      normalize=False, positive=False, precompute=False, random_state=None,\n",
      "      selection='cyclic', tol=0.0001, warm_start=False)\n",
      "Best parameters:  {'alpha': 0.02}\n"
     ]
    }
   ],
   "source": [
    "gs_fit = gs.fit(X_train,y_train)\n",
    "print(\"Best score : \", gs.best_score_)\n",
    "print(\"Best estimator: \",gs.best_estimator_)\n",
    "print(\"Best parameters: \",gs.best_params_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Lasso(alpha=0.02, copy_X=True, fit_intercept=True, max_iter=1000,\n",
       "      normalize=False, positive=False, precompute=False, random_state=None,\n",
       "      selection='cyclic', tol=0.0001, warm_start=False)"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Lasso scores:  {'fit_time': array([0.01142979, 0.00201821, 0.00799417, 0.0079937 , 0.00804067]), 'score_time': array([0.00101471, 0.        , 0.        , 0.        , 0.        ]), 'test_score': array([0.33846319, 0.3147213 , 0.32265263, 0.24077492, 0.30654366])}\n",
      "Lasso train score:  0.3146228521261458\n",
      "Lasso test score:  0.3023988576014637\n"
     ]
    }
   ],
   "source": [
    "#cross-validation\n",
    "lasso = Lasso(alpha=0.02, copy_X=True, fit_intercept=True, max_iter=1000,\n",
    "      normalize=False, positive=False, precompute=False, random_state=None,\n",
    "      selection='cyclic', tol=0.0001, warm_start=False)\n",
    "\n",
    "lassoscores = cross_validate(lasso,X_test, y_test, cv=5)\n",
    "lasso.fit(X_train,y_train)\n",
    "print(\"Lasso scores: \",lassoscores)\n",
    "print(\"Lasso train score: \", lasso.score(X_train, y_train))\n",
    "print(\"Lasso test score: \", lasso.score(X_test, y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Polynomial Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from  sklearn.preprocessing  import PolynomialFeatures\n",
    "\n",
    "\n",
    "train_score_list = []\n",
    "test_score_list = []\n",
    "\n",
    "for n in range(1,3):\n",
    "    poly = PolynomialFeatures(n)\n",
    "    X_train_poly = poly.fit_transform(X_train)\n",
    "    X_test_poly = poly.transform(X_test)\n",
    "    lreg.fit(X_train_poly, y_train)\n",
    "    train_score_list.append(lreg.score(X_train_poly, y_train))\n",
    "    test_score_list.append(lreg.score(X_test_poly, y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train scores :  [0.3146228521261771, 0.37105229128451817]\n",
      "Test scores :  [0.3023988526007042, 0.33846808565107933]\n"
     ]
    }
   ],
   "source": [
    "print(\"Train scores : \", train_score_list)\n",
    "print(\"Test scores : \", test_score_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1aae8093148>]"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1aae80999c8>]"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1aae8093d48>"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(range(1,3), train_score_list, c = 'r', label = 'Train Score')\n",
    "plt.plot(range(1,3), test_score_list, c = 'b', label = 'Test Score')\n",
    "plt.legend(loc = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "#with gridSearchcv\n",
    "from sklearn.pipeline import make_pipeline\n",
    "def PolynomialRegression(degree=2, **kwargs):\n",
    "    return make_pipeline(PolynomialFeatures(degree), LinearRegression(**kwargs))\n",
    "\n",
    "param_grid = {'polynomialfeatures__degree': np.arange(10), 'linearregression__fit_intercept': [True, False], 'linearregression__normalize': [True, False]}\n",
    "\n",
    "poly_grid = GridSearchCV(PolynomialRegression(), param_grid, cv=10, scoring='neg_mean_squared_error')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Polynomial  scores:  {'fit_time': array([0.03193712, 0.03197837, 0.03216434, 0.03071117, 0.02810836]), 'score_time': array([0.00799489, 0.        , 0.00399089, 0.00399542, 0.        ]), 'test_score': array([-0.08223112,  0.37852503,  0.39365531, -1.38822458,  0.34538583])}\n"
     ]
    }
   ],
   "source": [
    "from sklearn.pipeline import make_pipeline\n",
    "def PolynomialRegression(degree=2, **kwargs):\n",
    "    return make_pipeline(PolynomialFeatures(degree), LinearRegression(**kwargs))\n",
    "poly_scores = cross_validate(PolynomialRegression(),X_test, y_test, cv=5)\n",
    "print(\"Polynomial  scores: \",poly_scores)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Linear SVM Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearSVR(C=1.0, dual=True, epsilon=0.0, fit_intercept=True,\n",
       "          intercept_scaling=1.0, loss='epsilon_insensitive', max_iter=1000,\n",
       "          random_state=0, tol=0.0001, verbose=0)"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Linear SVR train score:  -3.2181510437330836\n",
      "Linear SVR test score:  -3.3974657496505523\n"
     ]
    }
   ],
   "source": [
    "from sklearn.svm import LinearSVR,SVR\n",
    "lin_SVR = LinearSVR(random_state=0)\n",
    "lin_SVR.fit(X_train, y_train)\n",
    "print(\"Linear SVR train score: \", lin_SVR.score(X_train, y_train))\n",
    "print(\"Linear SVR test score: \", lin_SVR.score(X_test, y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "#with gridsearchcv\n",
    "param_grid  = {\"C\": [ 10, 100, 1000], 'epsilon':[0.01,0.1,1,10]}\n",
    "gs = GridSearchCV(lin_SVR, param_grid,n_jobs = -1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\vunda\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv='warn', error_score='raise-deprecating',\n",
       "             estimator=LinearSVR(C=1.0, dual=True, epsilon=0.0,\n",
       "                                 fit_intercept=True, intercept_scaling=1.0,\n",
       "                                 loss='epsilon_insensitive', max_iter=1000,\n",
       "                                 random_state=0, tol=0.0001, verbose=0),\n",
       "             iid='warn', n_jobs=-1,\n",
       "             param_grid={'C': [10, 100, 1000], 'epsilon': [0.01, 0.1, 1, 10]},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
       "             scoring=None, verbose=0)"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gs.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best score :  0.2266433532864907\n",
      "Best estimator:  LinearSVR(C=1000, dual=True, epsilon=10, fit_intercept=True,\n",
      "          intercept_scaling=1.0, loss='epsilon_insensitive', max_iter=1000,\n",
      "          random_state=0, tol=0.0001, verbose=0)\n",
      "Best parameters:  {'C': 1000, 'epsilon': 10}\n"
     ]
    }
   ],
   "source": [
    "print(\"Best score : \", gs.best_score_)\n",
    "print(\"Best estimator: \",gs.best_estimator_)\n",
    "print(\"Best parameters: \",gs.best_params_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearSVR(C=1000, dual=True, epsilon=10, fit_intercept=True,\n",
       "          intercept_scaling=1.0, loss='epsilon_insensitive', max_iter=1000,\n",
       "          random_state=0, tol=0.0001, verbose=0)"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Linear SVR  scores:  {'fit_time': array([0.00797343, 0.00801754, 0.        , 0.        , 0.00803542]), 'score_time': array([0.        , 0.        , 0.00795484, 0.        , 0.        ]), 'test_score': array([0.20276242, 0.20427477, 0.18961105, 0.17204767, 0.18935017])}\n",
      "Linear SVR train score:  0.23441989550236564\n",
      "Linear SVR test score:  0.23792150015956226\n"
     ]
    }
   ],
   "source": [
    "#cross validation\n",
    "lin_SVR =  LinearSVR(C=1000, dual=True, epsilon=10, fit_intercept=True,\n",
    "          intercept_scaling=1.0, loss='epsilon_insensitive', max_iter=1000,\n",
    "          random_state=0, tol=0.0001, verbose=0)\n",
    "lin_SVR.fit(X_train, y_train)\n",
    "linsvr_scores = cross_validate(lin_SVR,X_test, y_test, cv=5)\n",
    "print(\"Linear SVR  scores: \",linsvr_scores)\n",
    "print(\"Linear SVR train score: \", lin_SVR.score(X_train, y_train))\n",
    "print(\"Linear SVR test score: \", lin_SVR.score(X_test, y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Kernel SVM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\vunda\\Anaconda3\\lib\\site-packages\\sklearn\\svm\\base.py:193: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1,\n",
       "    gamma='auto_deprecated', kernel='rbf', max_iter=-1, shrinking=True,\n",
       "    tol=0.001, verbose=False)"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Kernel SVR train score:  0.0009466811307398126\n",
      "Kernel SVR test score:  0.0009275805067178178\n"
     ]
    }
   ],
   "source": [
    "ker_SVR = SVR(kernel='rbf')\n",
    "ker_SVR.fit(X_train, y_train)\n",
    "print(\"Kernel SVR train score: \", ker_SVR.score(X_train, y_train))\n",
    "print(\"Kernel SVR test score: \", ker_SVR.score(X_test, y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [],
   "source": [
    "#With gridsearch cv\n",
    "param_grid = {\"C\": [1, 10, 100], \"gamma\":[1.0/50.0, 1.0/1000.0], 'epsilon':[0.1,1,10]}\n",
    "gs = GridSearchCV(ker_SVR, param_grid,n_jobs = -1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\vunda\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv='warn', error_score='raise-deprecating',\n",
       "             estimator=SVR(C=1.0, cache_size=200, coef0=0.0, degree=3,\n",
       "                           epsilon=0.1, gamma='auto_deprecated', kernel='rbf',\n",
       "                           max_iter=-1, shrinking=True, tol=0.001,\n",
       "                           verbose=False),\n",
       "             iid='warn', n_jobs=-1,\n",
       "             param_grid={'C': [1, 10, 100], 'epsilon': [0.1, 1, 10],\n",
       "                         'gamma': [0.02, 0.001]},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
       "             scoring=None, verbose=0)"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gs.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best score :  0.04062801422336752\n",
      "Best estimator:  SVR(C=100, cache_size=200, coef0=0.0, degree=3, epsilon=1, gamma=0.02,\n",
      "    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False)\n",
      "Best parameters:  {'C': 100, 'epsilon': 1, 'gamma': 0.02}\n"
     ]
    }
   ],
   "source": [
    "print(\"Best score : \", gs.best_score_)\n",
    "print(\"Best estimator: \",gs.best_estimator_)\n",
    "print(\"Best parameters: \",gs.best_params_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVR(C=1, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma=0.02,\n",
       "    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False)"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Kernel SVR  scores:  {'fit_time': array([1.48342991, 1.46733284, 1.46311879, 1.46936703, 1.47354889]), 'score_time': array([0.20042396, 0.19687557, 0.21083832, 0.20662808, 0.19947386]), 'test_score': array([ 2.60033164e-04, -3.19716619e-05,  2.15486577e-04, -1.43671217e-03,\n",
      "        3.04688659e-05])}\n",
      "Kernel SVR train score:  0.0008100826506459713\n",
      "Kernel SVR test score:  0.0007567008209122816\n"
     ]
    }
   ],
   "source": [
    "#cross validation\n",
    "ker_SVR =  SVR(C=1, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma=0.02,\n",
    "    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False)\n",
    "ker_SVR.fit(X_train, y_train)\n",
    "kersvr_scores = cross_validate(ker_SVR,X_test, y_test, cv=5)\n",
    "print(\"Kernel SVR  scores: \",kersvr_scores)\n",
    "print(\"Kernel SVR train score: \", ker_SVR.score(X_train, y_train))\n",
    "print(\"Kernel SVR test score: \", ker_SVR.score(X_test, y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Decision tree regressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=3, error_score='raise-deprecating',\n",
       "             estimator=DecisionTreeRegressor(criterion='mse', max_depth=None,\n",
       "                                             max_features=None,\n",
       "                                             max_leaf_nodes=None,\n",
       "                                             min_impurity_decrease=0.0,\n",
       "                                             min_impurity_split=None,\n",
       "                                             min_samples_leaf=1,\n",
       "                                             min_samples_split=2,\n",
       "                                             min_weight_fraction_leaf=0.0,\n",
       "                                             presort=False, random_state=0,\n",
       "                                             splitter='best'),\n",
       "             iid='warn', n_jobs=None,\n",
       "             param_grid={'max_depth': range(1, 10),\n",
       "                         'min_samples_split': range(2, 30)},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=True,\n",
       "             scoring=None, verbose=0)"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Mean Cross-validation score: 0.458052\n",
      "\n",
      "Best parameters of Decision Tree regressor are :{'max_depth': 8, 'min_samples_split': 21}\n",
      "Test score of Decision Tree Regressor is 0.4408477982203199\n",
      "Train score of Decision Tree Regressor is 0.519930970884783\n"
     ]
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeRegressor\n",
    "dtree = DecisionTreeRegressor(random_state=0)\n",
    "dtree_param = {'max_depth': range(1,10), 'min_samples_split': range(2,30)}\n",
    "grid_dtree = GridSearchCV(dtree, dtree_param, cv=3, return_train_score = True)\n",
    "grid_dtree.fit(X_train, y_train)\n",
    "\n",
    "\n",
    "# Mean Cross Validation Score\n",
    "print(\"Best Mean Cross-validation score: {:.6f}\".format(grid_dtree.best_score_))\n",
    "print()\n",
    "print(\"Best parameters of Decision Tree regressor are :{}\".format(grid_dtree.best_params_))\n",
    "print(\"Test score of Decision Tree Regressor is {}\".format(grid_dtree.score(X_test,y_test)))\n",
    "print(\"Train score of Decision Tree Regressor is {}\".format(grid_dtree.score(X_train,y_train)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Bagging\n",
    "- 2 models"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Bagging on LASSO Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "BaggingRegressor(base_estimator=Lasso(alpha=10, copy_X=True, fit_intercept=True,\n",
       "                                      max_iter=1000, normalize=False,\n",
       "                                      positive=False, precompute=False,\n",
       "                                      random_state=None, selection='cyclic',\n",
       "                                      tol=0.0001, warm_start=False),\n",
       "                 bootstrap=True, bootstrap_features=False, max_features=1.0,\n",
       "                 max_samples=100, n_estimators=500, n_jobs=None, oob_score=True,\n",
       "                 random_state=0, verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train score: -0.19202850643372082\n",
      "test score: 0.0836778859570233\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import BaggingRegressor\n",
    "lass = Lasso(alpha = 10)\n",
    "bag_clf = BaggingRegressor(lass,n_estimators=500, max_samples=100, bootstrap=True, random_state=0, oob_score=True)\n",
    "bag_clf.fit(X_train, y_train)\n",
    "y_pred = bag_clf.predict(X_test)\n",
    "print('train score:', bag_clf.score(X_train, y_train))\n",
    "print('test score:', bag_clf.score(X_test, y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Bagging on KNN Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "BaggingRegressor(base_estimator=KNeighborsRegressor(algorithm='auto',\n",
       "                                                    leaf_size=30,\n",
       "                                                    metric='minkowski',\n",
       "                                                    metric_params=None,\n",
       "                                                    n_jobs=None, n_neighbors=10,\n",
       "                                                    p=2, weights='uniform'),\n",
       "                 bootstrap=True, bootstrap_features=False, max_features=1.0,\n",
       "                 max_samples=100, n_estimators=500, n_jobs=None, oob_score=True,\n",
       "                 random_state=0, verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train score: 0.26100803615543167\n",
      "test score: 0.25723174025770157\n"
     ]
    }
   ],
   "source": [
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "knn = KNeighborsRegressor(n_neighbors = 10)\n",
    "bag_clf = BaggingRegressor(knn,n_estimators=500, max_samples=100, bootstrap=True, random_state=0, oob_score=True)\n",
    "bag_clf.fit(X_train, y_train)\n",
    "print('train score:', bag_clf.score(X_train, y_train))\n",
    "print('test score:',bag_clf.score(X_test, y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Pasting \n",
    "- 2 models"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Lasso Regression with pasting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "BaggingRegressor(base_estimator=Lasso(alpha=10, copy_X=True, fit_intercept=True,\n",
       "                                      max_iter=1000, normalize=False,\n",
       "                                      positive=False, precompute=False,\n",
       "                                      random_state=None, selection='cyclic',\n",
       "                                      tol=0.0001, warm_start=False),\n",
       "                 bootstrap=False, bootstrap_features=False, max_features=1.0,\n",
       "                 max_samples=100, n_estimators=500, n_jobs=None,\n",
       "                 oob_score=False, random_state=0, verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train score: -0.1964477054873892\n",
      "test score: 0.08169887048494051\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import BaggingRegressor\n",
    "lass = Lasso(alpha = 10)\n",
    "bag_clf = BaggingRegressor(lass,n_estimators=500, max_samples=100, bootstrap=False, random_state=0)\n",
    "bag_clf.fit(X_train, y_train)\n",
    "y_pred = bag_clf.predict(X_test)\n",
    "print('train score:',bag_clf.score(X_train, y_train))\n",
    "print('test score:', bag_clf.score(X_test, y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### KNN regression with pasting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "BaggingRegressor(base_estimator=KNeighborsRegressor(algorithm='auto',\n",
       "                                                    leaf_size=30,\n",
       "                                                    metric='minkowski',\n",
       "                                                    metric_params=None,\n",
       "                                                    n_jobs=None, n_neighbors=10,\n",
       "                                                    p=2, weights='uniform'),\n",
       "                 bootstrap=False, bootstrap_features=False, max_features=1.0,\n",
       "                 max_samples=100, n_estimators=500, n_jobs=None,\n",
       "                 oob_score=False, random_state=0, verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bag_clf = BaggingRegressor(knn,n_estimators=500, max_samples=100, bootstrap=False, random_state=0)\n",
    "bag_clf.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train score: 0.2610185347124525\n",
      "test score: 0.25727333843962674\n"
     ]
    }
   ],
   "source": [
    "print('train score:',bag_clf.score(X_train, y_train))\n",
    "print('test score:',bag_clf.score(X_test, y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# adaboosting \n",
    "- 2 models"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### KNN Regression with AdaBoosting\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=4, error_score='raise-deprecating',\n",
       "             estimator=AdaBoostRegressor(base_estimator=KNeighborsRegressor(algorithm='auto',\n",
       "                                                                            leaf_size=30,\n",
       "                                                                            metric='minkowski',\n",
       "                                                                            metric_params=None,\n",
       "                                                                            n_jobs=None,\n",
       "                                                                            n_neighbors=10,\n",
       "                                                                            p=2,\n",
       "                                                                            weights='uniform'),\n",
       "                                         learning_rate=1.0, loss='linear',\n",
       "                                         n_estimators=100, random_state=None),\n",
       "             iid='warn', n_jobs=-1, param_grid={'learning_rate': [0.5]},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=True,\n",
       "             scoring=None, verbose=0)"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import AdaBoostRegressor\n",
    "param_grid = {'learning_rate': [0.5]}\n",
    "ada_clf = AdaBoostRegressor(knn,n_estimators=100)\n",
    "GridSearch_dtclf = GridSearchCV(ada_clf, param_grid,cv=4,return_train_score=True,n_jobs= -1)\n",
    "\n",
    "GridSearch_dtclf.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'learning_rate': 0.5}"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "0.24845661714027498"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "GridSearch_dtclf.best_params_\n",
    "GridSearch_dtclf.best_score_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean_fit_time</th>\n",
       "      <th>std_fit_time</th>\n",
       "      <th>mean_score_time</th>\n",
       "      <th>std_score_time</th>\n",
       "      <th>param_learning_rate</th>\n",
       "      <th>params</th>\n",
       "      <th>split0_test_score</th>\n",
       "      <th>split1_test_score</th>\n",
       "      <th>split2_test_score</th>\n",
       "      <th>split3_test_score</th>\n",
       "      <th>mean_test_score</th>\n",
       "      <th>std_test_score</th>\n",
       "      <th>rank_test_score</th>\n",
       "      <th>split0_train_score</th>\n",
       "      <th>split1_train_score</th>\n",
       "      <th>split2_train_score</th>\n",
       "      <th>split3_train_score</th>\n",
       "      <th>mean_train_score</th>\n",
       "      <th>std_train_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>214.321267</td>\n",
       "      <td>91.730674</td>\n",
       "      <td>58.747771</td>\n",
       "      <td>16.480723</td>\n",
       "      <td>0.5</td>\n",
       "      <td>{'learning_rate': 0.5}</td>\n",
       "      <td>0.260891</td>\n",
       "      <td>0.240649</td>\n",
       "      <td>0.264715</td>\n",
       "      <td>0.227571</td>\n",
       "      <td>0.248457</td>\n",
       "      <td>0.015134</td>\n",
       "      <td>1</td>\n",
       "      <td>0.616607</td>\n",
       "      <td>0.555525</td>\n",
       "      <td>0.607246</td>\n",
       "      <td>0.62863</td>\n",
       "      <td>0.602002</td>\n",
       "      <td>0.027884</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   mean_fit_time  std_fit_time  mean_score_time  std_score_time  \\\n",
       "0     214.321267     91.730674        58.747771       16.480723   \n",
       "\n",
       "  param_learning_rate                  params  split0_test_score  \\\n",
       "0                 0.5  {'learning_rate': 0.5}           0.260891   \n",
       "\n",
       "   split1_test_score  split2_test_score  split3_test_score  mean_test_score  \\\n",
       "0           0.240649           0.264715           0.227571         0.248457   \n",
       "\n",
       "   std_test_score  rank_test_score  split0_train_score  split1_train_score  \\\n",
       "0        0.015134                1            0.616607            0.555525   \n",
       "\n",
       "   split2_train_score  split3_train_score  mean_train_score  std_train_score  \n",
       "0            0.607246             0.62863          0.602002         0.027884  "
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result_lasso_ada= pd.DataFrame(GridSearch_dtclf.cv_results_)\n",
    "result_lasso_ada"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "AdaBoostRegressor(base_estimator=KNeighborsRegressor(algorithm='auto',\n",
       "                                                     leaf_size=30,\n",
       "                                                     metric='minkowski',\n",
       "                                                     metric_params=None,\n",
       "                                                     n_jobs=None,\n",
       "                                                     n_neighbors=10, p=2,\n",
       "                                                     weights='uniform'),\n",
       "                  learning_rate=0.1, loss='linear', n_estimators=100,\n",
       "                  random_state=None)"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import AdaBoostRegressor\n",
    "\n",
    "ada_clf = AdaBoostRegressor(knn,n_estimators=100,learning_rate = 0.1)\n",
    "ada_clf.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train score: 0.6425667500291843\n",
      "test score: 0.21571278760066515\n"
     ]
    }
   ],
   "source": [
    "print('train score:',ada_clf.score(X_train, y_train))\n",
    "print('test score:',ada_clf.score(X_test, y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Lasso regression with Adaboosting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "AdaBoostRegressor(base_estimator=Lasso(alpha=10, copy_X=True,\n",
       "                                       fit_intercept=True, max_iter=1000,\n",
       "                                       normalize=False, positive=False,\n",
       "                                       precompute=False, random_state=None,\n",
       "                                       selection='cyclic', tol=0.0001,\n",
       "                                       warm_start=False),\n",
       "                  learning_rate=0.25, loss='linear', n_estimators=200,\n",
       "                  random_state=0)"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train score: -0.8003175107596548\n",
      "test score: -0.9041131275992164\n"
     ]
    }
   ],
   "source": [
    "ada_clf = AdaBoostRegressor(lass, n_estimators=200, learning_rate=0.25, random_state=0)\n",
    "ada_clf.fit(X_train, y_train)\n",
    "print('train score:',ada_clf.score(X_train, y_train))\n",
    "print('test score:',ada_clf.score(X_test, y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Gradient Boosting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GradientBoostingRegressor(alpha=0.9, criterion='friedman_mse', init=None,\n",
       "                          learning_rate=1.0, loss='ls', max_depth=2,\n",
       "                          max_features=None, max_leaf_nodes=None,\n",
       "                          min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                          min_samples_leaf=1, min_samples_split=2,\n",
       "                          min_weight_fraction_leaf=0.0, n_estimators=3,\n",
       "                          n_iter_no_change=None, presort='auto',\n",
       "                          random_state=42, subsample=1.0, tol=0.0001,\n",
       "                          validation_fraction=0.1, verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train score: 0.3595118724437687\n",
      "test score: 0.32916734106793566\n"
     ]
    }
   ],
   "source": [
    "from  sklearn.ensemble import GradientBoostingRegressor\n",
    "\n",
    "gbrt = GradientBoostingRegressor(max_depth=2, n_estimators=3, learning_rate=1.0, random_state=42)\n",
    "gbrt.fit(X_train, y_train)\n",
    "print('train score:',gbrt.score(X_train, y_train))\n",
    "print('test score:',gbrt.score(X_test, y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Applying PCA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.26636044, 0.11837592, 0.10414759, 0.0992876 , 0.08934339,\n",
       "       0.0789131 , 0.07652823, 0.06419274, 0.0536466 , 0.03510166,\n",
       "       0.01410273])"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "9"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.decomposition import PCA\n",
    "\n",
    "pca = PCA()\n",
    "\n",
    "X_train_pca = pca.fit_transform(X_train)\n",
    "\n",
    "pca.explained_variance_ratio_\n",
    "\n",
    "cumsum = np.cumsum(pca.explained_variance_ratio_)\n",
    "d = np.argmax(cumsum >= 0.95) + 1\n",
    "d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8329562693576833"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.decomposition import PCA\n",
    "\n",
    "pca = PCA(n_components = 7)\n",
    "X_train_pca = pca.fit_transform(X_train)\n",
    "np.sum(pca.explained_variance_ratio_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train_pca = pca.fit_transform(X_train)\n",
    "X_test_pca = pca.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(26140, 7)"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_pca.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Linear Regression with PCA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=6, error_score='raise-deprecating',\n",
       "             estimator=LinearRegression(copy_X=True, fit_intercept=True,\n",
       "                                        n_jobs=None, normalize=False),\n",
       "             iid='warn', n_jobs=None, param_grid={'normalize': [True, False]},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=True,\n",
       "             scoring=None, verbose=0)"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best parameters: {'normalize': True}\n",
      "Best cross-validation score: 0.2593\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "model = LinearRegression()\n",
    "parameters = {'normalize':[True,False]}\n",
    "grid_search_lr = GridSearchCV(model,parameters, cv=6, return_train_score=True)\n",
    "grid_search_lr.fit(X_train_pca, y_train)\n",
    "print(\"Best parameters: {}\".format(grid_search_lr.best_params_))\n",
    "print(\"Best cross-validation score: {:.4f}\".format(grid_search_lr.best_score_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean_fit_time</th>\n",
       "      <th>std_fit_time</th>\n",
       "      <th>mean_score_time</th>\n",
       "      <th>std_score_time</th>\n",
       "      <th>param_normalize</th>\n",
       "      <th>params</th>\n",
       "      <th>split0_test_score</th>\n",
       "      <th>split1_test_score</th>\n",
       "      <th>split2_test_score</th>\n",
       "      <th>split3_test_score</th>\n",
       "      <th>...</th>\n",
       "      <th>std_test_score</th>\n",
       "      <th>rank_test_score</th>\n",
       "      <th>split0_train_score</th>\n",
       "      <th>split1_train_score</th>\n",
       "      <th>split2_train_score</th>\n",
       "      <th>split3_train_score</th>\n",
       "      <th>split4_train_score</th>\n",
       "      <th>split5_train_score</th>\n",
       "      <th>mean_train_score</th>\n",
       "      <th>std_train_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0.004003</td>\n",
       "      <td>0.004003</td>\n",
       "      <td>0.002666</td>\n",
       "      <td>0.00377</td>\n",
       "      <td>True</td>\n",
       "      <td>{'normalize': True}</td>\n",
       "      <td>0.254546</td>\n",
       "      <td>0.264429</td>\n",
       "      <td>0.261939</td>\n",
       "      <td>0.24948</td>\n",
       "      <td>...</td>\n",
       "      <td>0.008679</td>\n",
       "      <td>1</td>\n",
       "      <td>0.262037</td>\n",
       "      <td>0.260083</td>\n",
       "      <td>0.260422</td>\n",
       "      <td>0.262116</td>\n",
       "      <td>0.257996</td>\n",
       "      <td>0.262582</td>\n",
       "      <td>0.260873</td>\n",
       "      <td>0.001577</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0.005323</td>\n",
       "      <td>0.003764</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>False</td>\n",
       "      <td>{'normalize': False}</td>\n",
       "      <td>0.254546</td>\n",
       "      <td>0.264429</td>\n",
       "      <td>0.261939</td>\n",
       "      <td>0.24948</td>\n",
       "      <td>...</td>\n",
       "      <td>0.008679</td>\n",
       "      <td>2</td>\n",
       "      <td>0.262037</td>\n",
       "      <td>0.260083</td>\n",
       "      <td>0.260422</td>\n",
       "      <td>0.262116</td>\n",
       "      <td>0.257996</td>\n",
       "      <td>0.262582</td>\n",
       "      <td>0.260873</td>\n",
       "      <td>0.001577</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   mean_fit_time  std_fit_time  mean_score_time  std_score_time  \\\n",
       "0       0.004003      0.004003         0.002666         0.00377   \n",
       "1       0.005323      0.003764         0.000000         0.00000   \n",
       "\n",
       "  param_normalize                params  split0_test_score  split1_test_score  \\\n",
       "0            True   {'normalize': True}           0.254546           0.264429   \n",
       "1           False  {'normalize': False}           0.254546           0.264429   \n",
       "\n",
       "   split2_test_score  split3_test_score  ...  std_test_score  rank_test_score  \\\n",
       "0           0.261939            0.24948  ...        0.008679                1   \n",
       "1           0.261939            0.24948  ...        0.008679                2   \n",
       "\n",
       "   split0_train_score  split1_train_score  split2_train_score  \\\n",
       "0            0.262037            0.260083            0.260422   \n",
       "1            0.262037            0.260083            0.260422   \n",
       "\n",
       "   split3_train_score  split4_train_score  split5_train_score  \\\n",
       "0            0.262116            0.257996            0.262582   \n",
       "1            0.262116            0.257996            0.262582   \n",
       "\n",
       "   mean_train_score  std_train_score  \n",
       "0          0.260873         0.001577  \n",
       "1          0.260873         0.001577  \n",
       "\n",
       "[2 rows x 23 columns]"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results = pd.DataFrame(grid_search_lr.cv_results_)\n",
    "results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=True)"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.260797887678915\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.2518158884580671"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lreg = LinearRegression(normalize = True)\n",
    "lreg.fit(X_train_pca, y_train)\n",
    "print(lreg.score(X_train_pca, y_train))\n",
    "lr_test_score = lreg.score(X_test_pca, y_test)\n",
    "lr_test_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cross-validation scores:\n",
      "[0.25454647 0.26442908 0.2619394  0.24948007 0.27443706 0.25090268]\n",
      "0.2592891257586188\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import KFold\n",
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "  \n",
    "kfold = KFold(n_splits=6)\n",
    "print(\"Cross-validation scores:\\n{}\".format(cross_val_score(lreg , X_train_pca, y_train, cv=kfold)))\n",
    "scores = cross_val_score(lreg , X_train_pca, y_train, cv=kfold)\n",
    "print(np.mean(scores))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# KNN Regression with PCA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [],
   "source": [
    "grid_parms_knn = {'n_neighbors':[1,5,10,15,20]}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=6, error_score='raise-deprecating',\n",
       "             estimator=KNeighborsRegressor(algorithm='auto', leaf_size=30,\n",
       "                                           metric='minkowski',\n",
       "                                           metric_params=None, n_jobs=None,\n",
       "                                           n_neighbors=5, p=2,\n",
       "                                           weights='uniform'),\n",
       "             iid='warn', n_jobs=-1,\n",
       "             param_grid={'n_neighbors': [1, 5, 10, 15, 20]},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=True,\n",
       "             scoring=None, verbose=0)"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn = KNeighborsRegressor()\n",
    "grid_search_knn = GridSearchCV(knn, grid_parms_knn,cv=6,return_train_score=True,n_jobs= -1)\n",
    "grid_search_knn.fit(X_train_pca, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best parameters: {'n_neighbors': 20}\n",
      "Best cross-validation score: 0.3795\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean_fit_time</th>\n",
       "      <th>std_fit_time</th>\n",
       "      <th>mean_score_time</th>\n",
       "      <th>std_score_time</th>\n",
       "      <th>param_n_neighbors</th>\n",
       "      <th>params</th>\n",
       "      <th>split0_test_score</th>\n",
       "      <th>split1_test_score</th>\n",
       "      <th>split2_test_score</th>\n",
       "      <th>split3_test_score</th>\n",
       "      <th>...</th>\n",
       "      <th>std_test_score</th>\n",
       "      <th>rank_test_score</th>\n",
       "      <th>split0_train_score</th>\n",
       "      <th>split1_train_score</th>\n",
       "      <th>split2_train_score</th>\n",
       "      <th>split3_train_score</th>\n",
       "      <th>split4_train_score</th>\n",
       "      <th>split5_train_score</th>\n",
       "      <th>mean_train_score</th>\n",
       "      <th>std_train_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0.048305</td>\n",
       "      <td>0.004677</td>\n",
       "      <td>0.279320</td>\n",
       "      <td>0.013014</td>\n",
       "      <td>1</td>\n",
       "      <td>{'n_neighbors': 1}</td>\n",
       "      <td>-0.056212</td>\n",
       "      <td>-0.077525</td>\n",
       "      <td>0.062274</td>\n",
       "      <td>0.011017</td>\n",
       "      <td>...</td>\n",
       "      <td>0.057807</td>\n",
       "      <td>5</td>\n",
       "      <td>0.981544</td>\n",
       "      <td>0.978872</td>\n",
       "      <td>0.980283</td>\n",
       "      <td>0.981008</td>\n",
       "      <td>0.974695</td>\n",
       "      <td>0.980478</td>\n",
       "      <td>0.979480</td>\n",
       "      <td>0.002291</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0.046636</td>\n",
       "      <td>0.002980</td>\n",
       "      <td>0.625997</td>\n",
       "      <td>0.041025</td>\n",
       "      <td>5</td>\n",
       "      <td>{'n_neighbors': 5}</td>\n",
       "      <td>0.318840</td>\n",
       "      <td>0.308107</td>\n",
       "      <td>0.343437</td>\n",
       "      <td>0.318742</td>\n",
       "      <td>...</td>\n",
       "      <td>0.019635</td>\n",
       "      <td>4</td>\n",
       "      <td>0.554027</td>\n",
       "      <td>0.553143</td>\n",
       "      <td>0.555212</td>\n",
       "      <td>0.556658</td>\n",
       "      <td>0.547825</td>\n",
       "      <td>0.552540</td>\n",
       "      <td>0.553234</td>\n",
       "      <td>0.002769</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0.043971</td>\n",
       "      <td>0.007654</td>\n",
       "      <td>0.789152</td>\n",
       "      <td>0.028746</td>\n",
       "      <td>10</td>\n",
       "      <td>{'n_neighbors': 10}</td>\n",
       "      <td>0.358952</td>\n",
       "      <td>0.362806</td>\n",
       "      <td>0.379309</td>\n",
       "      <td>0.338800</td>\n",
       "      <td>...</td>\n",
       "      <td>0.016784</td>\n",
       "      <td>3</td>\n",
       "      <td>0.486097</td>\n",
       "      <td>0.482929</td>\n",
       "      <td>0.483974</td>\n",
       "      <td>0.489683</td>\n",
       "      <td>0.480794</td>\n",
       "      <td>0.478727</td>\n",
       "      <td>0.483701</td>\n",
       "      <td>0.003545</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0.041306</td>\n",
       "      <td>0.005494</td>\n",
       "      <td>0.998788</td>\n",
       "      <td>0.057961</td>\n",
       "      <td>15</td>\n",
       "      <td>{'n_neighbors': 15}</td>\n",
       "      <td>0.366522</td>\n",
       "      <td>0.381996</td>\n",
       "      <td>0.381904</td>\n",
       "      <td>0.351468</td>\n",
       "      <td>...</td>\n",
       "      <td>0.015167</td>\n",
       "      <td>2</td>\n",
       "      <td>0.456039</td>\n",
       "      <td>0.453472</td>\n",
       "      <td>0.455168</td>\n",
       "      <td>0.463388</td>\n",
       "      <td>0.450028</td>\n",
       "      <td>0.453006</td>\n",
       "      <td>0.455184</td>\n",
       "      <td>0.004129</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0.041311</td>\n",
       "      <td>0.005492</td>\n",
       "      <td>1.056310</td>\n",
       "      <td>0.032116</td>\n",
       "      <td>20</td>\n",
       "      <td>{'n_neighbors': 20}</td>\n",
       "      <td>0.370484</td>\n",
       "      <td>0.385355</td>\n",
       "      <td>0.380298</td>\n",
       "      <td>0.355457</td>\n",
       "      <td>...</td>\n",
       "      <td>0.015664</td>\n",
       "      <td>1</td>\n",
       "      <td>0.440407</td>\n",
       "      <td>0.437616</td>\n",
       "      <td>0.440141</td>\n",
       "      <td>0.449311</td>\n",
       "      <td>0.436511</td>\n",
       "      <td>0.438628</td>\n",
       "      <td>0.440436</td>\n",
       "      <td>0.004193</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   mean_fit_time  std_fit_time  mean_score_time  std_score_time  \\\n",
       "0       0.048305      0.004677         0.279320        0.013014   \n",
       "1       0.046636      0.002980         0.625997        0.041025   \n",
       "2       0.043971      0.007654         0.789152        0.028746   \n",
       "3       0.041306      0.005494         0.998788        0.057961   \n",
       "4       0.041311      0.005492         1.056310        0.032116   \n",
       "\n",
       "  param_n_neighbors               params  split0_test_score  \\\n",
       "0                 1   {'n_neighbors': 1}          -0.056212   \n",
       "1                 5   {'n_neighbors': 5}           0.318840   \n",
       "2                10  {'n_neighbors': 10}           0.358952   \n",
       "3                15  {'n_neighbors': 15}           0.366522   \n",
       "4                20  {'n_neighbors': 20}           0.370484   \n",
       "\n",
       "   split1_test_score  split2_test_score  split3_test_score  ...  \\\n",
       "0          -0.077525           0.062274           0.011017  ...   \n",
       "1           0.308107           0.343437           0.318742  ...   \n",
       "2           0.362806           0.379309           0.338800  ...   \n",
       "3           0.381996           0.381904           0.351468  ...   \n",
       "4           0.385355           0.380298           0.355457  ...   \n",
       "\n",
       "   std_test_score  rank_test_score  split0_train_score  split1_train_score  \\\n",
       "0        0.057807                5            0.981544            0.978872   \n",
       "1        0.019635                4            0.554027            0.553143   \n",
       "2        0.016784                3            0.486097            0.482929   \n",
       "3        0.015167                2            0.456039            0.453472   \n",
       "4        0.015664                1            0.440407            0.437616   \n",
       "\n",
       "   split2_train_score  split3_train_score  split4_train_score  \\\n",
       "0            0.980283            0.981008            0.974695   \n",
       "1            0.555212            0.556658            0.547825   \n",
       "2            0.483974            0.489683            0.480794   \n",
       "3            0.455168            0.463388            0.450028   \n",
       "4            0.440141            0.449311            0.436511   \n",
       "\n",
       "   split5_train_score  mean_train_score  std_train_score  \n",
       "0            0.980478          0.979480         0.002291  \n",
       "1            0.552540          0.553234         0.002769  \n",
       "2            0.478727          0.483701         0.003545  \n",
       "3            0.453006          0.455184         0.004129  \n",
       "4            0.438628          0.440436         0.004193  \n",
       "\n",
       "[5 rows x 23 columns]"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(\"Best parameters: {}\".format(grid_search_knn.best_params_))\n",
    "print(\"Best cross-validation score: {:.4f}\".format(grid_search_knn.best_score_))\n",
    "pd.DataFrame(grid_search_knn.cv_results_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',\n",
       "                    metric_params=None, n_jobs=None, n_neighbors=10, p=2,\n",
       "                    weights='uniform')"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.48778104614069806\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.34283804695609343"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn = KNeighborsRegressor(n_neighbors = 10)\n",
    "knn.fit(X_train_pca, y_train)\n",
    "print(knn.score(X_train_pca, y_train))\n",
    "knn_test_score_ = knn.score(X_test_pca, y_test)\n",
    "knn_test_score_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cross-validation scores:\n",
      "[0.35895183 0.36280566 0.379309   0.33879995 0.39234818 0.36152541]\n",
      "0.36562333834214805\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import KFold\n",
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "  \n",
    "kfold = KFold(n_splits=6)\n",
    "print(\"Cross-validation scores:\\n{}\".format(cross_val_score(knn , X_train_pca, y_train, cv=kfold)))\n",
    "scores = cross_val_score(knn , X_train_pca, y_train, cv=kfold)\n",
    "print(np.mean(scores))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Ridge Regression with PCA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [],
   "source": [
    "grid_parms_ridge = {'alpha': [0.01, 0.1, 1, 10, 100]}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=5, error_score='raise-deprecating',\n",
       "             estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True,\n",
       "                             max_iter=None, normalize=False, random_state=None,\n",
       "                             solver='auto', tol=0.001),\n",
       "             iid='warn', n_jobs=-1,\n",
       "             param_grid={'alpha': [0.01, 0.1, 1, 10, 100]},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=True,\n",
       "             scoring=None, verbose=0)"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best parameters: {'alpha': 100}\n",
      "Best cross-validation score: 0.2592\n"
     ]
    }
   ],
   "source": [
    "ridge = Ridge()\n",
    "grid_search_ridge = GridSearchCV(estimator = ridge,param_grid = grid_parms_ridge,return_train_score=True,n_jobs= -1,cv=5)\n",
    "grid_search_ridge.fit(X_train_pca, y_train)\n",
    "print(\"Best parameters: {}\".format(grid_search_ridge.best_params_))\n",
    "\n",
    "print(\"Best cross-validation score: {:.4f}\".format(grid_search_ridge.best_score_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Ridge(alpha=100, copy_X=True, fit_intercept=True, max_iter=None,\n",
       "      normalize=False, random_state=None, solver='auto', tol=0.001)"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.2607959397949059\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.2518289369431742"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ridge = Ridge(alpha = 100)\n",
    "ridge.fit(X_train_pca, y_train)\n",
    "print(ridge.score(X_train_pca, y_train))\n",
    "ridge_test_score_ = ridge.score(X_test_pca, y_test)\n",
    "ridge_test_score_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cross-validation scores:\n",
      "[0.25454242 0.26452132 0.26187977 0.24981789 0.27440376 0.25096736]\n",
      "0.2593554206955533\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import KFold\n",
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "  \n",
    "kfold = KFold(n_splits=6)\n",
    "print(\"Cross-validation scores:\\n{}\".format(cross_val_score(ridge , X_train_pca, y_train, cv=kfold)))\n",
    "scores = cross_val_score(ridge , X_train_pca, y_train, cv=kfold)\n",
    "print(np.mean(scores))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean_fit_time</th>\n",
       "      <th>std_fit_time</th>\n",
       "      <th>mean_score_time</th>\n",
       "      <th>std_score_time</th>\n",
       "      <th>param_alpha</th>\n",
       "      <th>params</th>\n",
       "      <th>split0_test_score</th>\n",
       "      <th>split1_test_score</th>\n",
       "      <th>split2_test_score</th>\n",
       "      <th>split3_test_score</th>\n",
       "      <th>...</th>\n",
       "      <th>mean_test_score</th>\n",
       "      <th>std_test_score</th>\n",
       "      <th>rank_test_score</th>\n",
       "      <th>split0_train_score</th>\n",
       "      <th>split1_train_score</th>\n",
       "      <th>split2_train_score</th>\n",
       "      <th>split3_train_score</th>\n",
       "      <th>split4_train_score</th>\n",
       "      <th>mean_train_score</th>\n",
       "      <th>std_train_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0.012794</td>\n",
       "      <td>3.917206e-03</td>\n",
       "      <td>0.001599</td>\n",
       "      <td>0.003198</td>\n",
       "      <td>0.01</td>\n",
       "      <td>{'alpha': 0.01}</td>\n",
       "      <td>0.251969</td>\n",
       "      <td>0.259516</td>\n",
       "      <td>0.260676</td>\n",
       "      <td>0.272466</td>\n",
       "      <td>...</td>\n",
       "      <td>0.259158</td>\n",
       "      <td>0.007682</td>\n",
       "      <td>5</td>\n",
       "      <td>0.262969</td>\n",
       "      <td>0.261083</td>\n",
       "      <td>0.259914</td>\n",
       "      <td>0.257567</td>\n",
       "      <td>0.262849</td>\n",
       "      <td>0.260876</td>\n",
       "      <td>0.00201</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0.007994</td>\n",
       "      <td>6.843901e-07</td>\n",
       "      <td>0.004797</td>\n",
       "      <td>0.003917</td>\n",
       "      <td>0.1</td>\n",
       "      <td>{'alpha': 0.1}</td>\n",
       "      <td>0.251969</td>\n",
       "      <td>0.259516</td>\n",
       "      <td>0.260677</td>\n",
       "      <td>0.272466</td>\n",
       "      <td>...</td>\n",
       "      <td>0.259158</td>\n",
       "      <td>0.007682</td>\n",
       "      <td>4</td>\n",
       "      <td>0.262969</td>\n",
       "      <td>0.261083</td>\n",
       "      <td>0.259914</td>\n",
       "      <td>0.257567</td>\n",
       "      <td>0.262849</td>\n",
       "      <td>0.260876</td>\n",
       "      <td>0.00201</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0.008878</td>\n",
       "      <td>1.668685e-03</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>{'alpha': 1}</td>\n",
       "      <td>0.251969</td>\n",
       "      <td>0.259516</td>\n",
       "      <td>0.260679</td>\n",
       "      <td>0.272465</td>\n",
       "      <td>...</td>\n",
       "      <td>0.259159</td>\n",
       "      <td>0.007682</td>\n",
       "      <td>3</td>\n",
       "      <td>0.262969</td>\n",
       "      <td>0.261083</td>\n",
       "      <td>0.259914</td>\n",
       "      <td>0.257567</td>\n",
       "      <td>0.262849</td>\n",
       "      <td>0.260876</td>\n",
       "      <td>0.00201</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0.007249</td>\n",
       "      <td>1.556160e-03</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>10</td>\n",
       "      <td>{'alpha': 10}</td>\n",
       "      <td>0.251972</td>\n",
       "      <td>0.259516</td>\n",
       "      <td>0.260702</td>\n",
       "      <td>0.272455</td>\n",
       "      <td>...</td>\n",
       "      <td>0.259164</td>\n",
       "      <td>0.007677</td>\n",
       "      <td>2</td>\n",
       "      <td>0.262969</td>\n",
       "      <td>0.261083</td>\n",
       "      <td>0.259914</td>\n",
       "      <td>0.257567</td>\n",
       "      <td>0.262849</td>\n",
       "      <td>0.260876</td>\n",
       "      <td>0.00201</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0.006396</td>\n",
       "      <td>3.198147e-03</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>100</td>\n",
       "      <td>{'alpha': 100}</td>\n",
       "      <td>0.251991</td>\n",
       "      <td>0.259515</td>\n",
       "      <td>0.260917</td>\n",
       "      <td>0.272355</td>\n",
       "      <td>...</td>\n",
       "      <td>0.259212</td>\n",
       "      <td>0.007626</td>\n",
       "      <td>1</td>\n",
       "      <td>0.262966</td>\n",
       "      <td>0.261080</td>\n",
       "      <td>0.259910</td>\n",
       "      <td>0.257564</td>\n",
       "      <td>0.262846</td>\n",
       "      <td>0.260873</td>\n",
       "      <td>0.00201</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   mean_fit_time  std_fit_time  mean_score_time  std_score_time param_alpha  \\\n",
       "0       0.012794  3.917206e-03         0.001599        0.003198        0.01   \n",
       "1       0.007994  6.843901e-07         0.004797        0.003917         0.1   \n",
       "2       0.008878  1.668685e-03         0.000000        0.000000           1   \n",
       "3       0.007249  1.556160e-03         0.000000        0.000000          10   \n",
       "4       0.006396  3.198147e-03         0.000000        0.000000         100   \n",
       "\n",
       "            params  split0_test_score  split1_test_score  split2_test_score  \\\n",
       "0  {'alpha': 0.01}           0.251969           0.259516           0.260676   \n",
       "1   {'alpha': 0.1}           0.251969           0.259516           0.260677   \n",
       "2     {'alpha': 1}           0.251969           0.259516           0.260679   \n",
       "3    {'alpha': 10}           0.251972           0.259516           0.260702   \n",
       "4   {'alpha': 100}           0.251991           0.259515           0.260917   \n",
       "\n",
       "   split3_test_score  ...  mean_test_score  std_test_score  rank_test_score  \\\n",
       "0           0.272466  ...         0.259158        0.007682                5   \n",
       "1           0.272466  ...         0.259158        0.007682                4   \n",
       "2           0.272465  ...         0.259159        0.007682                3   \n",
       "3           0.272455  ...         0.259164        0.007677                2   \n",
       "4           0.272355  ...         0.259212        0.007626                1   \n",
       "\n",
       "   split0_train_score  split1_train_score  split2_train_score  \\\n",
       "0            0.262969            0.261083            0.259914   \n",
       "1            0.262969            0.261083            0.259914   \n",
       "2            0.262969            0.261083            0.259914   \n",
       "3            0.262969            0.261083            0.259914   \n",
       "4            0.262966            0.261080            0.259910   \n",
       "\n",
       "   split3_train_score  split4_train_score  mean_train_score  std_train_score  \n",
       "0            0.257567            0.262849          0.260876          0.00201  \n",
       "1            0.257567            0.262849          0.260876          0.00201  \n",
       "2            0.257567            0.262849          0.260876          0.00201  \n",
       "3            0.257567            0.262849          0.260876          0.00201  \n",
       "4            0.257564            0.262846          0.260873          0.00201  \n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result_ridge = pd.DataFrame(grid_search_ridge.cv_results_)\n",
    "result_ridge"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1aa8a9cf108>]"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1aa8a9be4c8>]"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "([<matplotlib.axis.XTick at 0x1aa8a9dc748>,\n",
       "  <matplotlib.axis.XTick at 0x1aa8ab60d48>,\n",
       "  <matplotlib.axis.XTick at 0x1aa8ab65988>,\n",
       "  <matplotlib.axis.XTick at 0x1aa8ab9d088>,\n",
       "  <matplotlib.axis.XTick at 0x1aa8ab9c588>],\n",
       " <a list of 5 Text xticklabel objects>)"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1aa8ab7d848>]"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1aa8ad24b48>]"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1aa8ab7d488>"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'Alpha')"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "plt.plot(range(result_ridge.shape[0]), result_ridge['mean_train_score'], label = 'mean train score')\n",
    "plt.plot(range(result_ridge.shape[0]), result_ridge['mean_test_score'], label = 'mean test score')\n",
    "plt.xticks(range(result_ridge.shape[0]), result_ridge['param_alpha'], rotation = 90)\n",
    "plt.plot([grid_search_ridge.best_index_], result_ridge['mean_train_score'][grid_search_ridge.best_index_], 'o', markersize = 10, fillstyle = \"none\")\n",
    "plt.plot([grid_search_ridge.best_index_], result_ridge['mean_test_score'][grid_search_ridge.best_index_], 'o', markersize = 10, fillstyle = \"none\")\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.xlabel('Alpha')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Lasso Regression with PCA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [],
   "source": [
    "grid_parms_lasso = {'alpha': [0.01, 0.1, 1, 10,100]}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=5, error_score='raise-deprecating',\n",
       "             estimator=Lasso(alpha=1.0, copy_X=True, fit_intercept=True,\n",
       "                             max_iter=1000, normalize=False, positive=False,\n",
       "                             precompute=False, random_state=None,\n",
       "                             selection='cyclic', tol=0.0001, warm_start=False),\n",
       "             iid='warn', n_jobs=-1,\n",
       "             param_grid={'alpha': [0.01, 0.1, 1, 10, 100]},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=True,\n",
       "             scoring=None, verbose=0)"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best parameters: {'alpha': 0.01}\n",
      "Best cross-validation score: 0.2592\n"
     ]
    }
   ],
   "source": [
    "lasso = Lasso()\n",
    "grid_search_lasso = GridSearchCV(estimator = lasso,param_grid = grid_parms_lasso,return_train_score=True,n_jobs=-1,cv=5)\n",
    "grid_search_lasso.fit(X_train_pca, y_train)\n",
    "print(\"Best parameters: {}\".format(grid_search_lasso.best_params_))\n",
    "print(\"Best cross-validation score: {:.4f}\".format(grid_search_lasso.best_score_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Lasso(alpha=10, copy_X=True, fit_intercept=True, max_iter=1000, normalize=False,\n",
       "      positive=False, precompute=False, random_state=None, selection='cyclic',\n",
       "      tol=0.0001, warm_start=False)"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.2607978858056126\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.2518160707325561"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lass = Lasso(alpha = 10)\n",
    "lass.fit(X_train_pca, y_train)\n",
    "print(lass.score(X_train_pca, y_train))\n",
    "lass_test_score_ = lass.score(X_test_pca, y_test)\n",
    "lass_test_score_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cross-validation scores:\n",
      "[0.25454628 0.26443166 0.26193828 0.24951516 0.27443674 0.25090351]\n",
      "0.2592952724656722\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import KFold\n",
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "  \n",
    "kfold = KFold(n_splits=6)\n",
    "print(\"Cross-validation scores:\\n{}\".format(cross_val_score(lass , X_train_pca, y_train, cv=kfold)))\n",
    "scores = cross_val_score(lass , X_train_pca, y_train, cv=kfold)\n",
    "print(np.mean(scores))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean_fit_time</th>\n",
       "      <th>std_fit_time</th>\n",
       "      <th>mean_score_time</th>\n",
       "      <th>std_score_time</th>\n",
       "      <th>param_alpha</th>\n",
       "      <th>params</th>\n",
       "      <th>split0_test_score</th>\n",
       "      <th>split1_test_score</th>\n",
       "      <th>split2_test_score</th>\n",
       "      <th>split3_test_score</th>\n",
       "      <th>...</th>\n",
       "      <th>mean_test_score</th>\n",
       "      <th>std_test_score</th>\n",
       "      <th>rank_test_score</th>\n",
       "      <th>split0_train_score</th>\n",
       "      <th>split1_train_score</th>\n",
       "      <th>split2_train_score</th>\n",
       "      <th>split3_train_score</th>\n",
       "      <th>split4_train_score</th>\n",
       "      <th>mean_train_score</th>\n",
       "      <th>std_train_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0.022390</td>\n",
       "      <td>0.005984</td>\n",
       "      <td>0.001602</td>\n",
       "      <td>0.003203</td>\n",
       "      <td>0.01</td>\n",
       "      <td>{'alpha': 0.01}</td>\n",
       "      <td>0.251969</td>\n",
       "      <td>0.259516</td>\n",
       "      <td>0.260676</td>\n",
       "      <td>0.272466</td>\n",
       "      <td>...</td>\n",
       "      <td>0.259158</td>\n",
       "      <td>0.007682</td>\n",
       "      <td>1</td>\n",
       "      <td>0.262969</td>\n",
       "      <td>0.261083</td>\n",
       "      <td>0.259914</td>\n",
       "      <td>0.257567</td>\n",
       "      <td>0.262849</td>\n",
       "      <td>0.260876</td>\n",
       "      <td>0.00201</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0.020783</td>\n",
       "      <td>0.006398</td>\n",
       "      <td>0.003195</td>\n",
       "      <td>0.003913</td>\n",
       "      <td>0.1</td>\n",
       "      <td>{'alpha': 0.1}</td>\n",
       "      <td>0.251969</td>\n",
       "      <td>0.259516</td>\n",
       "      <td>0.260676</td>\n",
       "      <td>0.272466</td>\n",
       "      <td>...</td>\n",
       "      <td>0.259158</td>\n",
       "      <td>0.007682</td>\n",
       "      <td>2</td>\n",
       "      <td>0.262969</td>\n",
       "      <td>0.261083</td>\n",
       "      <td>0.259914</td>\n",
       "      <td>0.257567</td>\n",
       "      <td>0.262849</td>\n",
       "      <td>0.260876</td>\n",
       "      <td>0.00201</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0.019187</td>\n",
       "      <td>0.006396</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>{'alpha': 1}</td>\n",
       "      <td>0.251969</td>\n",
       "      <td>0.259516</td>\n",
       "      <td>0.260675</td>\n",
       "      <td>0.272465</td>\n",
       "      <td>...</td>\n",
       "      <td>0.259158</td>\n",
       "      <td>0.007682</td>\n",
       "      <td>3</td>\n",
       "      <td>0.262969</td>\n",
       "      <td>0.261083</td>\n",
       "      <td>0.259914</td>\n",
       "      <td>0.257567</td>\n",
       "      <td>0.262849</td>\n",
       "      <td>0.260876</td>\n",
       "      <td>0.00201</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0.018377</td>\n",
       "      <td>0.003510</td>\n",
       "      <td>0.001600</td>\n",
       "      <td>0.003201</td>\n",
       "      <td>10</td>\n",
       "      <td>{'alpha': 10}</td>\n",
       "      <td>0.251970</td>\n",
       "      <td>0.259516</td>\n",
       "      <td>0.260665</td>\n",
       "      <td>0.272464</td>\n",
       "      <td>...</td>\n",
       "      <td>0.259156</td>\n",
       "      <td>0.007681</td>\n",
       "      <td>4</td>\n",
       "      <td>0.262969</td>\n",
       "      <td>0.261083</td>\n",
       "      <td>0.259914</td>\n",
       "      <td>0.257567</td>\n",
       "      <td>0.262849</td>\n",
       "      <td>0.260876</td>\n",
       "      <td>0.00201</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0.014656</td>\n",
       "      <td>0.003371</td>\n",
       "      <td>0.003198</td>\n",
       "      <td>0.003916</td>\n",
       "      <td>100</td>\n",
       "      <td>{'alpha': 100}</td>\n",
       "      <td>0.251977</td>\n",
       "      <td>0.259516</td>\n",
       "      <td>0.260563</td>\n",
       "      <td>0.272447</td>\n",
       "      <td>...</td>\n",
       "      <td>0.259138</td>\n",
       "      <td>0.007666</td>\n",
       "      <td>5</td>\n",
       "      <td>0.262969</td>\n",
       "      <td>0.261083</td>\n",
       "      <td>0.259914</td>\n",
       "      <td>0.257567</td>\n",
       "      <td>0.262849</td>\n",
       "      <td>0.260876</td>\n",
       "      <td>0.00201</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   mean_fit_time  std_fit_time  mean_score_time  std_score_time param_alpha  \\\n",
       "0       0.022390      0.005984         0.001602        0.003203        0.01   \n",
       "1       0.020783      0.006398         0.003195        0.003913         0.1   \n",
       "2       0.019187      0.006396         0.000000        0.000000           1   \n",
       "3       0.018377      0.003510         0.001600        0.003201          10   \n",
       "4       0.014656      0.003371         0.003198        0.003916         100   \n",
       "\n",
       "            params  split0_test_score  split1_test_score  split2_test_score  \\\n",
       "0  {'alpha': 0.01}           0.251969           0.259516           0.260676   \n",
       "1   {'alpha': 0.1}           0.251969           0.259516           0.260676   \n",
       "2     {'alpha': 1}           0.251969           0.259516           0.260675   \n",
       "3    {'alpha': 10}           0.251970           0.259516           0.260665   \n",
       "4   {'alpha': 100}           0.251977           0.259516           0.260563   \n",
       "\n",
       "   split3_test_score  ...  mean_test_score  std_test_score  rank_test_score  \\\n",
       "0           0.272466  ...         0.259158        0.007682                1   \n",
       "1           0.272466  ...         0.259158        0.007682                2   \n",
       "2           0.272465  ...         0.259158        0.007682                3   \n",
       "3           0.272464  ...         0.259156        0.007681                4   \n",
       "4           0.272447  ...         0.259138        0.007666                5   \n",
       "\n",
       "   split0_train_score  split1_train_score  split2_train_score  \\\n",
       "0            0.262969            0.261083            0.259914   \n",
       "1            0.262969            0.261083            0.259914   \n",
       "2            0.262969            0.261083            0.259914   \n",
       "3            0.262969            0.261083            0.259914   \n",
       "4            0.262969            0.261083            0.259914   \n",
       "\n",
       "   split3_train_score  split4_train_score  mean_train_score  std_train_score  \n",
       "0            0.257567            0.262849          0.260876          0.00201  \n",
       "1            0.257567            0.262849          0.260876          0.00201  \n",
       "2            0.257567            0.262849          0.260876          0.00201  \n",
       "3            0.257567            0.262849          0.260876          0.00201  \n",
       "4            0.257567            0.262849          0.260876          0.00201  \n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result_lasso = pd.DataFrame(grid_search_lasso.cv_results_)\n",
    "result_lasso"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1aa8ad6f8c8>]"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1aa8ad8a548>]"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "([<matplotlib.axis.XTick at 0x1aa8ad5c588>,\n",
       "  <matplotlib.axis.XTick at 0x1aae8154d48>,\n",
       "  <matplotlib.axis.XTick at 0x1aa8ad3f088>,\n",
       "  <matplotlib.axis.XTick at 0x1aa8ada1348>,\n",
       "  <matplotlib.axis.XTick at 0x1aa8ada5388>],\n",
       " <a list of 5 Text xticklabel objects>)"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1aa8ad95e48>]"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1aa8ad66248>]"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1aa8ada5a48>"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'Alpha')"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "\n",
    "plt.plot(range(result_lasso.shape[0]), result_lasso['mean_train_score'], label = 'mean train score')\n",
    "plt.plot(range(result_lasso.shape[0]), result_lasso['mean_test_score'], label = 'mean test score')\n",
    "plt.xticks(range(result_lasso.shape[0]), result_lasso['param_alpha'], rotation = 90)\n",
    "plt.plot([grid_search_lasso.best_index_], result_lasso['mean_train_score'][grid_search_lasso.best_index_], 'o', markersize = 10, fillstyle = \"none\")\n",
    "plt.plot([grid_search_lasso.best_index_], result_lasso['mean_test_score'][grid_search_lasso.best_index_], 'o', markersize = 10, fillstyle = \"none\")\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.xlabel('Alpha')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Polynominal Regression with PCA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import PolynomialFeatures\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.pipeline import make_pipeline\n",
    "\n",
    "def PolynomialRegression(degree=2, **kwargs):\n",
    "    return make_pipeline(PolynomialFeatures(degree),\n",
    "                         LinearRegression(**kwargs))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [],
   "source": [
    "param_grid_poly = {'polynomialfeatures__degree': np.arange(3)}\n",
    "\n",
    "grid_poly = GridSearchCV(PolynomialRegression(), param_grid_poly,return_train_score=True,n_jobs=-1,cv=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=5, error_score='raise-deprecating',\n",
       "             estimator=Pipeline(memory=None,\n",
       "                                steps=[('polynomialfeatures',\n",
       "                                        PolynomialFeatures(degree=2,\n",
       "                                                           include_bias=True,\n",
       "                                                           interaction_only=False,\n",
       "                                                           order='C')),\n",
       "                                       ('linearregression',\n",
       "                                        LinearRegression(copy_X=True,\n",
       "                                                         fit_intercept=True,\n",
       "                                                         n_jobs=None,\n",
       "                                                         normalize=False))],\n",
       "                                verbose=False),\n",
       "             iid='warn', n_jobs=-1,\n",
       "             param_grid={'polynomialfeatures__degree': array([0, 1, 2])},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=True,\n",
       "             scoring=None, verbose=0)"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_poly.fit(X_train_pca, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best parameters: {'polynomialfeatures__degree': 1}\n",
      "Best cross-validation score: 0.2592\n"
     ]
    }
   ],
   "source": [
    "print(\"Best parameters: {}\".format(grid_poly.best_params_))\n",
    "print(\"Best cross-validation score: {:.4f}\".format(grid_poly.best_score_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.29892747287032895\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.2754586131476202"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pol = PolynomialFeatures(degree = 2)\n",
    "X_pol = pol.fit_transform(X_train_pca)\n",
    "Xt_pol = pol.fit_transform(X_test_pca)\n",
    "pol_reg = LinearRegression()\n",
    "pol_reg.fit(X_pol,y_train)\n",
    "print(pol_reg.score(X_pol, y_train))\n",
    "pol_reg_test_score = pol_reg.score(Xt_pol, y_test)\n",
    "pol_reg_test_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cross-validation scores:\n",
      "[ 0.2925224   0.2954371   0.29516082 -7.50595609  0.32201813  0.2575476 ]\n",
      "-1.0072116742119401\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import KFold\n",
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "  \n",
    "kfold = KFold(n_splits=6)\n",
    "print(\"Cross-validation scores:\\n{}\".format(cross_val_score(pol_reg , X_pol, y_train, cv=kfold)))\n",
    "scores = cross_val_score(pol_reg , X_pol, y_train, cv=kfold)\n",
    "print(np.mean(scores))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean_fit_time</th>\n",
       "      <th>std_fit_time</th>\n",
       "      <th>mean_score_time</th>\n",
       "      <th>std_score_time</th>\n",
       "      <th>param_polynomialfeatures__degree</th>\n",
       "      <th>params</th>\n",
       "      <th>split0_test_score</th>\n",
       "      <th>split1_test_score</th>\n",
       "      <th>split2_test_score</th>\n",
       "      <th>split3_test_score</th>\n",
       "      <th>...</th>\n",
       "      <th>mean_test_score</th>\n",
       "      <th>std_test_score</th>\n",
       "      <th>rank_test_score</th>\n",
       "      <th>split0_train_score</th>\n",
       "      <th>split1_train_score</th>\n",
       "      <th>split2_train_score</th>\n",
       "      <th>split3_train_score</th>\n",
       "      <th>split4_train_score</th>\n",
       "      <th>mean_train_score</th>\n",
       "      <th>std_train_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0.007969</td>\n",
       "      <td>0.000012</td>\n",
       "      <td>0.003197</td>\n",
       "      <td>0.003916</td>\n",
       "      <td>0</td>\n",
       "      <td>{'polynomialfeatures__degree': 0}</td>\n",
       "      <td>-0.000011</td>\n",
       "      <td>-0.000002</td>\n",
       "      <td>-0.000077</td>\n",
       "      <td>-0.000001</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000033</td>\n",
       "      <td>0.000034</td>\n",
       "      <td>2</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0.019307</td>\n",
       "      <td>0.001663</td>\n",
       "      <td>0.002396</td>\n",
       "      <td>0.001956</td>\n",
       "      <td>1</td>\n",
       "      <td>{'polynomialfeatures__degree': 1}</td>\n",
       "      <td>0.251969</td>\n",
       "      <td>0.259516</td>\n",
       "      <td>0.260676</td>\n",
       "      <td>0.272466</td>\n",
       "      <td>...</td>\n",
       "      <td>0.259158</td>\n",
       "      <td>0.007682</td>\n",
       "      <td>1</td>\n",
       "      <td>0.262969</td>\n",
       "      <td>0.261083</td>\n",
       "      <td>0.259914</td>\n",
       "      <td>0.257567</td>\n",
       "      <td>0.262849</td>\n",
       "      <td>0.260876</td>\n",
       "      <td>0.002010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0.079928</td>\n",
       "      <td>0.006483</td>\n",
       "      <td>0.007997</td>\n",
       "      <td>0.000003</td>\n",
       "      <td>2</td>\n",
       "      <td>{'polynomialfeatures__degree': 2}</td>\n",
       "      <td>0.284235</td>\n",
       "      <td>0.294664</td>\n",
       "      <td>-5.784058</td>\n",
       "      <td>0.309709</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.927657</td>\n",
       "      <td>2.428261</td>\n",
       "      <td>3</td>\n",
       "      <td>0.302174</td>\n",
       "      <td>0.299707</td>\n",
       "      <td>0.300194</td>\n",
       "      <td>0.294997</td>\n",
       "      <td>0.301857</td>\n",
       "      <td>0.299786</td>\n",
       "      <td>0.002573</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   mean_fit_time  std_fit_time  mean_score_time  std_score_time  \\\n",
       "0       0.007969      0.000012         0.003197        0.003916   \n",
       "1       0.019307      0.001663         0.002396        0.001956   \n",
       "2       0.079928      0.006483         0.007997        0.000003   \n",
       "\n",
       "  param_polynomialfeatures__degree                             params  \\\n",
       "0                                0  {'polynomialfeatures__degree': 0}   \n",
       "1                                1  {'polynomialfeatures__degree': 1}   \n",
       "2                                2  {'polynomialfeatures__degree': 2}   \n",
       "\n",
       "   split0_test_score  split1_test_score  split2_test_score  split3_test_score  \\\n",
       "0          -0.000011          -0.000002          -0.000077          -0.000001   \n",
       "1           0.251969           0.259516           0.260676           0.272466   \n",
       "2           0.284235           0.294664          -5.784058           0.309709   \n",
       "\n",
       "   ...  mean_test_score  std_test_score  rank_test_score  split0_train_score  \\\n",
       "0  ...        -0.000033        0.000034                2            0.000000   \n",
       "1  ...         0.259158        0.007682                1            0.262969   \n",
       "2  ...        -0.927657        2.428261                3            0.302174   \n",
       "\n",
       "   split1_train_score  split2_train_score  split3_train_score  \\\n",
       "0            0.000000            0.000000            0.000000   \n",
       "1            0.261083            0.259914            0.257567   \n",
       "2            0.299707            0.300194            0.294997   \n",
       "\n",
       "   split4_train_score  mean_train_score  std_train_score  \n",
       "0            0.000000          0.000000         0.000000  \n",
       "1            0.262849          0.260876         0.002010  \n",
       "2            0.301857          0.299786         0.002573  \n",
       "\n",
       "[3 rows x 21 columns]"
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result_poly = pd.DataFrame(grid_poly.cv_results_)\n",
    "result_poly"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1aa8adfa448>]"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1aa8ae06fc8>]"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "([<matplotlib.axis.XTick at 0x1aa8ade1088>,\n",
       "  <matplotlib.axis.XTick at 0x1aa8adfa848>,\n",
       "  <matplotlib.axis.XTick at 0x1aa8adfa948>],\n",
       " <a list of 3 Text xticklabel objects>)"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1aa8ae17748>]"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1aa8ae14948>]"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'Degree')"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1aa8ae17e88>"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(range(result_poly.shape[0]), result_poly['mean_train_score'], label = 'mean train score')\n",
    "plt.plot(range(result_poly.shape[0]), result_poly['mean_test_score'], label = 'mean test score')\n",
    "plt.xticks(range(result_poly.shape[0]), result_poly['param_polynomialfeatures__degree'], rotation = 90)\n",
    "plt.plot([grid_poly.best_index_], result_poly['mean_train_score'][grid_poly.best_index_], 'o', markersize = 10, fillstyle = \"none\")\n",
    "plt.plot([grid_poly.best_index_], result_poly['mean_test_score'][grid_poly.best_index_], 'o', markersize = 10, fillstyle = \"none\")\n",
    "plt.grid()\n",
    "plt.xlabel('Degree')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Linear (Simple) SVR with PCA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [],
   "source": [
    "grid_parms_svrl = {'C': [0.01, 0.1, 1, 10, 100], 'epsilon' : [0.01, 0.1, 1, 10, 100]}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [],
   "source": [
    "linearsvr = LinearSVR()\n",
    "grid_svrl = GridSearchCV(estimator = linearsvr,param_grid = grid_parms_svrl,return_train_score=True,n_jobs= -1,cv=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=10, error_score='raise-deprecating',\n",
       "             estimator=LinearSVR(C=1.0, dual=True, epsilon=0.0,\n",
       "                                 fit_intercept=True, intercept_scaling=1.0,\n",
       "                                 loss='epsilon_insensitive', max_iter=1000,\n",
       "                                 random_state=None, tol=0.0001, verbose=0),\n",
       "             iid='warn', n_jobs=-1,\n",
       "             param_grid={'C': [0.01, 0.1, 1, 10, 100],\n",
       "                         'epsilon': [0.01, 0.1, 1, 10, 100]},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=True,\n",
       "             scoring=None, verbose=0)"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_svrl.fit(X_train_pca,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best parameters: {'C': 100, 'epsilon': 10}\n",
      "Best cross-validation score: 0.0419\n"
     ]
    }
   ],
   "source": [
    "print(\"Best parameters: {}\".format(grid_svrl.best_params_))\n",
    "print(\"Best cross-validation score: {:.4f}\".format(grid_svrl.best_score_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearSVR(C=100, dual=True, epsilon=1, fit_intercept=True,\n",
       "          intercept_scaling=1.0, loss='epsilon_insensitive', max_iter=1000,\n",
       "          random_state=None, tol=0.0001, verbose=0)"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.05993413577992057\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.06594391940776168"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lsvr = LinearSVR(C = 100, epsilon = 1)\n",
    "        \n",
    "lsvr.fit(X_train_pca, y_train)\n",
    "\n",
    "print(lsvr.score(X_train_pca, y_train))\n",
    "lsvr_test_score = lsvr.score(X_test_pca, y_test)\n",
    "lsvr_test_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cross-validation scores:\n",
      "[0.05015106 0.01997377 0.04969704 0.02767005 0.04460644 0.03665919\n",
      " 0.04132237 0.0698792  0.04649309 0.02807198]\n",
      "0.04169576918768101\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import KFold\n",
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "  \n",
    "kfold = KFold(n_splits=10)\n",
    "print(\"Cross-validation scores:\\n{}\".format(cross_val_score(lsvr , X_train_pca, y_train, cv=kfold)))\n",
    "scores = cross_val_score(lsvr, X_train_pca, y_train, cv=kfold)\n",
    "print(np.mean(scores))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean_fit_time</th>\n",
       "      <th>std_fit_time</th>\n",
       "      <th>mean_score_time</th>\n",
       "      <th>std_score_time</th>\n",
       "      <th>param_C</th>\n",
       "      <th>param_epsilon</th>\n",
       "      <th>params</th>\n",
       "      <th>split0_test_score</th>\n",
       "      <th>split1_test_score</th>\n",
       "      <th>split2_test_score</th>\n",
       "      <th>...</th>\n",
       "      <th>split2_train_score</th>\n",
       "      <th>split3_train_score</th>\n",
       "      <th>split4_train_score</th>\n",
       "      <th>split5_train_score</th>\n",
       "      <th>split6_train_score</th>\n",
       "      <th>split7_train_score</th>\n",
       "      <th>split8_train_score</th>\n",
       "      <th>split9_train_score</th>\n",
       "      <th>mean_train_score</th>\n",
       "      <th>std_train_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0.031978</td>\n",
       "      <td>0.003575</td>\n",
       "      <td>0.002398</td>\n",
       "      <td>0.003663</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>{'C': 0.01, 'epsilon': 0.01}</td>\n",
       "      <td>-3.577183</td>\n",
       "      <td>-3.255043</td>\n",
       "      <td>-3.587038</td>\n",
       "      <td>...</td>\n",
       "      <td>-3.361264</td>\n",
       "      <td>-3.394571</td>\n",
       "      <td>-3.373516</td>\n",
       "      <td>-3.402908</td>\n",
       "      <td>-3.420281</td>\n",
       "      <td>-3.389243</td>\n",
       "      <td>-3.362793</td>\n",
       "      <td>-3.361423</td>\n",
       "      <td>-3.382717</td>\n",
       "      <td>0.020023</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0.022780</td>\n",
       "      <td>0.005949</td>\n",
       "      <td>0.000799</td>\n",
       "      <td>0.002398</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.1</td>\n",
       "      <td>{'C': 0.01, 'epsilon': 0.1}</td>\n",
       "      <td>-3.577183</td>\n",
       "      <td>-3.255043</td>\n",
       "      <td>-3.587038</td>\n",
       "      <td>...</td>\n",
       "      <td>-3.361264</td>\n",
       "      <td>-3.394571</td>\n",
       "      <td>-3.373516</td>\n",
       "      <td>-3.402908</td>\n",
       "      <td>-3.420281</td>\n",
       "      <td>-3.389243</td>\n",
       "      <td>-3.362793</td>\n",
       "      <td>-3.361423</td>\n",
       "      <td>-3.382717</td>\n",
       "      <td>0.020023</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0.026517</td>\n",
       "      <td>0.004724</td>\n",
       "      <td>0.001999</td>\n",
       "      <td>0.003223</td>\n",
       "      <td>0.01</td>\n",
       "      <td>1</td>\n",
       "      <td>{'C': 0.01, 'epsilon': 1}</td>\n",
       "      <td>-3.577183</td>\n",
       "      <td>-3.255043</td>\n",
       "      <td>-3.587038</td>\n",
       "      <td>...</td>\n",
       "      <td>-3.361264</td>\n",
       "      <td>-3.394571</td>\n",
       "      <td>-3.373516</td>\n",
       "      <td>-3.402908</td>\n",
       "      <td>-3.420281</td>\n",
       "      <td>-3.389243</td>\n",
       "      <td>-3.362793</td>\n",
       "      <td>-3.361423</td>\n",
       "      <td>-3.382717</td>\n",
       "      <td>0.020023</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0.028721</td>\n",
       "      <td>0.003504</td>\n",
       "      <td>0.001850</td>\n",
       "      <td>0.002966</td>\n",
       "      <td>0.01</td>\n",
       "      <td>10</td>\n",
       "      <td>{'C': 0.01, 'epsilon': 10}</td>\n",
       "      <td>-3.577183</td>\n",
       "      <td>-3.255043</td>\n",
       "      <td>-3.587038</td>\n",
       "      <td>...</td>\n",
       "      <td>-3.361264</td>\n",
       "      <td>-3.394571</td>\n",
       "      <td>-3.373516</td>\n",
       "      <td>-3.402908</td>\n",
       "      <td>-3.420281</td>\n",
       "      <td>-3.389243</td>\n",
       "      <td>-3.362793</td>\n",
       "      <td>-3.361423</td>\n",
       "      <td>-3.382717</td>\n",
       "      <td>0.020023</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0.030549</td>\n",
       "      <td>0.006728</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.01</td>\n",
       "      <td>100</td>\n",
       "      <td>{'C': 0.01, 'epsilon': 100}</td>\n",
       "      <td>-3.577183</td>\n",
       "      <td>-3.255043</td>\n",
       "      <td>-3.587038</td>\n",
       "      <td>...</td>\n",
       "      <td>-3.361264</td>\n",
       "      <td>-3.394571</td>\n",
       "      <td>-3.373516</td>\n",
       "      <td>-3.402908</td>\n",
       "      <td>-3.420281</td>\n",
       "      <td>-3.389243</td>\n",
       "      <td>-3.362793</td>\n",
       "      <td>-3.361423</td>\n",
       "      <td>-3.382717</td>\n",
       "      <td>0.020023</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>0.034823</td>\n",
       "      <td>0.006655</td>\n",
       "      <td>0.001599</td>\n",
       "      <td>0.003198</td>\n",
       "      <td>0.1</td>\n",
       "      <td>0.01</td>\n",
       "      <td>{'C': 0.1, 'epsilon': 0.01}</td>\n",
       "      <td>-3.562565</td>\n",
       "      <td>-3.242106</td>\n",
       "      <td>-3.572624</td>\n",
       "      <td>...</td>\n",
       "      <td>-3.347752</td>\n",
       "      <td>-3.380918</td>\n",
       "      <td>-3.359936</td>\n",
       "      <td>-3.389226</td>\n",
       "      <td>-3.406503</td>\n",
       "      <td>-3.375633</td>\n",
       "      <td>-3.349279</td>\n",
       "      <td>-3.347917</td>\n",
       "      <td>-3.369113</td>\n",
       "      <td>0.019937</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>0.032924</td>\n",
       "      <td>0.003850</td>\n",
       "      <td>0.002399</td>\n",
       "      <td>0.003664</td>\n",
       "      <td>0.1</td>\n",
       "      <td>0.1</td>\n",
       "      <td>{'C': 0.1, 'epsilon': 0.1}</td>\n",
       "      <td>-3.562565</td>\n",
       "      <td>-3.242106</td>\n",
       "      <td>-3.572624</td>\n",
       "      <td>...</td>\n",
       "      <td>-3.347752</td>\n",
       "      <td>-3.380918</td>\n",
       "      <td>-3.359936</td>\n",
       "      <td>-3.389226</td>\n",
       "      <td>-3.406503</td>\n",
       "      <td>-3.375633</td>\n",
       "      <td>-3.349279</td>\n",
       "      <td>-3.347917</td>\n",
       "      <td>-3.369113</td>\n",
       "      <td>0.019937</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>0.034904</td>\n",
       "      <td>0.005273</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.1</td>\n",
       "      <td>1</td>\n",
       "      <td>{'C': 0.1, 'epsilon': 1}</td>\n",
       "      <td>-3.562565</td>\n",
       "      <td>-3.242106</td>\n",
       "      <td>-3.572624</td>\n",
       "      <td>...</td>\n",
       "      <td>-3.347752</td>\n",
       "      <td>-3.380918</td>\n",
       "      <td>-3.359936</td>\n",
       "      <td>-3.389226</td>\n",
       "      <td>-3.406503</td>\n",
       "      <td>-3.375633</td>\n",
       "      <td>-3.349279</td>\n",
       "      <td>-3.347917</td>\n",
       "      <td>-3.369113</td>\n",
       "      <td>0.019937</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>0.037576</td>\n",
       "      <td>0.006243</td>\n",
       "      <td>0.001599</td>\n",
       "      <td>0.003198</td>\n",
       "      <td>0.1</td>\n",
       "      <td>10</td>\n",
       "      <td>{'C': 0.1, 'epsilon': 10}</td>\n",
       "      <td>-3.562565</td>\n",
       "      <td>-3.242106</td>\n",
       "      <td>-3.572624</td>\n",
       "      <td>...</td>\n",
       "      <td>-3.347752</td>\n",
       "      <td>-3.380918</td>\n",
       "      <td>-3.359936</td>\n",
       "      <td>-3.389226</td>\n",
       "      <td>-3.406503</td>\n",
       "      <td>-3.375633</td>\n",
       "      <td>-3.349279</td>\n",
       "      <td>-3.347917</td>\n",
       "      <td>-3.369113</td>\n",
       "      <td>0.019937</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>0.036774</td>\n",
       "      <td>0.005304</td>\n",
       "      <td>0.003198</td>\n",
       "      <td>0.003917</td>\n",
       "      <td>0.1</td>\n",
       "      <td>100</td>\n",
       "      <td>{'C': 0.1, 'epsilon': 100}</td>\n",
       "      <td>-3.562565</td>\n",
       "      <td>-3.242106</td>\n",
       "      <td>-3.572624</td>\n",
       "      <td>...</td>\n",
       "      <td>-3.347752</td>\n",
       "      <td>-3.380918</td>\n",
       "      <td>-3.359936</td>\n",
       "      <td>-3.389226</td>\n",
       "      <td>-3.406503</td>\n",
       "      <td>-3.375633</td>\n",
       "      <td>-3.349279</td>\n",
       "      <td>-3.347917</td>\n",
       "      <td>-3.369113</td>\n",
       "      <td>0.019937</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>0.039174</td>\n",
       "      <td>0.004305</td>\n",
       "      <td>0.004797</td>\n",
       "      <td>0.003917</td>\n",
       "      <td>1</td>\n",
       "      <td>0.01</td>\n",
       "      <td>{'C': 1, 'epsilon': 0.01}</td>\n",
       "      <td>-3.418026</td>\n",
       "      <td>-3.114156</td>\n",
       "      <td>-3.430078</td>\n",
       "      <td>...</td>\n",
       "      <td>-3.214138</td>\n",
       "      <td>-3.245895</td>\n",
       "      <td>-3.225637</td>\n",
       "      <td>-3.253925</td>\n",
       "      <td>-3.270260</td>\n",
       "      <td>-3.241038</td>\n",
       "      <td>-3.215626</td>\n",
       "      <td>-3.214350</td>\n",
       "      <td>-3.234573</td>\n",
       "      <td>0.019088</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11</td>\n",
       "      <td>0.038375</td>\n",
       "      <td>0.005983</td>\n",
       "      <td>0.000799</td>\n",
       "      <td>0.002398</td>\n",
       "      <td>1</td>\n",
       "      <td>0.1</td>\n",
       "      <td>{'C': 1, 'epsilon': 0.1}</td>\n",
       "      <td>-3.418026</td>\n",
       "      <td>-3.114156</td>\n",
       "      <td>-3.430078</td>\n",
       "      <td>...</td>\n",
       "      <td>-3.214138</td>\n",
       "      <td>-3.245895</td>\n",
       "      <td>-3.225637</td>\n",
       "      <td>-3.253925</td>\n",
       "      <td>-3.270260</td>\n",
       "      <td>-3.241038</td>\n",
       "      <td>-3.215626</td>\n",
       "      <td>-3.214350</td>\n",
       "      <td>-3.234573</td>\n",
       "      <td>0.019088</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>12</td>\n",
       "      <td>0.037575</td>\n",
       "      <td>0.003665</td>\n",
       "      <td>0.003198</td>\n",
       "      <td>0.003917</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>{'C': 1, 'epsilon': 1}</td>\n",
       "      <td>-3.418026</td>\n",
       "      <td>-3.114156</td>\n",
       "      <td>-3.430078</td>\n",
       "      <td>...</td>\n",
       "      <td>-3.214138</td>\n",
       "      <td>-3.245895</td>\n",
       "      <td>-3.225637</td>\n",
       "      <td>-3.253925</td>\n",
       "      <td>-3.270260</td>\n",
       "      <td>-3.241038</td>\n",
       "      <td>-3.215626</td>\n",
       "      <td>-3.214350</td>\n",
       "      <td>-3.234573</td>\n",
       "      <td>0.019088</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>13</td>\n",
       "      <td>0.035177</td>\n",
       "      <td>0.003916</td>\n",
       "      <td>0.003997</td>\n",
       "      <td>0.003997</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>{'C': 1, 'epsilon': 10}</td>\n",
       "      <td>-3.418026</td>\n",
       "      <td>-3.114156</td>\n",
       "      <td>-3.430078</td>\n",
       "      <td>...</td>\n",
       "      <td>-3.214138</td>\n",
       "      <td>-3.245895</td>\n",
       "      <td>-3.225637</td>\n",
       "      <td>-3.253925</td>\n",
       "      <td>-3.270260</td>\n",
       "      <td>-3.241038</td>\n",
       "      <td>-3.215626</td>\n",
       "      <td>-3.214350</td>\n",
       "      <td>-3.234573</td>\n",
       "      <td>0.019088</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>14</td>\n",
       "      <td>0.034376</td>\n",
       "      <td>0.003663</td>\n",
       "      <td>0.002399</td>\n",
       "      <td>0.003664</td>\n",
       "      <td>1</td>\n",
       "      <td>100</td>\n",
       "      <td>{'C': 1, 'epsilon': 100}</td>\n",
       "      <td>-3.418026</td>\n",
       "      <td>-3.114156</td>\n",
       "      <td>-3.430078</td>\n",
       "      <td>...</td>\n",
       "      <td>-3.214138</td>\n",
       "      <td>-3.245895</td>\n",
       "      <td>-3.225637</td>\n",
       "      <td>-3.253925</td>\n",
       "      <td>-3.270260</td>\n",
       "      <td>-3.241038</td>\n",
       "      <td>-3.215626</td>\n",
       "      <td>-3.214350</td>\n",
       "      <td>-3.234573</td>\n",
       "      <td>0.019088</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>15</td>\n",
       "      <td>0.036776</td>\n",
       "      <td>0.007328</td>\n",
       "      <td>0.002398</td>\n",
       "      <td>0.003664</td>\n",
       "      <td>10</td>\n",
       "      <td>0.01</td>\n",
       "      <td>{'C': 10, 'epsilon': 0.01}</td>\n",
       "      <td>-2.136011</td>\n",
       "      <td>-1.975928</td>\n",
       "      <td>-2.163506</td>\n",
       "      <td>...</td>\n",
       "      <td>-2.027149</td>\n",
       "      <td>-2.046425</td>\n",
       "      <td>-2.032428</td>\n",
       "      <td>-2.052122</td>\n",
       "      <td>-2.060103</td>\n",
       "      <td>-2.045211</td>\n",
       "      <td>-2.027953</td>\n",
       "      <td>-2.027992</td>\n",
       "      <td>-2.039297</td>\n",
       "      <td>0.011785</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>16</td>\n",
       "      <td>0.039973</td>\n",
       "      <td>0.008758</td>\n",
       "      <td>0.000799</td>\n",
       "      <td>0.002398</td>\n",
       "      <td>10</td>\n",
       "      <td>0.1</td>\n",
       "      <td>{'C': 10, 'epsilon': 0.1}</td>\n",
       "      <td>-2.136011</td>\n",
       "      <td>-1.975928</td>\n",
       "      <td>-2.163506</td>\n",
       "      <td>...</td>\n",
       "      <td>-2.027149</td>\n",
       "      <td>-2.046425</td>\n",
       "      <td>-2.032428</td>\n",
       "      <td>-2.052122</td>\n",
       "      <td>-2.060103</td>\n",
       "      <td>-2.045211</td>\n",
       "      <td>-2.027953</td>\n",
       "      <td>-2.027992</td>\n",
       "      <td>-2.039297</td>\n",
       "      <td>0.011785</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>17</td>\n",
       "      <td>0.035976</td>\n",
       "      <td>0.003998</td>\n",
       "      <td>0.000800</td>\n",
       "      <td>0.002399</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>{'C': 10, 'epsilon': 1}</td>\n",
       "      <td>-2.136011</td>\n",
       "      <td>-1.975928</td>\n",
       "      <td>-2.163506</td>\n",
       "      <td>...</td>\n",
       "      <td>-2.027149</td>\n",
       "      <td>-2.046425</td>\n",
       "      <td>-2.032428</td>\n",
       "      <td>-2.052122</td>\n",
       "      <td>-2.060103</td>\n",
       "      <td>-2.045211</td>\n",
       "      <td>-2.027953</td>\n",
       "      <td>-2.027992</td>\n",
       "      <td>-2.039297</td>\n",
       "      <td>0.011785</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>18</td>\n",
       "      <td>0.034377</td>\n",
       "      <td>0.003664</td>\n",
       "      <td>0.002399</td>\n",
       "      <td>0.003664</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>{'C': 10, 'epsilon': 10}</td>\n",
       "      <td>-2.136011</td>\n",
       "      <td>-1.975928</td>\n",
       "      <td>-2.163506</td>\n",
       "      <td>...</td>\n",
       "      <td>-2.027149</td>\n",
       "      <td>-2.046425</td>\n",
       "      <td>-2.032428</td>\n",
       "      <td>-2.052122</td>\n",
       "      <td>-2.060103</td>\n",
       "      <td>-2.045211</td>\n",
       "      <td>-2.027953</td>\n",
       "      <td>-2.027992</td>\n",
       "      <td>-2.039297</td>\n",
       "      <td>0.011785</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>19</td>\n",
       "      <td>0.032778</td>\n",
       "      <td>0.005596</td>\n",
       "      <td>0.001599</td>\n",
       "      <td>0.003197</td>\n",
       "      <td>10</td>\n",
       "      <td>100</td>\n",
       "      <td>{'C': 10, 'epsilon': 100}</td>\n",
       "      <td>-2.136011</td>\n",
       "      <td>-1.975928</td>\n",
       "      <td>-2.163506</td>\n",
       "      <td>...</td>\n",
       "      <td>-2.027149</td>\n",
       "      <td>-2.046425</td>\n",
       "      <td>-2.032428</td>\n",
       "      <td>-2.052122</td>\n",
       "      <td>-2.060103</td>\n",
       "      <td>-2.045211</td>\n",
       "      <td>-2.027953</td>\n",
       "      <td>-2.027992</td>\n",
       "      <td>-2.039297</td>\n",
       "      <td>0.011785</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>20</td>\n",
       "      <td>0.053255</td>\n",
       "      <td>0.006205</td>\n",
       "      <td>0.001801</td>\n",
       "      <td>0.003153</td>\n",
       "      <td>100</td>\n",
       "      <td>0.01</td>\n",
       "      <td>{'C': 100, 'epsilon': 0.01}</td>\n",
       "      <td>0.050406</td>\n",
       "      <td>0.019113</td>\n",
       "      <td>0.050809</td>\n",
       "      <td>...</td>\n",
       "      <td>0.042338</td>\n",
       "      <td>0.042309</td>\n",
       "      <td>0.041117</td>\n",
       "      <td>0.041583</td>\n",
       "      <td>0.039794</td>\n",
       "      <td>0.041236</td>\n",
       "      <td>0.041362</td>\n",
       "      <td>0.040595</td>\n",
       "      <td>0.041582</td>\n",
       "      <td>0.001045</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>21</td>\n",
       "      <td>0.051606</td>\n",
       "      <td>0.005674</td>\n",
       "      <td>0.001598</td>\n",
       "      <td>0.003196</td>\n",
       "      <td>100</td>\n",
       "      <td>0.1</td>\n",
       "      <td>{'C': 100, 'epsilon': 0.1}</td>\n",
       "      <td>0.050528</td>\n",
       "      <td>0.018880</td>\n",
       "      <td>0.049741</td>\n",
       "      <td>...</td>\n",
       "      <td>0.041317</td>\n",
       "      <td>0.041367</td>\n",
       "      <td>0.040610</td>\n",
       "      <td>0.041474</td>\n",
       "      <td>0.039685</td>\n",
       "      <td>0.041991</td>\n",
       "      <td>0.040949</td>\n",
       "      <td>0.041271</td>\n",
       "      <td>0.041410</td>\n",
       "      <td>0.000964</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>22</td>\n",
       "      <td>0.050295</td>\n",
       "      <td>0.003847</td>\n",
       "      <td>0.001027</td>\n",
       "      <td>0.002424</td>\n",
       "      <td>100</td>\n",
       "      <td>1</td>\n",
       "      <td>{'C': 100, 'epsilon': 1}</td>\n",
       "      <td>0.049918</td>\n",
       "      <td>0.018585</td>\n",
       "      <td>0.050437</td>\n",
       "      <td>...</td>\n",
       "      <td>0.042005</td>\n",
       "      <td>0.041836</td>\n",
       "      <td>0.041588</td>\n",
       "      <td>0.041859</td>\n",
       "      <td>0.039839</td>\n",
       "      <td>0.040816</td>\n",
       "      <td>0.041526</td>\n",
       "      <td>0.041681</td>\n",
       "      <td>0.041581</td>\n",
       "      <td>0.000865</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>23</td>\n",
       "      <td>0.044744</td>\n",
       "      <td>0.007028</td>\n",
       "      <td>0.003595</td>\n",
       "      <td>0.003769</td>\n",
       "      <td>100</td>\n",
       "      <td>10</td>\n",
       "      <td>{'C': 100, 'epsilon': 10}</td>\n",
       "      <td>0.049954</td>\n",
       "      <td>0.020467</td>\n",
       "      <td>0.049740</td>\n",
       "      <td>...</td>\n",
       "      <td>0.041329</td>\n",
       "      <td>0.042228</td>\n",
       "      <td>0.041365</td>\n",
       "      <td>0.041664</td>\n",
       "      <td>0.040738</td>\n",
       "      <td>0.042339</td>\n",
       "      <td>0.041906</td>\n",
       "      <td>0.042198</td>\n",
       "      <td>0.042026</td>\n",
       "      <td>0.001196</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>24</td>\n",
       "      <td>0.043428</td>\n",
       "      <td>0.013119</td>\n",
       "      <td>0.002789</td>\n",
       "      <td>0.003610</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>{'C': 100, 'epsilon': 100}</td>\n",
       "      <td>0.049791</td>\n",
       "      <td>0.018837</td>\n",
       "      <td>0.051332</td>\n",
       "      <td>...</td>\n",
       "      <td>0.042840</td>\n",
       "      <td>0.042466</td>\n",
       "      <td>0.040812</td>\n",
       "      <td>0.042136</td>\n",
       "      <td>0.040495</td>\n",
       "      <td>0.041314</td>\n",
       "      <td>0.041528</td>\n",
       "      <td>0.041404</td>\n",
       "      <td>0.041766</td>\n",
       "      <td>0.000927</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>25 rows × 32 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    mean_fit_time  std_fit_time  mean_score_time  std_score_time param_C  \\\n",
       "0        0.031978      0.003575         0.002398        0.003663    0.01   \n",
       "1        0.022780      0.005949         0.000799        0.002398    0.01   \n",
       "2        0.026517      0.004724         0.001999        0.003223    0.01   \n",
       "3        0.028721      0.003504         0.001850        0.002966    0.01   \n",
       "4        0.030549      0.006728         0.000000        0.000000    0.01   \n",
       "5        0.034823      0.006655         0.001599        0.003198     0.1   \n",
       "6        0.032924      0.003850         0.002399        0.003664     0.1   \n",
       "7        0.034904      0.005273         0.000000        0.000000     0.1   \n",
       "8        0.037576      0.006243         0.001599        0.003198     0.1   \n",
       "9        0.036774      0.005304         0.003198        0.003917     0.1   \n",
       "10       0.039174      0.004305         0.004797        0.003917       1   \n",
       "11       0.038375      0.005983         0.000799        0.002398       1   \n",
       "12       0.037575      0.003665         0.003198        0.003917       1   \n",
       "13       0.035177      0.003916         0.003997        0.003997       1   \n",
       "14       0.034376      0.003663         0.002399        0.003664       1   \n",
       "15       0.036776      0.007328         0.002398        0.003664      10   \n",
       "16       0.039973      0.008758         0.000799        0.002398      10   \n",
       "17       0.035976      0.003998         0.000800        0.002399      10   \n",
       "18       0.034377      0.003664         0.002399        0.003664      10   \n",
       "19       0.032778      0.005596         0.001599        0.003197      10   \n",
       "20       0.053255      0.006205         0.001801        0.003153     100   \n",
       "21       0.051606      0.005674         0.001598        0.003196     100   \n",
       "22       0.050295      0.003847         0.001027        0.002424     100   \n",
       "23       0.044744      0.007028         0.003595        0.003769     100   \n",
       "24       0.043428      0.013119         0.002789        0.003610     100   \n",
       "\n",
       "   param_epsilon                        params  split0_test_score  \\\n",
       "0           0.01  {'C': 0.01, 'epsilon': 0.01}          -3.577183   \n",
       "1            0.1   {'C': 0.01, 'epsilon': 0.1}          -3.577183   \n",
       "2              1     {'C': 0.01, 'epsilon': 1}          -3.577183   \n",
       "3             10    {'C': 0.01, 'epsilon': 10}          -3.577183   \n",
       "4            100   {'C': 0.01, 'epsilon': 100}          -3.577183   \n",
       "5           0.01   {'C': 0.1, 'epsilon': 0.01}          -3.562565   \n",
       "6            0.1    {'C': 0.1, 'epsilon': 0.1}          -3.562565   \n",
       "7              1      {'C': 0.1, 'epsilon': 1}          -3.562565   \n",
       "8             10     {'C': 0.1, 'epsilon': 10}          -3.562565   \n",
       "9            100    {'C': 0.1, 'epsilon': 100}          -3.562565   \n",
       "10          0.01     {'C': 1, 'epsilon': 0.01}          -3.418026   \n",
       "11           0.1      {'C': 1, 'epsilon': 0.1}          -3.418026   \n",
       "12             1        {'C': 1, 'epsilon': 1}          -3.418026   \n",
       "13            10       {'C': 1, 'epsilon': 10}          -3.418026   \n",
       "14           100      {'C': 1, 'epsilon': 100}          -3.418026   \n",
       "15          0.01    {'C': 10, 'epsilon': 0.01}          -2.136011   \n",
       "16           0.1     {'C': 10, 'epsilon': 0.1}          -2.136011   \n",
       "17             1       {'C': 10, 'epsilon': 1}          -2.136011   \n",
       "18            10      {'C': 10, 'epsilon': 10}          -2.136011   \n",
       "19           100     {'C': 10, 'epsilon': 100}          -2.136011   \n",
       "20          0.01   {'C': 100, 'epsilon': 0.01}           0.050406   \n",
       "21           0.1    {'C': 100, 'epsilon': 0.1}           0.050528   \n",
       "22             1      {'C': 100, 'epsilon': 1}           0.049918   \n",
       "23            10     {'C': 100, 'epsilon': 10}           0.049954   \n",
       "24           100    {'C': 100, 'epsilon': 100}           0.049791   \n",
       "\n",
       "    split1_test_score  split2_test_score  ...  split2_train_score  \\\n",
       "0           -3.255043          -3.587038  ...           -3.361264   \n",
       "1           -3.255043          -3.587038  ...           -3.361264   \n",
       "2           -3.255043          -3.587038  ...           -3.361264   \n",
       "3           -3.255043          -3.587038  ...           -3.361264   \n",
       "4           -3.255043          -3.587038  ...           -3.361264   \n",
       "5           -3.242106          -3.572624  ...           -3.347752   \n",
       "6           -3.242106          -3.572624  ...           -3.347752   \n",
       "7           -3.242106          -3.572624  ...           -3.347752   \n",
       "8           -3.242106          -3.572624  ...           -3.347752   \n",
       "9           -3.242106          -3.572624  ...           -3.347752   \n",
       "10          -3.114156          -3.430078  ...           -3.214138   \n",
       "11          -3.114156          -3.430078  ...           -3.214138   \n",
       "12          -3.114156          -3.430078  ...           -3.214138   \n",
       "13          -3.114156          -3.430078  ...           -3.214138   \n",
       "14          -3.114156          -3.430078  ...           -3.214138   \n",
       "15          -1.975928          -2.163506  ...           -2.027149   \n",
       "16          -1.975928          -2.163506  ...           -2.027149   \n",
       "17          -1.975928          -2.163506  ...           -2.027149   \n",
       "18          -1.975928          -2.163506  ...           -2.027149   \n",
       "19          -1.975928          -2.163506  ...           -2.027149   \n",
       "20           0.019113           0.050809  ...            0.042338   \n",
       "21           0.018880           0.049741  ...            0.041317   \n",
       "22           0.018585           0.050437  ...            0.042005   \n",
       "23           0.020467           0.049740  ...            0.041329   \n",
       "24           0.018837           0.051332  ...            0.042840   \n",
       "\n",
       "    split3_train_score  split4_train_score  split5_train_score  \\\n",
       "0            -3.394571           -3.373516           -3.402908   \n",
       "1            -3.394571           -3.373516           -3.402908   \n",
       "2            -3.394571           -3.373516           -3.402908   \n",
       "3            -3.394571           -3.373516           -3.402908   \n",
       "4            -3.394571           -3.373516           -3.402908   \n",
       "5            -3.380918           -3.359936           -3.389226   \n",
       "6            -3.380918           -3.359936           -3.389226   \n",
       "7            -3.380918           -3.359936           -3.389226   \n",
       "8            -3.380918           -3.359936           -3.389226   \n",
       "9            -3.380918           -3.359936           -3.389226   \n",
       "10           -3.245895           -3.225637           -3.253925   \n",
       "11           -3.245895           -3.225637           -3.253925   \n",
       "12           -3.245895           -3.225637           -3.253925   \n",
       "13           -3.245895           -3.225637           -3.253925   \n",
       "14           -3.245895           -3.225637           -3.253925   \n",
       "15           -2.046425           -2.032428           -2.052122   \n",
       "16           -2.046425           -2.032428           -2.052122   \n",
       "17           -2.046425           -2.032428           -2.052122   \n",
       "18           -2.046425           -2.032428           -2.052122   \n",
       "19           -2.046425           -2.032428           -2.052122   \n",
       "20            0.042309            0.041117            0.041583   \n",
       "21            0.041367            0.040610            0.041474   \n",
       "22            0.041836            0.041588            0.041859   \n",
       "23            0.042228            0.041365            0.041664   \n",
       "24            0.042466            0.040812            0.042136   \n",
       "\n",
       "    split6_train_score  split7_train_score  split8_train_score  \\\n",
       "0            -3.420281           -3.389243           -3.362793   \n",
       "1            -3.420281           -3.389243           -3.362793   \n",
       "2            -3.420281           -3.389243           -3.362793   \n",
       "3            -3.420281           -3.389243           -3.362793   \n",
       "4            -3.420281           -3.389243           -3.362793   \n",
       "5            -3.406503           -3.375633           -3.349279   \n",
       "6            -3.406503           -3.375633           -3.349279   \n",
       "7            -3.406503           -3.375633           -3.349279   \n",
       "8            -3.406503           -3.375633           -3.349279   \n",
       "9            -3.406503           -3.375633           -3.349279   \n",
       "10           -3.270260           -3.241038           -3.215626   \n",
       "11           -3.270260           -3.241038           -3.215626   \n",
       "12           -3.270260           -3.241038           -3.215626   \n",
       "13           -3.270260           -3.241038           -3.215626   \n",
       "14           -3.270260           -3.241038           -3.215626   \n",
       "15           -2.060103           -2.045211           -2.027953   \n",
       "16           -2.060103           -2.045211           -2.027953   \n",
       "17           -2.060103           -2.045211           -2.027953   \n",
       "18           -2.060103           -2.045211           -2.027953   \n",
       "19           -2.060103           -2.045211           -2.027953   \n",
       "20            0.039794            0.041236            0.041362   \n",
       "21            0.039685            0.041991            0.040949   \n",
       "22            0.039839            0.040816            0.041526   \n",
       "23            0.040738            0.042339            0.041906   \n",
       "24            0.040495            0.041314            0.041528   \n",
       "\n",
       "    split9_train_score  mean_train_score  std_train_score  \n",
       "0            -3.361423         -3.382717         0.020023  \n",
       "1            -3.361423         -3.382717         0.020023  \n",
       "2            -3.361423         -3.382717         0.020023  \n",
       "3            -3.361423         -3.382717         0.020023  \n",
       "4            -3.361423         -3.382717         0.020023  \n",
       "5            -3.347917         -3.369113         0.019937  \n",
       "6            -3.347917         -3.369113         0.019937  \n",
       "7            -3.347917         -3.369113         0.019937  \n",
       "8            -3.347917         -3.369113         0.019937  \n",
       "9            -3.347917         -3.369113         0.019937  \n",
       "10           -3.214350         -3.234573         0.019088  \n",
       "11           -3.214350         -3.234573         0.019088  \n",
       "12           -3.214350         -3.234573         0.019088  \n",
       "13           -3.214350         -3.234573         0.019088  \n",
       "14           -3.214350         -3.234573         0.019088  \n",
       "15           -2.027992         -2.039297         0.011785  \n",
       "16           -2.027992         -2.039297         0.011785  \n",
       "17           -2.027992         -2.039297         0.011785  \n",
       "18           -2.027992         -2.039297         0.011785  \n",
       "19           -2.027992         -2.039297         0.011785  \n",
       "20            0.040595          0.041582         0.001045  \n",
       "21            0.041271          0.041410         0.000964  \n",
       "22            0.041681          0.041581         0.000865  \n",
       "23            0.042198          0.042026         0.001196  \n",
       "24            0.041404          0.041766         0.000927  \n",
       "\n",
       "[25 rows x 32 columns]"
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result_linearsvr = pd.DataFrame(grid_svrl.cv_results_)\n",
    "result_linearsvr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1aa8b0e4c88>]"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1aa8b0d7f48>]"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "([<matplotlib.axis.XTick at 0x1aa8b0a8948>,\n",
       "  <matplotlib.axis.XTick at 0x1aa8b0d7848>,\n",
       "  <matplotlib.axis.XTick at 0x1aa8b0d7988>,\n",
       "  <matplotlib.axis.XTick at 0x1aa8b1199c8>,\n",
       "  <matplotlib.axis.XTick at 0x1aa8b11b5c8>,\n",
       "  <matplotlib.axis.XTick at 0x1aa8b11bb48>,\n",
       "  <matplotlib.axis.XTick at 0x1aa8b1206c8>,\n",
       "  <matplotlib.axis.XTick at 0x1aa8b124248>,\n",
       "  <matplotlib.axis.XTick at 0x1aa8b124808>,\n",
       "  <matplotlib.axis.XTick at 0x1aa8b1290c8>,\n",
       "  <matplotlib.axis.XTick at 0x1aa8b129908>,\n",
       "  <matplotlib.axis.XTick at 0x1aa8b124f48>,\n",
       "  <matplotlib.axis.XTick at 0x1aa8b11b9c8>,\n",
       "  <matplotlib.axis.XTick at 0x1aa8b12d648>,\n",
       "  <matplotlib.axis.XTick at 0x1aa8b130248>,\n",
       "  <matplotlib.axis.XTick at 0x1aa8b130808>,\n",
       "  <matplotlib.axis.XTick at 0x1aa8b1340c8>,\n",
       "  <matplotlib.axis.XTick at 0x1aa8b134948>,\n",
       "  <matplotlib.axis.XTick at 0x1aa8b1394c8>,\n",
       "  <matplotlib.axis.XTick at 0x1aa8b139d88>,\n",
       "  <matplotlib.axis.XTick at 0x1aa8b13d908>,\n",
       "  <matplotlib.axis.XTick at 0x1aa8b139ac8>,\n",
       "  <matplotlib.axis.XTick at 0x1aa8b1306c8>,\n",
       "  <matplotlib.axis.XTick at 0x1aa8b141208>,\n",
       "  <matplotlib.axis.XTick at 0x1aa8b141888>],\n",
       " <a list of 25 Text xticklabel objects>)"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1aa8b0f0e48>]"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1aa8b0f1688>]"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1aa8b14b308>"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'Alpha')"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(range(result_linearsvr.shape[0]), result_linearsvr['mean_train_score'], label = 'mean train score')\n",
    "plt.plot(range(result_linearsvr.shape[0]), result_linearsvr['mean_test_score'], label = 'mean test score')\n",
    "plt.xticks(range(result_linearsvr.shape[0]), result_linearsvr['param_C'], rotation = 90)\n",
    "plt.plot([grid_svrl.best_index_], result_linearsvr['mean_train_score'][grid_svrl.best_index_], 'o', markersize = 10, fillstyle = \"none\")\n",
    "plt.plot([grid_svrl.best_index_], result_linearsvr['mean_test_score'][grid_svrl.best_index_], 'o', markersize = 10, fillstyle = \"none\")\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.xlabel('Alpha')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# SVR with kernel 'Linear' with PCA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [],
   "source": [
    "grid_parms_linear = {'C': [0.01,0.1, 1, 10, 100]}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [],
   "source": [
    "svr_linear = SVR(kernel='linear')\n",
    "grid_svr_linear = GridSearchCV(estimator = svr_linear,param_grid = grid_parms_linear,return_train_score=True,n_jobs= -1,cv=6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=6, error_score='raise-deprecating',\n",
       "             estimator=SVR(C=1.0, cache_size=200, coef0=0.0, degree=3,\n",
       "                           epsilon=0.1, gamma='auto_deprecated',\n",
       "                           kernel='linear', max_iter=-1, shrinking=True,\n",
       "                           tol=0.001, verbose=False),\n",
       "             iid='warn', n_jobs=-1, param_grid={'C': [0.01, 0.1, 1, 10, 100]},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=True,\n",
       "             scoring=None, verbose=0)"
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_svr_linear.fit(X_train_pca,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best parameters: {'C': 100}\n",
      "Best cross-validation score: 0.1890\n"
     ]
    }
   ],
   "source": [
    "print(\"Best parameters: {}\".format(grid_svr_linear.best_params_))\n",
    "print(\"Best cross-validation score: {:.4f}\".format(grid_svr_linear.best_score_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVR(C=100, cache_size=200, coef0=0.0, degree=3, epsilon=0.1,\n",
       "    gamma='auto_deprecated', kernel='linear', max_iter=-1, shrinking=True,\n",
       "    tol=0.001, verbose=False)"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.19158335501214085\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.1968408447426725"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "svr = SVR(kernel = 'linear',C = 100)\n",
    "        \n",
    "        #train the model\n",
    "svr.fit(X_train_pca, y_train)\n",
    "        \n",
    "        #evaluate the model\n",
    "print(svr.score(X_train_pca, y_train))\n",
    "svr_test_score = svr.score(X_test_pca, y_test)\n",
    "svr_test_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cross-validation scores:\n",
      "[0.18415151 0.20062176 0.17853543 0.17968014 0.20419243 0.18664431]\n",
      "0.18897093153308295\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import KFold\n",
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "kfold = KFold(n_splits=6)\n",
    "print(\"Cross-validation scores:\\n{}\".format(cross_val_score(svr , X_train_pca, y_train, cv=kfold)))\n",
    "scores = cross_val_score(svr , X_train_pca, y_train, cv=kfold)\n",
    "print(np.mean(scores))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean_fit_time</th>\n",
       "      <th>std_fit_time</th>\n",
       "      <th>mean_score_time</th>\n",
       "      <th>std_score_time</th>\n",
       "      <th>param_C</th>\n",
       "      <th>params</th>\n",
       "      <th>split0_test_score</th>\n",
       "      <th>split1_test_score</th>\n",
       "      <th>split2_test_score</th>\n",
       "      <th>split3_test_score</th>\n",
       "      <th>...</th>\n",
       "      <th>std_test_score</th>\n",
       "      <th>rank_test_score</th>\n",
       "      <th>split0_train_score</th>\n",
       "      <th>split1_train_score</th>\n",
       "      <th>split2_train_score</th>\n",
       "      <th>split3_train_score</th>\n",
       "      <th>split4_train_score</th>\n",
       "      <th>split5_train_score</th>\n",
       "      <th>mean_train_score</th>\n",
       "      <th>std_train_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>43.314295</td>\n",
       "      <td>1.727023</td>\n",
       "      <td>2.267465</td>\n",
       "      <td>0.085691</td>\n",
       "      <td>0.01</td>\n",
       "      <td>{'C': 0.01}</td>\n",
       "      <td>0.000262</td>\n",
       "      <td>0.000249</td>\n",
       "      <td>-0.000127</td>\n",
       "      <td>-0.000193</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000186</td>\n",
       "      <td>5</td>\n",
       "      <td>0.000244</td>\n",
       "      <td>0.000228</td>\n",
       "      <td>0.000278</td>\n",
       "      <td>0.000272</td>\n",
       "      <td>0.000198</td>\n",
       "      <td>0.000255</td>\n",
       "      <td>0.000246</td>\n",
       "      <td>0.000027</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>44.125841</td>\n",
       "      <td>1.540995</td>\n",
       "      <td>2.304240</td>\n",
       "      <td>0.041304</td>\n",
       "      <td>0.1</td>\n",
       "      <td>{'C': 0.1}</td>\n",
       "      <td>0.002632</td>\n",
       "      <td>0.002876</td>\n",
       "      <td>0.002017</td>\n",
       "      <td>0.001855</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000362</td>\n",
       "      <td>4</td>\n",
       "      <td>0.002594</td>\n",
       "      <td>0.002502</td>\n",
       "      <td>0.002728</td>\n",
       "      <td>0.002676</td>\n",
       "      <td>0.002434</td>\n",
       "      <td>0.002599</td>\n",
       "      <td>0.002589</td>\n",
       "      <td>0.000099</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>42.479593</td>\n",
       "      <td>1.234786</td>\n",
       "      <td>2.266341</td>\n",
       "      <td>0.051367</td>\n",
       "      <td>1</td>\n",
       "      <td>{'C': 1}</td>\n",
       "      <td>0.021691</td>\n",
       "      <td>0.024136</td>\n",
       "      <td>0.019301</td>\n",
       "      <td>0.018813</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001991</td>\n",
       "      <td>3</td>\n",
       "      <td>0.021625</td>\n",
       "      <td>0.021144</td>\n",
       "      <td>0.022121</td>\n",
       "      <td>0.022204</td>\n",
       "      <td>0.021022</td>\n",
       "      <td>0.021617</td>\n",
       "      <td>0.021622</td>\n",
       "      <td>0.000443</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>42.288906</td>\n",
       "      <td>1.295719</td>\n",
       "      <td>2.275954</td>\n",
       "      <td>0.047782</td>\n",
       "      <td>10</td>\n",
       "      <td>{'C': 10}</td>\n",
       "      <td>0.102405</td>\n",
       "      <td>0.112612</td>\n",
       "      <td>0.095234</td>\n",
       "      <td>0.094415</td>\n",
       "      <td>...</td>\n",
       "      <td>0.007247</td>\n",
       "      <td>2</td>\n",
       "      <td>0.103686</td>\n",
       "      <td>0.101628</td>\n",
       "      <td>0.103767</td>\n",
       "      <td>0.104892</td>\n",
       "      <td>0.101837</td>\n",
       "      <td>0.103138</td>\n",
       "      <td>0.103158</td>\n",
       "      <td>0.001136</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>21.287124</td>\n",
       "      <td>0.686505</td>\n",
       "      <td>1.080917</td>\n",
       "      <td>0.044421</td>\n",
       "      <td>100</td>\n",
       "      <td>{'C': 100}</td>\n",
       "      <td>0.184152</td>\n",
       "      <td>0.200622</td>\n",
       "      <td>0.178535</td>\n",
       "      <td>0.179680</td>\n",
       "      <td>...</td>\n",
       "      <td>0.009927</td>\n",
       "      <td>1</td>\n",
       "      <td>0.189370</td>\n",
       "      <td>0.187217</td>\n",
       "      <td>0.188444</td>\n",
       "      <td>0.190949</td>\n",
       "      <td>0.187849</td>\n",
       "      <td>0.189134</td>\n",
       "      <td>0.188827</td>\n",
       "      <td>0.001196</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   mean_fit_time  std_fit_time  mean_score_time  std_score_time param_C  \\\n",
       "0      43.314295      1.727023         2.267465        0.085691    0.01   \n",
       "1      44.125841      1.540995         2.304240        0.041304     0.1   \n",
       "2      42.479593      1.234786         2.266341        0.051367       1   \n",
       "3      42.288906      1.295719         2.275954        0.047782      10   \n",
       "4      21.287124      0.686505         1.080917        0.044421     100   \n",
       "\n",
       "        params  split0_test_score  split1_test_score  split2_test_score  \\\n",
       "0  {'C': 0.01}           0.000262           0.000249          -0.000127   \n",
       "1   {'C': 0.1}           0.002632           0.002876           0.002017   \n",
       "2     {'C': 1}           0.021691           0.024136           0.019301   \n",
       "3    {'C': 10}           0.102405           0.112612           0.095234   \n",
       "4   {'C': 100}           0.184152           0.200622           0.178535   \n",
       "\n",
       "   split3_test_score  ...  std_test_score  rank_test_score  \\\n",
       "0          -0.000193  ...        0.000186                5   \n",
       "1           0.001855  ...        0.000362                4   \n",
       "2           0.018813  ...        0.001991                3   \n",
       "3           0.094415  ...        0.007247                2   \n",
       "4           0.179680  ...        0.009927                1   \n",
       "\n",
       "   split0_train_score  split1_train_score  split2_train_score  \\\n",
       "0            0.000244            0.000228            0.000278   \n",
       "1            0.002594            0.002502            0.002728   \n",
       "2            0.021625            0.021144            0.022121   \n",
       "3            0.103686            0.101628            0.103767   \n",
       "4            0.189370            0.187217            0.188444   \n",
       "\n",
       "   split3_train_score  split4_train_score  split5_train_score  \\\n",
       "0            0.000272            0.000198            0.000255   \n",
       "1            0.002676            0.002434            0.002599   \n",
       "2            0.022204            0.021022            0.021617   \n",
       "3            0.104892            0.101837            0.103138   \n",
       "4            0.190949            0.187849            0.189134   \n",
       "\n",
       "   mean_train_score  std_train_score  \n",
       "0          0.000246         0.000027  \n",
       "1          0.002589         0.000099  \n",
       "2          0.021622         0.000443  \n",
       "3          0.103158         0.001136  \n",
       "4          0.188827         0.001196  \n",
       "\n",
       "[5 rows x 23 columns]"
      ]
     },
     "execution_count": 146,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result_svr_linear = pd.DataFrame(grid_svr_linear.cv_results_)\n",
    "result_svr_linear"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1aa8ae46c08>]"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1aa8b188ec8>]"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "([<matplotlib.axis.XTick at 0x1aa8b0a2bc8>,\n",
       "  <matplotlib.axis.XTick at 0x1aa8b0c15c8>,\n",
       "  <matplotlib.axis.XTick at 0x1aa8b199648>,\n",
       "  <matplotlib.axis.XTick at 0x1aa8b1b6148>,\n",
       "  <matplotlib.axis.XTick at 0x1aa8b1b9648>],\n",
       " <a list of 5 Text xticklabel objects>)"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1aa8ae46a48>]"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1aa8b1b6b88>]"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1aa8b1be448>"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'C')"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(range(result_svr_linear.shape[0]), result_svr_linear['mean_train_score'], label = 'mean train score')\n",
    "plt.plot(range(result_svr_linear.shape[0]), result_svr_linear['mean_test_score'], label = 'mean test score')\n",
    "plt.xticks(range(result_svr_linear.shape[0]), result_svr_linear['param_C'], rotation = 90)\n",
    "plt.plot([grid_svr_linear.best_index_], result_svr_linear['mean_train_score'][grid_svr_linear.best_index_], 'o', markersize = 10, fillstyle = \"none\")\n",
    "plt.plot([grid_svr_linear.best_index_], result_svr_linear['mean_test_score'][grid_svr_linear.best_index_], 'o', markersize = 10, fillstyle = \"none\")\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.xlabel('C')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# SVR with kernel 'Poly' with PCA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [],
   "source": [
    "grid_parms_svrp = {'C': [1, 10, 100],'degree':[1,3]}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [],
   "source": [
    "svr_poly = SVR(kernel='poly')\n",
    "grid_svr_poly = GridSearchCV(estimator = svr_poly,param_grid = grid_parms_svrp,return_train_score=True,n_jobs= -1,cv=3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\vunda\\Anaconda3\\lib\\site-packages\\sklearn\\svm\\base.py:193: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=3, error_score='raise-deprecating',\n",
       "             estimator=SVR(C=1.0, cache_size=200, coef0=0.0, degree=3,\n",
       "                           epsilon=0.1, gamma='auto_deprecated', kernel='poly',\n",
       "                           max_iter=-1, shrinking=True, tol=0.001,\n",
       "                           verbose=False),\n",
       "             iid='warn', n_jobs=-1,\n",
       "             param_grid={'C': [1, 10, 100], 'degree': [1, 3]},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=True,\n",
       "             scoring=None, verbose=0)"
      ]
     },
     "execution_count": 150,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_svr_poly.fit(X_train_pca,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best parameters: {'C': 100, 'degree': 1}\n",
      "Best cross-validation score: 0.1099\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean_fit_time</th>\n",
       "      <th>std_fit_time</th>\n",
       "      <th>mean_score_time</th>\n",
       "      <th>std_score_time</th>\n",
       "      <th>param_C</th>\n",
       "      <th>param_degree</th>\n",
       "      <th>params</th>\n",
       "      <th>split0_test_score</th>\n",
       "      <th>split1_test_score</th>\n",
       "      <th>split2_test_score</th>\n",
       "      <th>mean_test_score</th>\n",
       "      <th>std_test_score</th>\n",
       "      <th>rank_test_score</th>\n",
       "      <th>split0_train_score</th>\n",
       "      <th>split1_train_score</th>\n",
       "      <th>split2_train_score</th>\n",
       "      <th>mean_train_score</th>\n",
       "      <th>std_train_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>25.180039</td>\n",
       "      <td>0.212301</td>\n",
       "      <td>4.124324</td>\n",
       "      <td>0.066241</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>{'C': 1, 'degree': 1}</td>\n",
       "      <td>0.003127</td>\n",
       "      <td>0.002288</td>\n",
       "      <td>0.003026</td>\n",
       "      <td>0.002814</td>\n",
       "      <td>0.000374</td>\n",
       "      <td>3</td>\n",
       "      <td>0.002820</td>\n",
       "      <td>0.003221</td>\n",
       "      <td>0.002744</td>\n",
       "      <td>0.002928</td>\n",
       "      <td>0.000209</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>25.925913</td>\n",
       "      <td>0.214481</td>\n",
       "      <td>4.497059</td>\n",
       "      <td>0.039158</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>{'C': 1, 'degree': 3}</td>\n",
       "      <td>0.003499</td>\n",
       "      <td>-0.073015</td>\n",
       "      <td>0.003250</td>\n",
       "      <td>-0.022088</td>\n",
       "      <td>0.036010</td>\n",
       "      <td>4</td>\n",
       "      <td>0.003782</td>\n",
       "      <td>0.003118</td>\n",
       "      <td>0.004839</td>\n",
       "      <td>0.003913</td>\n",
       "      <td>0.000709</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>24.830970</td>\n",
       "      <td>0.142581</td>\n",
       "      <td>4.091521</td>\n",
       "      <td>0.006781</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>{'C': 10, 'degree': 1}</td>\n",
       "      <td>0.025455</td>\n",
       "      <td>0.021294</td>\n",
       "      <td>0.025277</td>\n",
       "      <td>0.024009</td>\n",
       "      <td>0.001921</td>\n",
       "      <td>2</td>\n",
       "      <td>0.023473</td>\n",
       "      <td>0.025556</td>\n",
       "      <td>0.023335</td>\n",
       "      <td>0.024121</td>\n",
       "      <td>0.001016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>26.812387</td>\n",
       "      <td>0.166720</td>\n",
       "      <td>4.534348</td>\n",
       "      <td>0.033748</td>\n",
       "      <td>10</td>\n",
       "      <td>3</td>\n",
       "      <td>{'C': 10, 'degree': 3}</td>\n",
       "      <td>0.022960</td>\n",
       "      <td>-2.007897</td>\n",
       "      <td>-0.022911</td>\n",
       "      <td>-0.669256</td>\n",
       "      <td>0.946720</td>\n",
       "      <td>6</td>\n",
       "      <td>0.017070</td>\n",
       "      <td>0.018045</td>\n",
       "      <td>0.027261</td>\n",
       "      <td>0.020792</td>\n",
       "      <td>0.004591</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>13.828906</td>\n",
       "      <td>0.206518</td>\n",
       "      <td>2.144763</td>\n",
       "      <td>0.072622</td>\n",
       "      <td>100</td>\n",
       "      <td>1</td>\n",
       "      <td>{'C': 100, 'degree': 1}</td>\n",
       "      <td>0.114546</td>\n",
       "      <td>0.100413</td>\n",
       "      <td>0.114600</td>\n",
       "      <td>0.109853</td>\n",
       "      <td>0.006675</td>\n",
       "      <td>1</td>\n",
       "      <td>0.108847</td>\n",
       "      <td>0.112893</td>\n",
       "      <td>0.107932</td>\n",
       "      <td>0.109891</td>\n",
       "      <td>0.002156</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>14.760933</td>\n",
       "      <td>0.401115</td>\n",
       "      <td>2.373973</td>\n",
       "      <td>0.049229</td>\n",
       "      <td>100</td>\n",
       "      <td>3</td>\n",
       "      <td>{'C': 100, 'degree': 3}</td>\n",
       "      <td>0.084902</td>\n",
       "      <td>-0.242898</td>\n",
       "      <td>-0.193755</td>\n",
       "      <td>-0.117242</td>\n",
       "      <td>0.144347</td>\n",
       "      <td>5</td>\n",
       "      <td>0.073052</td>\n",
       "      <td>0.075002</td>\n",
       "      <td>0.087907</td>\n",
       "      <td>0.078654</td>\n",
       "      <td>0.006591</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   mean_fit_time  std_fit_time  mean_score_time  std_score_time param_C  \\\n",
       "0      25.180039      0.212301         4.124324        0.066241       1   \n",
       "1      25.925913      0.214481         4.497059        0.039158       1   \n",
       "2      24.830970      0.142581         4.091521        0.006781      10   \n",
       "3      26.812387      0.166720         4.534348        0.033748      10   \n",
       "4      13.828906      0.206518         2.144763        0.072622     100   \n",
       "5      14.760933      0.401115         2.373973        0.049229     100   \n",
       "\n",
       "  param_degree                   params  split0_test_score  split1_test_score  \\\n",
       "0            1    {'C': 1, 'degree': 1}           0.003127           0.002288   \n",
       "1            3    {'C': 1, 'degree': 3}           0.003499          -0.073015   \n",
       "2            1   {'C': 10, 'degree': 1}           0.025455           0.021294   \n",
       "3            3   {'C': 10, 'degree': 3}           0.022960          -2.007897   \n",
       "4            1  {'C': 100, 'degree': 1}           0.114546           0.100413   \n",
       "5            3  {'C': 100, 'degree': 3}           0.084902          -0.242898   \n",
       "\n",
       "   split2_test_score  mean_test_score  std_test_score  rank_test_score  \\\n",
       "0           0.003026         0.002814        0.000374                3   \n",
       "1           0.003250        -0.022088        0.036010                4   \n",
       "2           0.025277         0.024009        0.001921                2   \n",
       "3          -0.022911        -0.669256        0.946720                6   \n",
       "4           0.114600         0.109853        0.006675                1   \n",
       "5          -0.193755        -0.117242        0.144347                5   \n",
       "\n",
       "   split0_train_score  split1_train_score  split2_train_score  \\\n",
       "0            0.002820            0.003221            0.002744   \n",
       "1            0.003782            0.003118            0.004839   \n",
       "2            0.023473            0.025556            0.023335   \n",
       "3            0.017070            0.018045            0.027261   \n",
       "4            0.108847            0.112893            0.107932   \n",
       "5            0.073052            0.075002            0.087907   \n",
       "\n",
       "   mean_train_score  std_train_score  \n",
       "0          0.002928         0.000209  \n",
       "1          0.003913         0.000709  \n",
       "2          0.024121         0.001016  \n",
       "3          0.020792         0.004591  \n",
       "4          0.109891         0.002156  \n",
       "5          0.078654         0.006591  "
      ]
     },
     "execution_count": 151,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(\"Best parameters: {}\".format(grid_svr_poly.best_params_))\n",
    "print(\"Best cross-validation score: {:.4f}\".format(grid_svr_poly.best_score_))\n",
    "pd.DataFrame(grid_svr_poly.cv_results_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\vunda\\Anaconda3\\lib\\site-packages\\sklearn\\svm\\base.py:193: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "SVR(C=100, cache_size=200, coef0=0.0, degree=1, epsilon=0.1,\n",
       "    gamma='auto_deprecated', kernel='poly', max_iter=-1, shrinking=True,\n",
       "    tol=0.001, verbose=False)"
      ]
     },
     "execution_count": 152,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "0.12941914323431103"
      ]
     },
     "execution_count": 152,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "0.13376873122748623"
      ]
     },
     "execution_count": 152,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "svr_p = SVR(kernel='poly',C=100,degree = 1)\n",
    "svr_p.fit(X_train_pca, y_train)\n",
    "svr_p.score(X_train_pca, y_train)\n",
    "svrp_test_score = svr_p.score(X_test_pca, y_test)\n",
    "svrp_test_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\vunda\\Anaconda3\\lib\\site-packages\\sklearn\\svm\\base.py:193: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n",
      "C:\\Users\\vunda\\Anaconda3\\lib\\site-packages\\sklearn\\svm\\base.py:193: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n",
      "C:\\Users\\vunda\\Anaconda3\\lib\\site-packages\\sklearn\\svm\\base.py:193: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n",
      "C:\\Users\\vunda\\Anaconda3\\lib\\site-packages\\sklearn\\svm\\base.py:193: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n",
      "C:\\Users\\vunda\\Anaconda3\\lib\\site-packages\\sklearn\\svm\\base.py:193: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n",
      "C:\\Users\\vunda\\Anaconda3\\lib\\site-packages\\sklearn\\svm\\base.py:193: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cross-validation scores:\n",
      "[0.11910886 0.13125012 0.11185079 0.11113219 0.1311584  0.11967926]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\vunda\\Anaconda3\\lib\\site-packages\\sklearn\\svm\\base.py:193: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n",
      "C:\\Users\\vunda\\Anaconda3\\lib\\site-packages\\sklearn\\svm\\base.py:193: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n",
      "C:\\Users\\vunda\\Anaconda3\\lib\\site-packages\\sklearn\\svm\\base.py:193: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n",
      "C:\\Users\\vunda\\Anaconda3\\lib\\site-packages\\sklearn\\svm\\base.py:193: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n",
      "C:\\Users\\vunda\\Anaconda3\\lib\\site-packages\\sklearn\\svm\\base.py:193: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n",
      "C:\\Users\\vunda\\Anaconda3\\lib\\site-packages\\sklearn\\svm\\base.py:193: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.12069660202169417\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import KFold\n",
    "from sklearn.model_selection import cross_val_score\n",
    "#scores = cross_val_score(logreg, iris.data, iris.target)\n",
    "kfold = KFold(n_splits=6)\n",
    "print(\"Cross-validation scores:\\n{}\".format(cross_val_score(svr_p, X_train_pca, y_train, cv=kfold)))\n",
    "scores = cross_val_score(svr_p, X_train_pca, y_train, cv=kfold)\n",
    "print(np.mean(scores))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean_fit_time</th>\n",
       "      <th>std_fit_time</th>\n",
       "      <th>mean_score_time</th>\n",
       "      <th>std_score_time</th>\n",
       "      <th>param_C</th>\n",
       "      <th>param_degree</th>\n",
       "      <th>params</th>\n",
       "      <th>split0_test_score</th>\n",
       "      <th>split1_test_score</th>\n",
       "      <th>split2_test_score</th>\n",
       "      <th>mean_test_score</th>\n",
       "      <th>std_test_score</th>\n",
       "      <th>rank_test_score</th>\n",
       "      <th>split0_train_score</th>\n",
       "      <th>split1_train_score</th>\n",
       "      <th>split2_train_score</th>\n",
       "      <th>mean_train_score</th>\n",
       "      <th>std_train_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>25.180039</td>\n",
       "      <td>0.212301</td>\n",
       "      <td>4.124324</td>\n",
       "      <td>0.066241</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>{'C': 1, 'degree': 1}</td>\n",
       "      <td>0.003127</td>\n",
       "      <td>0.002288</td>\n",
       "      <td>0.003026</td>\n",
       "      <td>0.002814</td>\n",
       "      <td>0.000374</td>\n",
       "      <td>3</td>\n",
       "      <td>0.002820</td>\n",
       "      <td>0.003221</td>\n",
       "      <td>0.002744</td>\n",
       "      <td>0.002928</td>\n",
       "      <td>0.000209</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>25.925913</td>\n",
       "      <td>0.214481</td>\n",
       "      <td>4.497059</td>\n",
       "      <td>0.039158</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>{'C': 1, 'degree': 3}</td>\n",
       "      <td>0.003499</td>\n",
       "      <td>-0.073015</td>\n",
       "      <td>0.003250</td>\n",
       "      <td>-0.022088</td>\n",
       "      <td>0.036010</td>\n",
       "      <td>4</td>\n",
       "      <td>0.003782</td>\n",
       "      <td>0.003118</td>\n",
       "      <td>0.004839</td>\n",
       "      <td>0.003913</td>\n",
       "      <td>0.000709</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>24.830970</td>\n",
       "      <td>0.142581</td>\n",
       "      <td>4.091521</td>\n",
       "      <td>0.006781</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>{'C': 10, 'degree': 1}</td>\n",
       "      <td>0.025455</td>\n",
       "      <td>0.021294</td>\n",
       "      <td>0.025277</td>\n",
       "      <td>0.024009</td>\n",
       "      <td>0.001921</td>\n",
       "      <td>2</td>\n",
       "      <td>0.023473</td>\n",
       "      <td>0.025556</td>\n",
       "      <td>0.023335</td>\n",
       "      <td>0.024121</td>\n",
       "      <td>0.001016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>26.812387</td>\n",
       "      <td>0.166720</td>\n",
       "      <td>4.534348</td>\n",
       "      <td>0.033748</td>\n",
       "      <td>10</td>\n",
       "      <td>3</td>\n",
       "      <td>{'C': 10, 'degree': 3}</td>\n",
       "      <td>0.022960</td>\n",
       "      <td>-2.007897</td>\n",
       "      <td>-0.022911</td>\n",
       "      <td>-0.669256</td>\n",
       "      <td>0.946720</td>\n",
       "      <td>6</td>\n",
       "      <td>0.017070</td>\n",
       "      <td>0.018045</td>\n",
       "      <td>0.027261</td>\n",
       "      <td>0.020792</td>\n",
       "      <td>0.004591</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>13.828906</td>\n",
       "      <td>0.206518</td>\n",
       "      <td>2.144763</td>\n",
       "      <td>0.072622</td>\n",
       "      <td>100</td>\n",
       "      <td>1</td>\n",
       "      <td>{'C': 100, 'degree': 1}</td>\n",
       "      <td>0.114546</td>\n",
       "      <td>0.100413</td>\n",
       "      <td>0.114600</td>\n",
       "      <td>0.109853</td>\n",
       "      <td>0.006675</td>\n",
       "      <td>1</td>\n",
       "      <td>0.108847</td>\n",
       "      <td>0.112893</td>\n",
       "      <td>0.107932</td>\n",
       "      <td>0.109891</td>\n",
       "      <td>0.002156</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>14.760933</td>\n",
       "      <td>0.401115</td>\n",
       "      <td>2.373973</td>\n",
       "      <td>0.049229</td>\n",
       "      <td>100</td>\n",
       "      <td>3</td>\n",
       "      <td>{'C': 100, 'degree': 3}</td>\n",
       "      <td>0.084902</td>\n",
       "      <td>-0.242898</td>\n",
       "      <td>-0.193755</td>\n",
       "      <td>-0.117242</td>\n",
       "      <td>0.144347</td>\n",
       "      <td>5</td>\n",
       "      <td>0.073052</td>\n",
       "      <td>0.075002</td>\n",
       "      <td>0.087907</td>\n",
       "      <td>0.078654</td>\n",
       "      <td>0.006591</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   mean_fit_time  std_fit_time  mean_score_time  std_score_time param_C  \\\n",
       "0      25.180039      0.212301         4.124324        0.066241       1   \n",
       "1      25.925913      0.214481         4.497059        0.039158       1   \n",
       "2      24.830970      0.142581         4.091521        0.006781      10   \n",
       "3      26.812387      0.166720         4.534348        0.033748      10   \n",
       "4      13.828906      0.206518         2.144763        0.072622     100   \n",
       "5      14.760933      0.401115         2.373973        0.049229     100   \n",
       "\n",
       "  param_degree                   params  split0_test_score  split1_test_score  \\\n",
       "0            1    {'C': 1, 'degree': 1}           0.003127           0.002288   \n",
       "1            3    {'C': 1, 'degree': 3}           0.003499          -0.073015   \n",
       "2            1   {'C': 10, 'degree': 1}           0.025455           0.021294   \n",
       "3            3   {'C': 10, 'degree': 3}           0.022960          -2.007897   \n",
       "4            1  {'C': 100, 'degree': 1}           0.114546           0.100413   \n",
       "5            3  {'C': 100, 'degree': 3}           0.084902          -0.242898   \n",
       "\n",
       "   split2_test_score  mean_test_score  std_test_score  rank_test_score  \\\n",
       "0           0.003026         0.002814        0.000374                3   \n",
       "1           0.003250        -0.022088        0.036010                4   \n",
       "2           0.025277         0.024009        0.001921                2   \n",
       "3          -0.022911        -0.669256        0.946720                6   \n",
       "4           0.114600         0.109853        0.006675                1   \n",
       "5          -0.193755        -0.117242        0.144347                5   \n",
       "\n",
       "   split0_train_score  split1_train_score  split2_train_score  \\\n",
       "0            0.002820            0.003221            0.002744   \n",
       "1            0.003782            0.003118            0.004839   \n",
       "2            0.023473            0.025556            0.023335   \n",
       "3            0.017070            0.018045            0.027261   \n",
       "4            0.108847            0.112893            0.107932   \n",
       "5            0.073052            0.075002            0.087907   \n",
       "\n",
       "   mean_train_score  std_train_score  \n",
       "0          0.002928         0.000209  \n",
       "1          0.003913         0.000709  \n",
       "2          0.024121         0.001016  \n",
       "3          0.020792         0.004591  \n",
       "4          0.109891         0.002156  \n",
       "5          0.078654         0.006591  "
      ]
     },
     "execution_count": 154,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result_svr_poly= pd.DataFrame(grid_svr_poly.cv_results_)\n",
    "result_svr_poly"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1aa8bbd3508>]"
      ]
     },
     "execution_count": 155,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1aa8bbf5e88>]"
      ]
     },
     "execution_count": 155,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "([<matplotlib.axis.XTick at 0x1aa8bbd3f08>,\n",
       "  <matplotlib.axis.XTick at 0x1aa8bbd3248>,\n",
       "  <matplotlib.axis.XTick at 0x1aa8bbd33c8>,\n",
       "  <matplotlib.axis.XTick at 0x1aa8bc118c8>,\n",
       "  <matplotlib.axis.XTick at 0x1aa8bc13508>,\n",
       "  <matplotlib.axis.XTick at 0x1aa8bc16108>],\n",
       " <a list of 6 Text xticklabel objects>)"
      ]
     },
     "execution_count": 155,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1aa8bc16fc8>]"
      ]
     },
     "execution_count": 155,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1aa8bc0b588>]"
      ]
     },
     "execution_count": 155,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1aa8bc1ad08>"
      ]
     },
     "execution_count": 155,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(range(result_svr_poly.shape[0]), result_svr_poly['mean_train_score'], label = 'mean train score')\n",
    "plt.plot(range(result_svr_poly.shape[0]), result_svr_poly['mean_test_score'], label = 'mean test score')\n",
    "plt.xticks(range(result_svr_poly.shape[0]), result_svr_poly['param_C'], rotation = 90)\n",
    "plt.plot([grid_svr_poly.best_index_], result_svr_poly['mean_train_score'][grid_svr_poly.best_index_], 'o', markersize = 10, fillstyle = \"none\")\n",
    "plt.plot([grid_svr_poly.best_index_], result_svr_poly['mean_test_score'][grid_svr_poly.best_index_], 'o', markersize = 10, fillstyle = \"none\")\n",
    "plt.grid()\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# SVR with kernel 'rbf' with PCA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {},
   "outputs": [],
   "source": [
    "grid_parms_rbf = {'C': [0.1, 1, 10, 100],'gamma':[0.1, 1, 10, 100]}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {},
   "outputs": [],
   "source": [
    "svr_rbf = SVR(kernel='rbf')\n",
    "grid_svr_rbf = GridSearchCV(estimator = svr_rbf,param_grid = grid_parms_rbf,return_train_score=True,n_jobs= -1,cv=3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=3, error_score='raise-deprecating',\n",
       "             estimator=SVR(C=1.0, cache_size=200, coef0=0.0, degree=3,\n",
       "                           epsilon=0.1, gamma='auto_deprecated', kernel='rbf',\n",
       "                           max_iter=-1, shrinking=True, tol=0.001,\n",
       "                           verbose=False),\n",
       "             iid='warn', n_jobs=-1,\n",
       "             param_grid={'C': [0.1, 1, 10, 100], 'gamma': [0.1, 1, 10, 100]},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=True,\n",
       "             scoring=None, verbose=0)"
      ]
     },
     "execution_count": 158,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_svr_rbf.fit(X_train_pca,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best parameters: {'C': 100, 'gamma': 0.1}\n",
      "Best cross-validation score: 0.0486\n"
     ]
    }
   ],
   "source": [
    "print(\"Best parameters: {}\".format(grid_svr_rbf.best_params_))\n",
    "print(\"Best cross-validation score: {:.4f}\".format(grid_svr_rbf.best_score_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVR(C=100, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma=0.1,\n",
       "    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False)"
      ]
     },
     "execution_count": 160,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "0.06316907721360487"
      ]
     },
     "execution_count": 160,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "0.06821071854925642"
      ]
     },
     "execution_count": 160,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "svr_rbf = SVR(kernel='rbf',C=100,gamma=0.1)\n",
    "svr_rbf.fit(X_train_pca, y_train)\n",
    "svr_rbf.score(X_train_pca, y_train)\n",
    "svr_rbf_test_score = svr_rbf.score(X_test_pca, y_test)\n",
    "svr_rbf_test_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cross-validation scores:\n",
      "[0.05854353 0.06517387 0.05173002 0.04872949 0.05651467 0.05765415]\n",
      "0.056390954197358324\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import KFold\n",
    "from sklearn.model_selection import cross_val_score\n",
    "kfold = KFold(n_splits=6)\n",
    "print(\"Cross-validation scores:\\n{}\".format(cross_val_score(svr_rbf, X_train_pca, y_train, cv=kfold)))\n",
    "scores = cross_val_score(svr_rbf, X_train_pca, y_train, cv=kfold)\n",
    "print(np.mean(scores))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean_fit_time</th>\n",
       "      <th>std_fit_time</th>\n",
       "      <th>mean_score_time</th>\n",
       "      <th>std_score_time</th>\n",
       "      <th>param_C</th>\n",
       "      <th>param_gamma</th>\n",
       "      <th>params</th>\n",
       "      <th>split0_test_score</th>\n",
       "      <th>split1_test_score</th>\n",
       "      <th>split2_test_score</th>\n",
       "      <th>mean_test_score</th>\n",
       "      <th>std_test_score</th>\n",
       "      <th>rank_test_score</th>\n",
       "      <th>split0_train_score</th>\n",
       "      <th>split1_train_score</th>\n",
       "      <th>split2_train_score</th>\n",
       "      <th>mean_train_score</th>\n",
       "      <th>std_train_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>28.935423</td>\n",
       "      <td>0.717088</td>\n",
       "      <td>7.156590</td>\n",
       "      <td>0.025299</td>\n",
       "      <td>0.1</td>\n",
       "      <td>0.1</td>\n",
       "      <td>{'C': 0.1, 'gamma': 0.1}</td>\n",
       "      <td>0.000063</td>\n",
       "      <td>-0.000327</td>\n",
       "      <td>0.000042</td>\n",
       "      <td>-0.000074</td>\n",
       "      <td>0.000179</td>\n",
       "      <td>7</td>\n",
       "      <td>0.000019</td>\n",
       "      <td>5.659528e-05</td>\n",
       "      <td>0.000010</td>\n",
       "      <td>0.000029</td>\n",
       "      <td>0.000020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>27.475492</td>\n",
       "      <td>0.378195</td>\n",
       "      <td>7.204206</td>\n",
       "      <td>0.028435</td>\n",
       "      <td>0.1</td>\n",
       "      <td>1</td>\n",
       "      <td>{'C': 0.1, 'gamma': 1}</td>\n",
       "      <td>-0.000014</td>\n",
       "      <td>-0.000391</td>\n",
       "      <td>-0.000028</td>\n",
       "      <td>-0.000144</td>\n",
       "      <td>0.000175</td>\n",
       "      <td>11</td>\n",
       "      <td>-0.000047</td>\n",
       "      <td>-2.005343e-05</td>\n",
       "      <td>-0.000058</td>\n",
       "      <td>-0.000042</td>\n",
       "      <td>0.000016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>34.779717</td>\n",
       "      <td>0.560561</td>\n",
       "      <td>7.163631</td>\n",
       "      <td>0.089474</td>\n",
       "      <td>0.1</td>\n",
       "      <td>10</td>\n",
       "      <td>{'C': 0.1, 'gamma': 10}</td>\n",
       "      <td>-0.000021</td>\n",
       "      <td>-0.000397</td>\n",
       "      <td>-0.000035</td>\n",
       "      <td>-0.000151</td>\n",
       "      <td>0.000174</td>\n",
       "      <td>15</td>\n",
       "      <td>-0.000053</td>\n",
       "      <td>-2.738255e-05</td>\n",
       "      <td>-0.000064</td>\n",
       "      <td>-0.000048</td>\n",
       "      <td>0.000015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>50.930683</td>\n",
       "      <td>0.286915</td>\n",
       "      <td>19.916553</td>\n",
       "      <td>0.042249</td>\n",
       "      <td>0.1</td>\n",
       "      <td>100</td>\n",
       "      <td>{'C': 0.1, 'gamma': 100}</td>\n",
       "      <td>-0.000021</td>\n",
       "      <td>-0.000397</td>\n",
       "      <td>-0.000035</td>\n",
       "      <td>-0.000151</td>\n",
       "      <td>0.000174</td>\n",
       "      <td>16</td>\n",
       "      <td>-0.000053</td>\n",
       "      <td>-2.765540e-05</td>\n",
       "      <td>-0.000064</td>\n",
       "      <td>-0.000048</td>\n",
       "      <td>0.000015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>27.388708</td>\n",
       "      <td>0.394420</td>\n",
       "      <td>7.832045</td>\n",
       "      <td>0.651845</td>\n",
       "      <td>1</td>\n",
       "      <td>0.1</td>\n",
       "      <td>{'C': 1, 'gamma': 0.1}</td>\n",
       "      <td>0.000789</td>\n",
       "      <td>0.000282</td>\n",
       "      <td>0.000712</td>\n",
       "      <td>0.000594</td>\n",
       "      <td>0.000223</td>\n",
       "      <td>4</td>\n",
       "      <td>0.000649</td>\n",
       "      <td>7.876734e-04</td>\n",
       "      <td>0.000657</td>\n",
       "      <td>0.000698</td>\n",
       "      <td>0.000064</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>26.641604</td>\n",
       "      <td>0.196970</td>\n",
       "      <td>8.399695</td>\n",
       "      <td>0.672954</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>{'C': 1, 'gamma': 1}</td>\n",
       "      <td>0.000055</td>\n",
       "      <td>-0.000336</td>\n",
       "      <td>0.000034</td>\n",
       "      <td>-0.000082</td>\n",
       "      <td>0.000179</td>\n",
       "      <td>8</td>\n",
       "      <td>0.000014</td>\n",
       "      <td>5.057323e-05</td>\n",
       "      <td>0.000003</td>\n",
       "      <td>0.000023</td>\n",
       "      <td>0.000020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>33.680093</td>\n",
       "      <td>0.346125</td>\n",
       "      <td>7.176957</td>\n",
       "      <td>0.082707</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>{'C': 1, 'gamma': 10}</td>\n",
       "      <td>-0.000018</td>\n",
       "      <td>-0.000395</td>\n",
       "      <td>-0.000032</td>\n",
       "      <td>-0.000148</td>\n",
       "      <td>0.000174</td>\n",
       "      <td>13</td>\n",
       "      <td>-0.000048</td>\n",
       "      <td>-2.236564e-05</td>\n",
       "      <td>-0.000060</td>\n",
       "      <td>-0.000044</td>\n",
       "      <td>0.000016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>49.502940</td>\n",
       "      <td>0.484822</td>\n",
       "      <td>19.928661</td>\n",
       "      <td>0.631640</td>\n",
       "      <td>1</td>\n",
       "      <td>100</td>\n",
       "      <td>{'C': 1, 'gamma': 100}</td>\n",
       "      <td>-0.000021</td>\n",
       "      <td>-0.000397</td>\n",
       "      <td>-0.000034</td>\n",
       "      <td>-0.000151</td>\n",
       "      <td>0.000174</td>\n",
       "      <td>14</td>\n",
       "      <td>-0.000051</td>\n",
       "      <td>-2.507480e-05</td>\n",
       "      <td>-0.000062</td>\n",
       "      <td>-0.000046</td>\n",
       "      <td>0.000015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>27.948703</td>\n",
       "      <td>0.335612</td>\n",
       "      <td>7.339709</td>\n",
       "      <td>0.010439</td>\n",
       "      <td>10</td>\n",
       "      <td>0.1</td>\n",
       "      <td>{'C': 10, 'gamma': 0.1}</td>\n",
       "      <td>0.007739</td>\n",
       "      <td>0.006083</td>\n",
       "      <td>0.007175</td>\n",
       "      <td>0.006999</td>\n",
       "      <td>0.000687</td>\n",
       "      <td>2</td>\n",
       "      <td>0.006662</td>\n",
       "      <td>7.758712e-03</td>\n",
       "      <td>0.006904</td>\n",
       "      <td>0.007108</td>\n",
       "      <td>0.000470</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>26.450837</td>\n",
       "      <td>0.041908</td>\n",
       "      <td>7.215188</td>\n",
       "      <td>0.019295</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>{'C': 10, 'gamma': 1}</td>\n",
       "      <td>0.000699</td>\n",
       "      <td>0.000197</td>\n",
       "      <td>0.000623</td>\n",
       "      <td>0.000506</td>\n",
       "      <td>0.000221</td>\n",
       "      <td>5</td>\n",
       "      <td>0.000590</td>\n",
       "      <td>7.139110e-04</td>\n",
       "      <td>0.000588</td>\n",
       "      <td>0.000630</td>\n",
       "      <td>0.000059</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>34.468118</td>\n",
       "      <td>0.244954</td>\n",
       "      <td>7.396706</td>\n",
       "      <td>0.132371</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>{'C': 10, 'gamma': 10}</td>\n",
       "      <td>0.000013</td>\n",
       "      <td>-0.000370</td>\n",
       "      <td>-0.000003</td>\n",
       "      <td>-0.000120</td>\n",
       "      <td>0.000177</td>\n",
       "      <td>10</td>\n",
       "      <td>-0.000004</td>\n",
       "      <td>2.780709e-05</td>\n",
       "      <td>-0.000014</td>\n",
       "      <td>0.000003</td>\n",
       "      <td>0.000018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11</td>\n",
       "      <td>50.876772</td>\n",
       "      <td>0.254637</td>\n",
       "      <td>19.227997</td>\n",
       "      <td>0.276208</td>\n",
       "      <td>10</td>\n",
       "      <td>100</td>\n",
       "      <td>{'C': 10, 'gamma': 100}</td>\n",
       "      <td>-0.000015</td>\n",
       "      <td>-0.000392</td>\n",
       "      <td>-0.000029</td>\n",
       "      <td>-0.000145</td>\n",
       "      <td>0.000175</td>\n",
       "      <td>12</td>\n",
       "      <td>-0.000027</td>\n",
       "      <td>7.155761e-07</td>\n",
       "      <td>-0.000038</td>\n",
       "      <td>-0.000021</td>\n",
       "      <td>0.000016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>12</td>\n",
       "      <td>27.332514</td>\n",
       "      <td>0.131818</td>\n",
       "      <td>7.283653</td>\n",
       "      <td>0.016460</td>\n",
       "      <td>100</td>\n",
       "      <td>0.1</td>\n",
       "      <td>{'C': 100, 'gamma': 0.1}</td>\n",
       "      <td>0.052774</td>\n",
       "      <td>0.043664</td>\n",
       "      <td>0.049293</td>\n",
       "      <td>0.048577</td>\n",
       "      <td>0.003753</td>\n",
       "      <td>1</td>\n",
       "      <td>0.045814</td>\n",
       "      <td>5.217733e-02</td>\n",
       "      <td>0.048068</td>\n",
       "      <td>0.048686</td>\n",
       "      <td>0.002634</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>13</td>\n",
       "      <td>26.394654</td>\n",
       "      <td>0.267715</td>\n",
       "      <td>7.213220</td>\n",
       "      <td>0.037615</td>\n",
       "      <td>100</td>\n",
       "      <td>1</td>\n",
       "      <td>{'C': 100, 'gamma': 1}</td>\n",
       "      <td>0.006813</td>\n",
       "      <td>0.005206</td>\n",
       "      <td>0.006303</td>\n",
       "      <td>0.006107</td>\n",
       "      <td>0.000671</td>\n",
       "      <td>3</td>\n",
       "      <td>0.006060</td>\n",
       "      <td>6.952729e-03</td>\n",
       "      <td>0.006231</td>\n",
       "      <td>0.006414</td>\n",
       "      <td>0.000387</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>14</td>\n",
       "      <td>30.549727</td>\n",
       "      <td>0.140222</td>\n",
       "      <td>6.029888</td>\n",
       "      <td>0.088972</td>\n",
       "      <td>100</td>\n",
       "      <td>10</td>\n",
       "      <td>{'C': 100, 'gamma': 10}</td>\n",
       "      <td>0.000310</td>\n",
       "      <td>-0.000129</td>\n",
       "      <td>0.000277</td>\n",
       "      <td>0.000153</td>\n",
       "      <td>0.000199</td>\n",
       "      <td>6</td>\n",
       "      <td>0.000437</td>\n",
       "      <td>5.152575e-04</td>\n",
       "      <td>0.000437</td>\n",
       "      <td>0.000463</td>\n",
       "      <td>0.000037</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>15</td>\n",
       "      <td>42.880844</td>\n",
       "      <td>0.093149</td>\n",
       "      <td>9.801078</td>\n",
       "      <td>0.157013</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>{'C': 100, 'gamma': 100}</td>\n",
       "      <td>0.000045</td>\n",
       "      <td>-0.000349</td>\n",
       "      <td>0.000028</td>\n",
       "      <td>-0.000092</td>\n",
       "      <td>0.000182</td>\n",
       "      <td>9</td>\n",
       "      <td>0.000210</td>\n",
       "      <td>2.577257e-04</td>\n",
       "      <td>0.000203</td>\n",
       "      <td>0.000224</td>\n",
       "      <td>0.000024</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    mean_fit_time  std_fit_time  mean_score_time  std_score_time param_C  \\\n",
       "0       28.935423      0.717088         7.156590        0.025299     0.1   \n",
       "1       27.475492      0.378195         7.204206        0.028435     0.1   \n",
       "2       34.779717      0.560561         7.163631        0.089474     0.1   \n",
       "3       50.930683      0.286915        19.916553        0.042249     0.1   \n",
       "4       27.388708      0.394420         7.832045        0.651845       1   \n",
       "5       26.641604      0.196970         8.399695        0.672954       1   \n",
       "6       33.680093      0.346125         7.176957        0.082707       1   \n",
       "7       49.502940      0.484822        19.928661        0.631640       1   \n",
       "8       27.948703      0.335612         7.339709        0.010439      10   \n",
       "9       26.450837      0.041908         7.215188        0.019295      10   \n",
       "10      34.468118      0.244954         7.396706        0.132371      10   \n",
       "11      50.876772      0.254637        19.227997        0.276208      10   \n",
       "12      27.332514      0.131818         7.283653        0.016460     100   \n",
       "13      26.394654      0.267715         7.213220        0.037615     100   \n",
       "14      30.549727      0.140222         6.029888        0.088972     100   \n",
       "15      42.880844      0.093149         9.801078        0.157013     100   \n",
       "\n",
       "   param_gamma                    params  split0_test_score  \\\n",
       "0          0.1  {'C': 0.1, 'gamma': 0.1}           0.000063   \n",
       "1            1    {'C': 0.1, 'gamma': 1}          -0.000014   \n",
       "2           10   {'C': 0.1, 'gamma': 10}          -0.000021   \n",
       "3          100  {'C': 0.1, 'gamma': 100}          -0.000021   \n",
       "4          0.1    {'C': 1, 'gamma': 0.1}           0.000789   \n",
       "5            1      {'C': 1, 'gamma': 1}           0.000055   \n",
       "6           10     {'C': 1, 'gamma': 10}          -0.000018   \n",
       "7          100    {'C': 1, 'gamma': 100}          -0.000021   \n",
       "8          0.1   {'C': 10, 'gamma': 0.1}           0.007739   \n",
       "9            1     {'C': 10, 'gamma': 1}           0.000699   \n",
       "10          10    {'C': 10, 'gamma': 10}           0.000013   \n",
       "11         100   {'C': 10, 'gamma': 100}          -0.000015   \n",
       "12         0.1  {'C': 100, 'gamma': 0.1}           0.052774   \n",
       "13           1    {'C': 100, 'gamma': 1}           0.006813   \n",
       "14          10   {'C': 100, 'gamma': 10}           0.000310   \n",
       "15         100  {'C': 100, 'gamma': 100}           0.000045   \n",
       "\n",
       "    split1_test_score  split2_test_score  mean_test_score  std_test_score  \\\n",
       "0           -0.000327           0.000042        -0.000074        0.000179   \n",
       "1           -0.000391          -0.000028        -0.000144        0.000175   \n",
       "2           -0.000397          -0.000035        -0.000151        0.000174   \n",
       "3           -0.000397          -0.000035        -0.000151        0.000174   \n",
       "4            0.000282           0.000712         0.000594        0.000223   \n",
       "5           -0.000336           0.000034        -0.000082        0.000179   \n",
       "6           -0.000395          -0.000032        -0.000148        0.000174   \n",
       "7           -0.000397          -0.000034        -0.000151        0.000174   \n",
       "8            0.006083           0.007175         0.006999        0.000687   \n",
       "9            0.000197           0.000623         0.000506        0.000221   \n",
       "10          -0.000370          -0.000003        -0.000120        0.000177   \n",
       "11          -0.000392          -0.000029        -0.000145        0.000175   \n",
       "12           0.043664           0.049293         0.048577        0.003753   \n",
       "13           0.005206           0.006303         0.006107        0.000671   \n",
       "14          -0.000129           0.000277         0.000153        0.000199   \n",
       "15          -0.000349           0.000028        -0.000092        0.000182   \n",
       "\n",
       "    rank_test_score  split0_train_score  split1_train_score  \\\n",
       "0                 7            0.000019        5.659528e-05   \n",
       "1                11           -0.000047       -2.005343e-05   \n",
       "2                15           -0.000053       -2.738255e-05   \n",
       "3                16           -0.000053       -2.765540e-05   \n",
       "4                 4            0.000649        7.876734e-04   \n",
       "5                 8            0.000014        5.057323e-05   \n",
       "6                13           -0.000048       -2.236564e-05   \n",
       "7                14           -0.000051       -2.507480e-05   \n",
       "8                 2            0.006662        7.758712e-03   \n",
       "9                 5            0.000590        7.139110e-04   \n",
       "10               10           -0.000004        2.780709e-05   \n",
       "11               12           -0.000027        7.155761e-07   \n",
       "12                1            0.045814        5.217733e-02   \n",
       "13                3            0.006060        6.952729e-03   \n",
       "14                6            0.000437        5.152575e-04   \n",
       "15                9            0.000210        2.577257e-04   \n",
       "\n",
       "    split2_train_score  mean_train_score  std_train_score  \n",
       "0             0.000010          0.000029         0.000020  \n",
       "1            -0.000058         -0.000042         0.000016  \n",
       "2            -0.000064         -0.000048         0.000015  \n",
       "3            -0.000064         -0.000048         0.000015  \n",
       "4             0.000657          0.000698         0.000064  \n",
       "5             0.000003          0.000023         0.000020  \n",
       "6            -0.000060         -0.000044         0.000016  \n",
       "7            -0.000062         -0.000046         0.000015  \n",
       "8             0.006904          0.007108         0.000470  \n",
       "9             0.000588          0.000630         0.000059  \n",
       "10           -0.000014          0.000003         0.000018  \n",
       "11           -0.000038         -0.000021         0.000016  \n",
       "12            0.048068          0.048686         0.002634  \n",
       "13            0.006231          0.006414         0.000387  \n",
       "14            0.000437          0.000463         0.000037  \n",
       "15            0.000203          0.000224         0.000024  "
      ]
     },
     "execution_count": 162,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result_rbf = pd.DataFrame(grid_svr_rbf.cv_results_)\n",
    "result_rbf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1aae48e5288>]"
      ]
     },
     "execution_count": 163,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1aae40ffa88>]"
      ]
     },
     "execution_count": 163,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "([<matplotlib.axis.XTick at 0x1aa8b149708>,\n",
       "  <matplotlib.axis.XTick at 0x1aa8bc51dc8>,\n",
       "  <matplotlib.axis.XTick at 0x1aae80b2348>,\n",
       "  <matplotlib.axis.XTick at 0x1aae493c488>,\n",
       "  <matplotlib.axis.XTick at 0x1aae493cb08>,\n",
       "  <matplotlib.axis.XTick at 0x1aae813b608>],\n",
       " <a list of 6 Text xticklabel objects>)"
      ]
     },
     "execution_count": 163,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1aae56a7e08>]"
      ]
     },
     "execution_count": 163,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1aae813b288>]"
      ]
     },
     "execution_count": 163,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1aae56a5e88>"
      ]
     },
     "execution_count": 163,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(range(result_rbf.shape[0]), result_rbf['mean_train_score'], label = 'mean train score')\n",
    "plt.plot(range(result_rbf.shape[0]), result_rbf['mean_test_score'], label = 'mean test score')\n",
    "plt.xticks(range(result_svr_poly.shape[0]), result_rbf['param_C'], rotation = 90)\n",
    "plt.plot([grid_svr_rbf.best_index_], result_rbf['mean_train_score'][grid_svr_rbf.best_index_], 'o', markersize = 10, fillstyle = \"none\")\n",
    "plt.plot([grid_svr_rbf.best_index_], result_rbf['mean_test_score'][grid_svr_rbf.best_index_], 'o', markersize = 10, fillstyle = \"none\")\n",
    "plt.grid()\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Without PCA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.30463113432429384"
      ]
     },
     "execution_count": 201,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Linear_regression_scores['test_score'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(8714, 11)"
      ]
     },
     "execution_count": 209,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "shapes (8714,11) and (7,) not aligned: 11 (dim 1) != 7 (dim 0)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-207-3698db99830e>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mridge\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mscore\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my_test\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\sklearn\\base.py\u001b[0m in \u001b[0;36mscore\u001b[1;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[0;32m    406\u001b[0m         \u001b[1;32mfrom\u001b[0m \u001b[1;33m.\u001b[0m\u001b[0mmetrics\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mr2_score\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    407\u001b[0m         \u001b[1;32mfrom\u001b[0m \u001b[1;33m.\u001b[0m\u001b[0mmetrics\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mregression\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0m_check_reg_targets\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 408\u001b[1;33m         \u001b[0my_pred\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    409\u001b[0m         \u001b[1;31m# XXX: Remove the check in 0.23\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    410\u001b[0m         \u001b[0my_type\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0m_\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0m_\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0m_\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0m_check_reg_targets\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0my\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\base.py\u001b[0m in \u001b[0;36mpredict\u001b[1;34m(self, X)\u001b[0m\n\u001b[0;32m    219\u001b[0m             \u001b[0mReturns\u001b[0m \u001b[0mpredicted\u001b[0m \u001b[0mvalues\u001b[0m\u001b[1;33m.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    220\u001b[0m         \"\"\"\n\u001b[1;32m--> 221\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_decision_function\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    222\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    223\u001b[0m     \u001b[0m_preprocess_data\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mstaticmethod\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0m_preprocess_data\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\base.py\u001b[0m in \u001b[0;36m_decision_function\u001b[1;34m(self, X)\u001b[0m\n\u001b[0;32m    204\u001b[0m         \u001b[0mX\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maccept_sparse\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'csr'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'csc'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'coo'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    205\u001b[0m         return safe_sparse_dot(X, self.coef_.T,\n\u001b[1;32m--> 206\u001b[1;33m                                dense_output=True) + self.intercept_\n\u001b[0m\u001b[0;32m    207\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    208\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mpredict\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mX\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\sklearn\\utils\\extmath.py\u001b[0m in \u001b[0;36msafe_sparse_dot\u001b[1;34m(a, b, dense_output)\u001b[0m\n\u001b[0;32m    140\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mret\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    141\u001b[0m     \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 142\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdot\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0ma\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mb\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    143\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    144\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m<__array_function__ internals>\u001b[0m in \u001b[0;36mdot\u001b[1;34m(*args, **kwargs)\u001b[0m\n",
      "\u001b[1;31mValueError\u001b[0m: shapes (8714,11) and (7,) not aligned: 11 (dim 1) != 7 (dim 0)"
     ]
    }
   ],
   "source": [
    "ridge.score(X_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "shapes (8714,11) and (7,) not aligned: 11 (dim 1) != 7 (dim 0)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-204-9da97a353432>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      2\u001b[0m           'Test Score': [Linear_regression_scores['test_score'].mean(), \n\u001b[0;32m      3\u001b[0m                          \u001b[0mknn_scores\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'test_score'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 4\u001b[1;33m                          ridge.score(X_test, y_test),lasso.score(X_test, y_test),mean(poly_scores),lin_SVR.score(X_test, y_test),ker_SVR.score(X_test, y_test),grid_dtree.score(X_test,y_test)]}\n\u001b[0m",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\sklearn\\base.py\u001b[0m in \u001b[0;36mscore\u001b[1;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[0;32m    406\u001b[0m         \u001b[1;32mfrom\u001b[0m \u001b[1;33m.\u001b[0m\u001b[0mmetrics\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mr2_score\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    407\u001b[0m         \u001b[1;32mfrom\u001b[0m \u001b[1;33m.\u001b[0m\u001b[0mmetrics\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mregression\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0m_check_reg_targets\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 408\u001b[1;33m         \u001b[0my_pred\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    409\u001b[0m         \u001b[1;31m# XXX: Remove the check in 0.23\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    410\u001b[0m         \u001b[0my_type\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0m_\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0m_\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0m_\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0m_check_reg_targets\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0my\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\base.py\u001b[0m in \u001b[0;36mpredict\u001b[1;34m(self, X)\u001b[0m\n\u001b[0;32m    219\u001b[0m             \u001b[0mReturns\u001b[0m \u001b[0mpredicted\u001b[0m \u001b[0mvalues\u001b[0m\u001b[1;33m.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    220\u001b[0m         \"\"\"\n\u001b[1;32m--> 221\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_decision_function\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    222\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    223\u001b[0m     \u001b[0m_preprocess_data\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mstaticmethod\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0m_preprocess_data\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\base.py\u001b[0m in \u001b[0;36m_decision_function\u001b[1;34m(self, X)\u001b[0m\n\u001b[0;32m    204\u001b[0m         \u001b[0mX\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maccept_sparse\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'csr'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'csc'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'coo'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    205\u001b[0m         return safe_sparse_dot(X, self.coef_.T,\n\u001b[1;32m--> 206\u001b[1;33m                                dense_output=True) + self.intercept_\n\u001b[0m\u001b[0;32m    207\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    208\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mpredict\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mX\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\sklearn\\utils\\extmath.py\u001b[0m in \u001b[0;36msafe_sparse_dot\u001b[1;34m(a, b, dense_output)\u001b[0m\n\u001b[0;32m    140\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mret\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    141\u001b[0m     \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 142\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdot\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0ma\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mb\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    143\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    144\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m<__array_function__ internals>\u001b[0m in \u001b[0;36mdot\u001b[1;34m(*args, **kwargs)\u001b[0m\n",
      "\u001b[1;31mValueError\u001b[0m: shapes (8714,11) and (7,) not aligned: 11 (dim 1) != 7 (dim 0)"
     ]
    }
   ],
   "source": [
    "d = {'Model': ['Linear Regression', 'KNN Regression','Ridge Regression','Lasso Regression','Polynominal Regression','Simple SVR','SVR with Linear kernel','decision tree'],\n",
    "          'Test Score': [Linear_regression_scores['test_score'].mean(), \n",
    "                         knn_scores['test_score'].mean(), \n",
    "                         ridge.score(X_test, y_test),lasso.score(X_test, y_test),mean(poly_scores),lin_SVR.score(X_test, y_test),ker_SVR.score(X_test, y_test),grid_dtree.score(X_test,y_test)]}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model</th>\n",
       "      <th>Test Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Linear Regression</td>\n",
       "      <td>0.251816</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>KNN Regression</td>\n",
       "      <td>0.342838</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Ridge Regression</td>\n",
       "      <td>0.251829</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Lasso Regression</td>\n",
       "      <td>0.251816</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Polynominal Regression</td>\n",
       "      <td>0.275459</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>Simple SVR</td>\n",
       "      <td>0.065944</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>SVR with Linear kernel</td>\n",
       "      <td>0.196841</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>SVR with Poly kernel</td>\n",
       "      <td>0.133769</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>SVR with rbf kernel</td>\n",
       "      <td>0.068211</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    Model  Test Score\n",
       "0       Linear Regression    0.251816\n",
       "1          KNN Regression    0.342838\n",
       "2        Ridge Regression    0.251829\n",
       "3        Lasso Regression    0.251816\n",
       "4  Polynominal Regression    0.275459\n",
       "5              Simple SVR    0.065944\n",
       "6  SVR with Linear kernel    0.196841\n",
       "7    SVR with Poly kernel    0.133769\n",
       "8     SVR with rbf kernel    0.068211"
      ]
     },
     "execution_count": 165,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result = pd.DataFrame(data=d)\n",
    "result"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### With PCA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [],
   "source": [
    "result_pca = {'Model': ['Linear Regression', 'KNN Regression','Ridge Regression','Lasso Regression','Polynominal Regression','Simple SVR','SVR with Linear kernel','SVR with Poly kernel','SVR with rbf kernel'],\n",
    "          'Test Score': [lr_test_score, knn_test_score_, ridge_test_score_,lass_test_score_,pol_reg_test_score,lsvr_test_score,svr_test_score,svrp_test_score,svr_rbf_test_score]}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model</th>\n",
       "      <th>Test Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Linear Regression</td>\n",
       "      <td>0.251816</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>KNN Regression</td>\n",
       "      <td>0.342838</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Ridge Regression</td>\n",
       "      <td>0.251829</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Lasso Regression</td>\n",
       "      <td>0.251816</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Polynominal Regression</td>\n",
       "      <td>0.275459</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>Simple SVR</td>\n",
       "      <td>0.065944</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>SVR with Linear kernel</td>\n",
       "      <td>0.196841</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>SVR with Poly kernel</td>\n",
       "      <td>0.133769</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>SVR with rbf kernel</td>\n",
       "      <td>0.068211</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    Model  Test Score\n",
       "0       Linear Regression    0.251816\n",
       "1          KNN Regression    0.342838\n",
       "2        Ridge Regression    0.251829\n",
       "3        Lasso Regression    0.251816\n",
       "4  Polynominal Regression    0.275459\n",
       "5              Simple SVR    0.065944\n",
       "6  SVR with Linear kernel    0.196841\n",
       "7    SVR with Poly kernel    0.133769\n",
       "8     SVR with rbf kernel    0.068211"
      ]
     },
     "execution_count": 167,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result_pca = pd.DataFrame(data=result_pca)\n",
    "result_pca"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the above table, we could observe that all the models are not performing better with r-sqaured as a metric\n",
    "KNN performed is the best performing model. \n",
    "The r2 squared can be improved by adding data to the model. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Deep Learning Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting tensorflow\n",
      "  Using cached tensorflow-2.3.0-cp37-cp37m-win_amd64.whl (342.5 MB)\n",
      "Processing c:\\users\\vunda\\appdata\\local\\pip\\cache\\wheels\\8e\\28\\49\\fad4e7f0b9a1227708cbbee4487ac8558a7334849cb81c813d\\absl_py-0.9.0-cp37-none-any.whl\n",
      "Collecting astunparse==1.6.3\n",
      "  Using cached astunparse-1.6.3-py2.py3-none-any.whl (12 kB)\n",
      "Requirement already satisfied: scipy==1.4.1 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from tensorflow) (1.4.1)\n",
      "Collecting keras-preprocessing<1.2,>=1.1.1\n",
      "  Using cached Keras_Preprocessing-1.1.2-py2.py3-none-any.whl (42 kB)\n",
      "Requirement already satisfied: wheel>=0.26 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from tensorflow) (0.33.6)\n",
      "Collecting grpcio>=1.8.6\n",
      "  Using cached grpcio-1.30.0-cp37-cp37m-win_amd64.whl (2.3 MB)\n",
      "Collecting opt-einsum>=2.3.2\n",
      "  Using cached opt_einsum-3.3.0-py3-none-any.whl (65 kB)\n",
      "Requirement already satisfied: numpy<1.19.0,>=1.16.0 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from tensorflow) (1.18.5)\n",
      "Requirement already satisfied: termcolor>=1.1.0 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from tensorflow) (1.1.0)\n",
      "Requirement already satisfied: wrapt>=1.11.1 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from tensorflow) (1.11.2)\n",
      "Requirement already satisfied: six>=1.12.0 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from tensorflow) (1.12.0)\n",
      "Collecting tensorboard<3,>=2.3.0\n",
      "  Using cached tensorboard-2.3.0-py3-none-any.whl (6.8 MB)\n",
      "Collecting google-pasta>=0.1.8\n",
      "  Using cached google_pasta-0.2.0-py3-none-any.whl (57 kB)\n",
      "Collecting gast==0.3.3\n",
      "  Using cached gast-0.3.3-py2.py3-none-any.whl (9.7 kB)\n",
      "Collecting tensorflow-estimator<2.4.0,>=2.3.0\n",
      "  Using cached tensorflow_estimator-2.3.0-py2.py3-none-any.whl (459 kB)\n",
      "Requirement already satisfied: protobuf>=3.9.2 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from tensorflow) (3.12.4)\n",
      "Collecting h5py<2.11.0,>=2.10.0\n",
      "  Using cached h5py-2.10.0-cp37-cp37m-win_amd64.whl (2.5 MB)\n",
      "Collecting markdown>=2.6.8\n",
      "  Using cached Markdown-3.2.2-py3-none-any.whl (88 kB)\n",
      "Collecting google-auth-oauthlib<0.5,>=0.4.1\n",
      "  Using cached google_auth_oauthlib-0.4.1-py2.py3-none-any.whl (18 kB)\n",
      "Requirement already satisfied: setuptools>=41.0.0 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from tensorboard<3,>=2.3.0->tensorflow) (41.4.0)\n",
      "Requirement already satisfied: werkzeug>=0.11.15 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from tensorboard<3,>=2.3.0->tensorflow) (0.16.0)\n",
      "Requirement already satisfied: requests<3,>=2.21.0 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from tensorboard<3,>=2.3.0->tensorflow) (2.22.0)\n",
      "Collecting google-auth<2,>=1.6.3\n",
      "  Using cached google_auth-1.20.0-py2.py3-none-any.whl (91 kB)\n",
      "Collecting tensorboard-plugin-wit>=1.6.0\n",
      "  Using cached tensorboard_plugin_wit-1.7.0-py3-none-any.whl (779 kB)\n",
      "Requirement already satisfied: importlib-metadata; python_version < \"3.8\" in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from markdown>=2.6.8->tensorboard<3,>=2.3.0->tensorflow) (0.23)\n",
      "Collecting requests-oauthlib>=0.7.0\n",
      "  Using cached requests_oauthlib-1.3.0-py2.py3-none-any.whl (23 kB)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from requests<3,>=2.21.0->tensorboard<3,>=2.3.0->tensorflow) (2019.9.11)\n",
      "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from requests<3,>=2.21.0->tensorboard<3,>=2.3.0->tensorflow) (1.24.2)\n",
      "Requirement already satisfied: chardet<3.1.0,>=3.0.2 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from requests<3,>=2.21.0->tensorboard<3,>=2.3.0->tensorflow) (3.0.4)\n",
      "Requirement already satisfied: idna<2.9,>=2.5 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from requests<3,>=2.21.0->tensorboard<3,>=2.3.0->tensorflow) (2.8)\n",
      "Collecting pyasn1-modules>=0.2.1\n",
      "  Using cached pyasn1_modules-0.2.8-py2.py3-none-any.whl (155 kB)\n",
      "Collecting cachetools<5.0,>=2.0.0\n",
      "  Using cached cachetools-4.1.1-py3-none-any.whl (10 kB)\n",
      "Collecting rsa<5,>=3.1.4; python_version >= \"3.5\"\n",
      "  Using cached rsa-4.6-py3-none-any.whl (47 kB)\n",
      "Requirement already satisfied: zipp>=0.5 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from importlib-metadata; python_version < \"3.8\"->markdown>=2.6.8->tensorboard<3,>=2.3.0->tensorflow) (0.6.0)\n",
      "Collecting oauthlib>=3.0.0\n",
      "  Using cached oauthlib-3.1.0-py2.py3-none-any.whl (147 kB)\n",
      "Collecting pyasn1<0.5.0,>=0.4.6\n",
      "  Using cached pyasn1-0.4.8-py2.py3-none-any.whl (77 kB)\n",
      "Requirement already satisfied: more-itertools in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from zipp>=0.5->importlib-metadata; python_version < \"3.8\"->markdown>=2.6.8->tensorboard<3,>=2.3.0->tensorflow) (7.2.0)\n",
      "Installing collected packages: absl-py, astunparse, keras-preprocessing, grpcio, opt-einsum, markdown, oauthlib, requests-oauthlib, pyasn1, pyasn1-modules, cachetools, rsa, google-auth, google-auth-oauthlib, tensorboard-plugin-wit, tensorboard, google-pasta, gast, tensorflow-estimator, h5py, tensorflow\n",
      "  Attempting uninstall: h5py\n",
      "    Found existing installation: h5py 2.9.0\n",
      "    Uninstalling h5py-2.9.0:\n",
      "      Successfully uninstalled h5py-2.9.0\n",
      "Successfully installed absl-py-0.9.0 astunparse-1.6.3 cachetools-4.1.1 gast-0.3.3 google-auth-1.20.0 google-auth-oauthlib-0.4.1 google-pasta-0.2.0 grpcio-1.30.0 h5py-2.10.0 keras-preprocessing-1.1.2 markdown-3.2.2 oauthlib-3.1.0 opt-einsum-3.3.0 pyasn1-0.4.8 pyasn1-modules-0.2.8 requests-oauthlib-1.3.0 rsa-4.6 tensorboard-2.3.0 tensorboard-plugin-wit-1.7.0 tensorflow-2.3.0 tensorflow-estimator-2.3.0\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install tensorflow"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3.7.4\n"
     ]
    }
   ],
   "source": [
    "from platform import python_version\n",
    "\n",
    "print(python_version())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already up-to-date: pip in c:\\users\\vunda\\anaconda3\\lib\\site-packages (20.2)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install --upgrade pip"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already up-to-date: tensorflow in c:\\users\\vunda\\anaconda3\\lib\\site-packages (2.3.0)\n",
      "Requirement already satisfied, skipping upgrade: astunparse==1.6.3 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from tensorflow) (1.6.3)\n",
      "Requirement already satisfied, skipping upgrade: h5py<2.11.0,>=2.10.0 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from tensorflow) (2.10.0)\n",
      "Requirement already satisfied, skipping upgrade: numpy<1.19.0,>=1.16.0 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from tensorflow) (1.18.5)\n",
      "Requirement already satisfied, skipping upgrade: grpcio>=1.8.6 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from tensorflow) (1.30.0)\n",
      "Requirement already satisfied, skipping upgrade: gast==0.3.3 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from tensorflow) (0.3.3)\n",
      "Requirement already satisfied, skipping upgrade: absl-py>=0.7.0 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from tensorflow) (0.9.0)\n",
      "Requirement already satisfied, skipping upgrade: wheel>=0.26 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from tensorflow) (0.33.6)\n",
      "Requirement already satisfied, skipping upgrade: six>=1.12.0 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from tensorflow) (1.12.0)\n",
      "Requirement already satisfied, skipping upgrade: opt-einsum>=2.3.2 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from tensorflow) (3.3.0)\n",
      "Requirement already satisfied, skipping upgrade: termcolor>=1.1.0 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from tensorflow) (1.1.0)\n",
      "Requirement already satisfied, skipping upgrade: google-pasta>=0.1.8 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from tensorflow) (0.2.0)\n",
      "Requirement already satisfied, skipping upgrade: tensorflow-estimator<2.4.0,>=2.3.0 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from tensorflow) (2.3.0)\n",
      "Requirement already satisfied, skipping upgrade: tensorboard<3,>=2.3.0 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from tensorflow) (2.3.0)\n",
      "Requirement already satisfied, skipping upgrade: scipy==1.4.1 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from tensorflow) (1.4.1)\n",
      "Requirement already satisfied, skipping upgrade: wrapt>=1.11.1 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from tensorflow) (1.11.2)\n",
      "Requirement already satisfied, skipping upgrade: protobuf>=3.9.2 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from tensorflow) (3.12.4)\n",
      "Requirement already satisfied, skipping upgrade: keras-preprocessing<1.2,>=1.1.1 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from tensorflow) (1.1.2)\n",
      "Requirement already satisfied, skipping upgrade: setuptools>=41.0.0 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from tensorboard<3,>=2.3.0->tensorflow) (41.4.0)\n",
      "Requirement already satisfied, skipping upgrade: tensorboard-plugin-wit>=1.6.0 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from tensorboard<3,>=2.3.0->tensorflow) (1.7.0)\n",
      "Requirement already satisfied, skipping upgrade: google-auth<2,>=1.6.3 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from tensorboard<3,>=2.3.0->tensorflow) (1.20.0)\n",
      "Requirement already satisfied, skipping upgrade: google-auth-oauthlib<0.5,>=0.4.1 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from tensorboard<3,>=2.3.0->tensorflow) (0.4.1)\n",
      "Requirement already satisfied, skipping upgrade: markdown>=2.6.8 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from tensorboard<3,>=2.3.0->tensorflow) (3.2.2)\n",
      "Requirement already satisfied, skipping upgrade: werkzeug>=0.11.15 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from tensorboard<3,>=2.3.0->tensorflow) (0.16.0)\n",
      "Requirement already satisfied, skipping upgrade: requests<3,>=2.21.0 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from tensorboard<3,>=2.3.0->tensorflow) (2.22.0)\n",
      "Requirement already satisfied, skipping upgrade: cachetools<5.0,>=2.0.0 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from google-auth<2,>=1.6.3->tensorboard<3,>=2.3.0->tensorflow) (4.1.1)\n",
      "Requirement already satisfied, skipping upgrade: rsa<5,>=3.1.4; python_version >= \"3.5\" in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from google-auth<2,>=1.6.3->tensorboard<3,>=2.3.0->tensorflow) (4.6)\n",
      "Requirement already satisfied, skipping upgrade: pyasn1-modules>=0.2.1 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from google-auth<2,>=1.6.3->tensorboard<3,>=2.3.0->tensorflow) (0.2.8)\n",
      "Requirement already satisfied, skipping upgrade: requests-oauthlib>=0.7.0 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard<3,>=2.3.0->tensorflow) (1.3.0)\n",
      "Requirement already satisfied, skipping upgrade: importlib-metadata; python_version < \"3.8\" in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from markdown>=2.6.8->tensorboard<3,>=2.3.0->tensorflow) (0.23)\n",
      "Requirement already satisfied, skipping upgrade: certifi>=2017.4.17 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from requests<3,>=2.21.0->tensorboard<3,>=2.3.0->tensorflow) (2019.9.11)\n",
      "Requirement already satisfied, skipping upgrade: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from requests<3,>=2.21.0->tensorboard<3,>=2.3.0->tensorflow) (1.24.2)\n",
      "Requirement already satisfied, skipping upgrade: chardet<3.1.0,>=3.0.2 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from requests<3,>=2.21.0->tensorboard<3,>=2.3.0->tensorflow) (3.0.4)\n",
      "Requirement already satisfied, skipping upgrade: idna<2.9,>=2.5 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from requests<3,>=2.21.0->tensorboard<3,>=2.3.0->tensorflow) (2.8)\n",
      "Requirement already satisfied, skipping upgrade: pyasn1>=0.1.3 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from rsa<5,>=3.1.4; python_version >= \"3.5\"->google-auth<2,>=1.6.3->tensorboard<3,>=2.3.0->tensorflow) (0.4.8)\n",
      "Requirement already satisfied, skipping upgrade: oauthlib>=3.0.0 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard<3,>=2.3.0->tensorflow) (3.1.0)\n",
      "Requirement already satisfied, skipping upgrade: zipp>=0.5 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from importlib-metadata; python_version < \"3.8\"->markdown>=2.6.8->tensorboard<3,>=2.3.0->tensorflow) (0.6.0)\n",
      "Requirement already satisfied, skipping upgrade: more-itertools in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from zipp>=0.5->importlib-metadata; python_version < \"3.8\"->markdown>=2.6.8->tensorboard<3,>=2.3.0->tensorflow) (7.2.0)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install --upgrade tensorflow"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# %matplotlib inline\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense, Activation\n",
    "from keras.optimizers import SGD\n",
    "from keras.utils import np_utils"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pip install tensorflow==1.2.0 --ignore-installed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting keras\n",
      "  Downloading Keras-2.4.3-py2.py3-none-any.whl (36 kB)\n",
      "Requirement already satisfied: h5py in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from keras) (2.10.0)\n",
      "Requirement already satisfied: numpy>=1.9.1 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from keras) (1.18.5)\n",
      "Requirement already satisfied: pyyaml in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from keras) (5.1.2)\n",
      "Requirement already satisfied: scipy>=0.14 in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from keras) (1.4.1)\n",
      "Requirement already satisfied: six in c:\\users\\vunda\\anaconda3\\lib\\site-packages (from h5py->keras) (1.12.0)\n",
      "Installing collected packages: keras\n",
      "Successfully installed keras-2.4.3\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install keras"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train_nn = np.asarray(X_train)\n",
    "X_test_nn = np.asarray(X_test)\n",
    "y_train = np.asarray(y_train)\n",
    "y_test = np.asarray(y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(26140, 11)"
      ]
     },
     "execution_count": 176,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_nn.shape[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/500\n",
      "262/262 [==============================] - 0s 719us/step - loss: 1434118651904.0000\n",
      "Epoch 2/500\n",
      "262/262 [==============================] - 0s 657us/step - loss: 1434072383488.0000\n",
      "Epoch 3/500\n",
      "262/262 [==============================] - 0s 702us/step - loss: 1433898713088.0000\n",
      "Epoch 4/500\n",
      "262/262 [==============================] - 0s 653us/step - loss: 1433527517184.0000\n",
      "Epoch 5/500\n",
      "262/262 [==============================] - 0s 768us/step - loss: 1432913182720.0000\n",
      "Epoch 6/500\n",
      "262/262 [==============================] - 0s 797us/step - loss: 1432021106688.0000\n",
      "Epoch 7/500\n",
      "262/262 [==============================] - 0s 759us/step - loss: 1430827958272.0000\n",
      "Epoch 8/500\n",
      "262/262 [==============================] - 0s 793us/step - loss: 1429311586304.0000\n",
      "Epoch 9/500\n",
      "262/262 [==============================] - 0s 702us/step - loss: 1427453902848.0000\n",
      "Epoch 10/500\n",
      "262/262 [==============================] - 0s 824us/step - loss: 1425241407488.0000\n",
      "Epoch 11/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 1422663090176.0000\n",
      "Epoch 12/500\n",
      "262/262 [==============================] - 0s 673us/step - loss: 1419711741952.0000\n",
      "Epoch 13/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 1416374779904.0000\n",
      "Epoch 14/500\n",
      "262/262 [==============================] - 0s 679us/step - loss: 1412648402944.0000\n",
      "Epoch 15/500\n",
      "262/262 [==============================] - 0s 702us/step - loss: 1408522256384.0000\n",
      "Epoch 16/500\n",
      "262/262 [==============================] - 0s 661us/step - loss: 1403985330176.0000\n",
      "Epoch 17/500\n",
      "262/262 [==============================] - 0s 690us/step - loss: 1399041949696.0000\n",
      "Epoch 18/500\n",
      "262/262 [==============================] - 0s 723us/step - loss: 1393680187392.0000\n",
      "Epoch 19/500\n",
      "262/262 [==============================] - 0s 704us/step - loss: 1387896766464.0000\n",
      "Epoch 20/500\n",
      "262/262 [==============================] - 0s 702us/step - loss: 1381687492608.0000\n",
      "Epoch 21/500\n",
      "262/262 [==============================] - 0s 763us/step - loss: 1375044763648.0000\n",
      "Epoch 22/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 1367967137792.0000\n",
      "Epoch 23/500\n",
      "262/262 [==============================] - 0s 720us/step - loss: 1360444129280.0000\n",
      "Epoch 24/500\n",
      "262/262 [==============================] - 0s 732us/step - loss: 1352486486016.0000\n",
      "Epoch 25/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 1344084377600.0000\n",
      "Epoch 26/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 1335232561152.0000\n",
      "Epoch 27/500\n",
      "262/262 [==============================] - 0s 702us/step - loss: 1325933002752.0000\n",
      "Epoch 28/500\n",
      "262/262 [==============================] - 0s 688us/step - loss: 1316189634560.0000\n",
      "Epoch 29/500\n",
      "262/262 [==============================] - 0s 695us/step - loss: 1305994723328.0000\n",
      "Epoch 30/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 1295362686976.0000\n",
      "Epoch 31/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 1284291690496.0000\n",
      "Epoch 32/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 1272774393856.0000\n",
      "Epoch 33/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 1260811452416.0000\n",
      "Epoch 34/500\n",
      "262/262 [==============================] - 0s 638us/step - loss: 1248408240128.0000\n",
      "Epoch 35/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 1235580354560.0000\n",
      "Epoch 36/500\n",
      "262/262 [==============================] - 0s 688us/step - loss: 1222330417152.0000\n",
      "Epoch 37/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 1208673763328.0000\n",
      "Epoch 38/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 1194603446272.0000\n",
      "Epoch 39/500\n",
      "262/262 [==============================] - 0s 674us/step - loss: 1180143583232.0000\n",
      "Epoch 40/500\n",
      "262/262 [==============================] - 0s 659us/step - loss: 1165295091712.0000\n",
      "Epoch 41/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 1150069899264.0000\n",
      "Epoch 42/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 1134496448512.0000\n",
      "Epoch 43/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 1118587453440.0000\n",
      "Epoch 44/500\n",
      "262/262 [==============================] - 0s 674us/step - loss: 1102350778368.0000\n",
      "Epoch 45/500\n",
      "262/262 [==============================] - 0s 679us/step - loss: 1085794484224.0000\n",
      "Epoch 46/500\n",
      "262/262 [==============================] - 0s 693us/step - loss: 1068940132352.0000\n",
      "Epoch 47/500\n",
      "262/262 [==============================] - 0s 702us/step - loss: 1051812954112.0000\n",
      "Epoch 48/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 1034442571776.0000\n",
      "Epoch 49/500\n",
      "262/262 [==============================] - 0s 672us/step - loss: 1016817844224.0000\n",
      "Epoch 50/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 998992904192.0000\n",
      "Epoch 51/500\n",
      "262/262 [==============================] - 0s 673us/step - loss: 980968341504.0000\n",
      "Epoch 52/500\n",
      "262/262 [==============================] - 0s 674us/step - loss: 962817228800.0000\n",
      "Epoch 53/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 944535306240.0000\n",
      "Epoch 54/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 926127357952.0000\n",
      "Epoch 55/500\n",
      "262/262 [==============================] - 0s 674us/step - loss: 907617042432.0000\n",
      "Epoch 56/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 889034309632.0000\n",
      "Epoch 57/500\n",
      "262/262 [==============================] - 0s 661us/step - loss: 870437158912.0000\n",
      "Epoch 58/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 851841187840.0000\n",
      "Epoch 59/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 833257799680.0000\n",
      "Epoch 60/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 814797619200.0000\n",
      "Epoch 61/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 796450357248.0000\n",
      "Epoch 62/500\n",
      "262/262 [==============================] - 0s 658us/step - loss: 778216669184.0000\n",
      "Epoch 63/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 760168972288.0000\n",
      "Epoch 64/500\n",
      "262/262 [==============================] - 0s 674us/step - loss: 742317883392.0000\n",
      "Epoch 65/500\n",
      "262/262 [==============================] - 0s 646us/step - loss: 724718649344.0000\n",
      "Epoch 66/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 707380969472.0000\n",
      "Epoch 67/500\n",
      "262/262 [==============================] - 0s 704us/step - loss: 690346852352.0000\n",
      "Epoch 68/500\n",
      "262/262 [==============================] - 0s 665us/step - loss: 673669840896.0000\n",
      "Epoch 69/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 657323327488.0000\n",
      "Epoch 70/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 641361051648.0000\n",
      "Epoch 71/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 625837342720.0000\n",
      "Epoch 72/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 610744664064.0000\n",
      "Epoch 73/500\n",
      "262/262 [==============================] - 0s 687us/step - loss: 596105494528.0000\n",
      "Epoch 74/500\n",
      "262/262 [==============================] - 0s 689us/step - loss: 581963415552.0000\n",
      "Epoch 75/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 568304795648.0000\n",
      "Epoch 76/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 555165941760.0000\n",
      "Epoch 77/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 542558715904.0000\n",
      "Epoch 78/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 530491867136.0000\n",
      "Epoch 79/500\n",
      "262/262 [==============================] - 0s 676us/step - loss: 518941966336.0000\n",
      "Epoch 80/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 507926577152.0000\n",
      "Epoch 81/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 497414995968.0000\n",
      "Epoch 82/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 487444578304.0000\n",
      "Epoch 83/500\n",
      "262/262 [==============================] - 0s 702us/step - loss: 477991370752.0000\n",
      "Epoch 84/500\n",
      "262/262 [==============================] - 0s 718us/step - loss: 469017755648.0000\n",
      "Epoch 85/500\n",
      "262/262 [==============================] - 0s 688us/step - loss: 460555321344.0000\n",
      "Epoch 86/500\n",
      "262/262 [==============================] - 0s 672us/step - loss: 452570808320.0000\n",
      "Epoch 87/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 445033775104.0000\n",
      "Epoch 88/500\n",
      "262/262 [==============================] - 0s 642us/step - loss: 437920104448.0000\n",
      "Epoch 89/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 431223209984.0000\n",
      "Epoch 90/500\n",
      "262/262 [==============================] - 0s 688us/step - loss: 424912125952.0000\n",
      "Epoch 91/500\n",
      "262/262 [==============================] - 0s 657us/step - loss: 418987245568.0000\n",
      "Epoch 92/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 413409607680.0000\n",
      "Epoch 93/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 408149884928.0000\n",
      "Epoch 94/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 403177537536.0000\n",
      "Epoch 95/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 398457405440.0000\n",
      "Epoch 96/500\n",
      "262/262 [==============================] - 0s 734us/step - loss: 393989685248.0000\n",
      "Epoch 97/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 389745082368.0000\n",
      "Epoch 98/500\n",
      "262/262 [==============================] - 0s 710us/step - loss: 385717764096.0000\n",
      "Epoch 99/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 381870538752.0000\n",
      "Epoch 100/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 378196590592.0000\n",
      "Epoch 101/500\n",
      "262/262 [==============================] - 0s 677us/step - loss: 374669115392.0000\n",
      "Epoch 102/500\n",
      "262/262 [==============================] - 0s 698us/step - loss: 371270483968.0000\n",
      "Epoch 103/500\n",
      "262/262 [==============================] - 0s 702us/step - loss: 367994994688.0000\n",
      "Epoch 104/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 364824133632.0000\n",
      "Epoch 105/500\n",
      "262/262 [==============================] - 0s 673us/step - loss: 361767043072.0000\n",
      "Epoch 106/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 358798524416.0000\n",
      "Epoch 107/500\n",
      "262/262 [==============================] - 0s 679us/step - loss: 355906387968.0000\n",
      "Epoch 108/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 353095548928.0000\n",
      "Epoch 109/500\n",
      "262/262 [==============================] - 0s 702us/step - loss: 350353817600.0000\n",
      "Epoch 110/500\n",
      "262/262 [==============================] - 0s 702us/step - loss: 347673853952.0000\n",
      "Epoch 111/500\n",
      "262/262 [==============================] - 0s 703us/step - loss: 345057689600.0000\n",
      "Epoch 112/500\n",
      "262/262 [==============================] - 0s 688us/step - loss: 342515253248.0000\n",
      "Epoch 113/500\n",
      "262/262 [==============================] - 0s 660us/step - loss: 340027310080.0000\n",
      "Epoch 114/500\n",
      "262/262 [==============================] - 0s 676us/step - loss: 337612210176.0000\n",
      "Epoch 115/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 335222734848.0000\n",
      "Epoch 116/500\n",
      "262/262 [==============================] - 0s 672us/step - loss: 332879364096.0000\n",
      "Epoch 117/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 330599923712.0000\n",
      "Epoch 118/500\n",
      "262/262 [==============================] - 0s 643us/step - loss: 328358821888.0000\n",
      "Epoch 119/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 326158712832.0000\n",
      "Epoch 120/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 323999858688.0000\n",
      "Epoch 121/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 321902411776.0000\n",
      "Epoch 122/500\n",
      "262/262 [==============================] - 0s 689us/step - loss: 319848644608.0000\n",
      "Epoch 123/500\n",
      "262/262 [==============================] - 0s 673us/step - loss: 317830594560.0000\n",
      "Epoch 124/500\n",
      "262/262 [==============================] - 0s 644us/step - loss: 315846688768.0000\n",
      "Epoch 125/500\n",
      "262/262 [==============================] - 0s 654us/step - loss: 313895223296.0000\n",
      "Epoch 126/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 312002936832.0000\n",
      "Epoch 127/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 310147317760.0000\n",
      "Epoch 128/500\n",
      "262/262 [==============================] - 0s 675us/step - loss: 308328628224.0000\n",
      "Epoch 129/500\n",
      "262/262 [==============================] - 0s 662us/step - loss: 306547163136.0000\n",
      "Epoch 130/500\n",
      "262/262 [==============================] - 0s 656us/step - loss: 304797351936.0000\n",
      "Epoch 131/500\n",
      "262/262 [==============================] - 0s 763us/step - loss: 303074574336.0000\n",
      "Epoch 132/500\n",
      "262/262 [==============================] - 0s 702us/step - loss: 301387022336.0000\n",
      "Epoch 133/500\n",
      "262/262 [==============================] - 0s 702us/step - loss: 299732860928.0000\n",
      "Epoch 134/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 298117955584.0000\n",
      "Epoch 135/500\n",
      "262/262 [==============================] - 0s 705us/step - loss: 296539717632.0000\n",
      "Epoch 136/500\n",
      "262/262 [==============================] - 0s 649us/step - loss: 294990577664.0000\n",
      "Epoch 137/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 293480595456.0000\n",
      "Epoch 138/500\n",
      "262/262 [==============================] - 0s 702us/step - loss: 292043948032.0000\n",
      "Epoch 139/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 290632957952.0000\n",
      "Epoch 140/500\n",
      "262/262 [==============================] - 0s 703us/step - loss: 289246085120.0000\n",
      "Epoch 141/500\n",
      "262/262 [==============================] - 0s 687us/step - loss: 287871401984.0000\n",
      "Epoch 142/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 286511529984.0000\n",
      "Epoch 143/500\n",
      "262/262 [==============================] - 0s 643us/step - loss: 285181280256.0000\n",
      "Epoch 144/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 283866988544.0000\n",
      "Epoch 145/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 282580287488.0000\n",
      "Epoch 146/500\n",
      "262/262 [==============================] - 0s 689us/step - loss: 281308594176.0000\n",
      "Epoch 147/500\n",
      "262/262 [==============================] - 0s 655us/step - loss: 280072060928.0000\n",
      "Epoch 148/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 278857580544.0000\n",
      "Epoch 149/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 277666988032.0000\n",
      "Epoch 150/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 276503887872.0000\n",
      "Epoch 151/500\n",
      "262/262 [==============================] - 0s 643us/step - loss: 275353272320.0000\n",
      "Epoch 152/500\n",
      "262/262 [==============================] - 0s 679us/step - loss: 274232688640.0000\n",
      "Epoch 153/500\n",
      "262/262 [==============================] - 0s 703us/step - loss: 273135337472.0000\n",
      "Epoch 154/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 272050405376.0000\n",
      "Epoch 155/500\n",
      "262/262 [==============================] - 0s 672us/step - loss: 270983823360.0000\n",
      "Epoch 156/500\n",
      "262/262 [==============================] - 0s 646us/step - loss: 269939441664.0000\n",
      "Epoch 157/500\n",
      "262/262 [==============================] - 0s 673us/step - loss: 268915851264.0000\n",
      "Epoch 158/500\n",
      "262/262 [==============================] - 0s 663us/step - loss: 267916296192.0000\n",
      "Epoch 159/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 266935746560.0000\n",
      "Epoch 160/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 265975824384.0000\n",
      "Epoch 161/500\n",
      "262/262 [==============================] - 0s 680us/step - loss: 265021227008.0000\n",
      "Epoch 162/500\n",
      "262/262 [==============================] - 0s 676us/step - loss: 264090648576.0000\n",
      "Epoch 163/500\n",
      "262/262 [==============================] - 0s 691us/step - loss: 263179255808.0000\n",
      "Epoch 164/500\n",
      "262/262 [==============================] - 0s 661us/step - loss: 262289637376.0000\n",
      "Epoch 165/500\n",
      "262/262 [==============================] - 0s 674us/step - loss: 261412945920.0000\n",
      "Epoch 166/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 260562944000.0000\n",
      "Epoch 167/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 259722838016.0000\n",
      "Epoch 168/500\n",
      "262/262 [==============================] - 0s 702us/step - loss: 258893299712.0000\n",
      "Epoch 169/500\n",
      "262/262 [==============================] - 0s 675us/step - loss: 258086813696.0000\n",
      "Epoch 170/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 257291927552.0000\n",
      "Epoch 171/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 256509509632.0000\n",
      "Epoch 172/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 255740018688.0000\n",
      "Epoch 173/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 254982504448.0000\n",
      "Epoch 174/500\n",
      "262/262 [==============================] - 0s 673us/step - loss: 254248157184.0000\n",
      "Epoch 175/500\n",
      "262/262 [==============================] - 0s 666us/step - loss: 253520248832.0000\n",
      "Epoch 176/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 252803661824.0000\n",
      "Epoch 177/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 252109062144.0000\n",
      "Epoch 178/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 251418263552.0000\n",
      "Epoch 179/500\n",
      "262/262 [==============================] - 0s 702us/step - loss: 250741882880.0000\n",
      "Epoch 180/500\n",
      "262/262 [==============================] - 0s 674us/step - loss: 250087948288.0000\n",
      "Epoch 181/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 249427247104.0000\n",
      "Epoch 182/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 248789630976.0000\n",
      "Epoch 183/500\n",
      "262/262 [==============================] - 0s 673us/step - loss: 248161206272.0000\n",
      "Epoch 184/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 247546314752.0000\n",
      "Epoch 185/500\n",
      "262/262 [==============================] - 0s 751us/step - loss: 246938484736.0000\n",
      "Epoch 186/500\n",
      "262/262 [==============================] - 0s 690us/step - loss: 246349316096.0000\n",
      "Epoch 187/500\n",
      "262/262 [==============================] - 0s 645us/step - loss: 245767815168.0000\n",
      "Epoch 188/500\n",
      "262/262 [==============================] - 0s 674us/step - loss: 245196439552.0000\n",
      "Epoch 189/500\n",
      "262/262 [==============================] - 0s 666us/step - loss: 244636368896.0000\n",
      "Epoch 190/500\n",
      "262/262 [==============================] - 0s 646us/step - loss: 244084686848.0000\n",
      "Epoch 191/500\n",
      "262/262 [==============================] - 0s 672us/step - loss: 243541590016.0000\n",
      "Epoch 192/500\n",
      "262/262 [==============================] - 0s 657us/step - loss: 243009634304.0000\n",
      "Epoch 193/500\n",
      "262/262 [==============================] - 0s 675us/step - loss: 242482135040.0000\n",
      "Epoch 194/500\n",
      "262/262 [==============================] - 0s 646us/step - loss: 241968136192.0000\n",
      "Epoch 195/500\n",
      "262/262 [==============================] - 0s 872us/step - loss: 241464524800.0000\n",
      "Epoch 196/500\n",
      "262/262 [==============================] - 0s 750us/step - loss: 240969400320.0000\n",
      "Epoch 197/500\n",
      "262/262 [==============================] - 0s 656us/step - loss: 240486203392.0000\n",
      "Epoch 198/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 240017358848.0000\n",
      "Epoch 199/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 239552249856.0000\n",
      "Epoch 200/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 239095988224.0000\n",
      "Epoch 201/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 238653243392.0000\n",
      "Epoch 202/500\n",
      "262/262 [==============================] - 0s 658us/step - loss: 238214594560.0000\n",
      "Epoch 203/500\n",
      "262/262 [==============================] - 0s 656us/step - loss: 237788430336.0000\n",
      "Epoch 204/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 237370753024.0000\n",
      "Epoch 205/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 236960841728.0000\n",
      "Epoch 206/500\n",
      "262/262 [==============================] - 0s 718us/step - loss: 236566626304.0000\n",
      "Epoch 207/500\n",
      "262/262 [==============================] - 0s 687us/step - loss: 236173656064.0000\n",
      "Epoch 208/500\n",
      "262/262 [==============================] - 0s 846us/step - loss: 235792367616.0000\n",
      "Epoch 209/500\n",
      "262/262 [==============================] - 0s 706us/step - loss: 235420008448.0000\n",
      "Epoch 210/500\n",
      "262/262 [==============================] - 0s 768us/step - loss: 235051794432.0000\n",
      "Epoch 211/500\n",
      "262/262 [==============================] - 0s 716us/step - loss: 234692509696.0000\n",
      "Epoch 212/500\n",
      "262/262 [==============================] - 0s 661us/step - loss: 234330374144.0000\n",
      "Epoch 213/500\n",
      "262/262 [==============================] - 0s 661us/step - loss: 233978773504.0000\n",
      "Epoch 214/500\n",
      "262/262 [==============================] - 0s 707us/step - loss: 233636265984.0000\n",
      "Epoch 215/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 233298018304.0000\n",
      "Epoch 216/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 232969175040.0000\n",
      "Epoch 217/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 232650457088.0000\n",
      "Epoch 218/500\n",
      "262/262 [==============================] - 0s 673us/step - loss: 232336883712.0000\n",
      "Epoch 219/500\n",
      "262/262 [==============================] - 0s 660us/step - loss: 232025620480.0000\n",
      "Epoch 220/500\n",
      "262/262 [==============================] - 0s 677us/step - loss: 231723646976.0000\n",
      "Epoch 221/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 231423787008.0000\n",
      "Epoch 222/500\n",
      "262/262 [==============================] - 0s 719us/step - loss: 231131578368.0000\n",
      "Epoch 223/500\n",
      "262/262 [==============================] - 0s 703us/step - loss: 230842040320.0000\n",
      "Epoch 224/500\n",
      "262/262 [==============================] - 0s 704us/step - loss: 230562480128.0000\n",
      "Epoch 225/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 230282641408.0000\n",
      "Epoch 226/500\n",
      "262/262 [==============================] - 0s 610us/step - loss: 230007603200.0000\n",
      "Epoch 227/500\n",
      "262/262 [==============================] - 0s 643us/step - loss: 229741035520.0000\n",
      "Epoch 228/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 229480071168.0000\n",
      "Epoch 229/500\n",
      "262/262 [==============================] - 0s 672us/step - loss: 229223809024.0000\n",
      "Epoch 230/500\n",
      "262/262 [==============================] - 0s 658us/step - loss: 228969316352.0000\n",
      "Epoch 231/500\n",
      "262/262 [==============================] - 0s 702us/step - loss: 228723949568.0000\n",
      "Epoch 232/500\n",
      "262/262 [==============================] - 0s 681us/step - loss: 228480630784.0000\n",
      "Epoch 233/500\n",
      "262/262 [==============================] - 0s 702us/step - loss: 228250189824.0000\n",
      "Epoch 234/500\n",
      "262/262 [==============================] - 0s 704us/step - loss: 228017455104.0000\n",
      "Epoch 235/500\n",
      "262/262 [==============================] - 0s 678us/step - loss: 227790995456.0000\n",
      "Epoch 236/500\n",
      "262/262 [==============================] - 0s 673us/step - loss: 227570663424.0000\n",
      "Epoch 237/500\n",
      "262/262 [==============================] - 0s 702us/step - loss: 227355525120.0000\n",
      "Epoch 238/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 227136176128.0000\n",
      "Epoch 239/500\n",
      "262/262 [==============================] - 0s 702us/step - loss: 226928214016.0000\n",
      "Epoch 240/500\n",
      "262/262 [==============================] - 0s 657us/step - loss: 226720940032.0000\n",
      "Epoch 241/500\n",
      "262/262 [==============================] - 0s 645us/step - loss: 226527264768.0000\n",
      "Epoch 242/500\n",
      "262/262 [==============================] - 0s 676us/step - loss: 226328936448.0000\n",
      "Epoch 243/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 226137505792.0000\n",
      "Epoch 244/500\n",
      "262/262 [==============================] - 0s 644us/step - loss: 225951563776.0000\n",
      "Epoch 245/500\n",
      "262/262 [==============================] - 0s 676us/step - loss: 225767915520.0000\n",
      "Epoch 246/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 225586167808.0000\n",
      "Epoch 247/500\n",
      "262/262 [==============================] - 0s 643us/step - loss: 225412825088.0000\n",
      "Epoch 248/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 225235222528.0000\n",
      "Epoch 249/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 225062371328.0000\n",
      "Epoch 250/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 224895664128.0000\n",
      "Epoch 251/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 224728940544.0000\n",
      "Epoch 252/500\n",
      "262/262 [==============================] - 0s 704us/step - loss: 224559759360.0000\n",
      "Epoch 253/500\n",
      "262/262 [==============================] - 0s 657us/step - loss: 224407191552.0000\n",
      "Epoch 254/500\n",
      "262/262 [==============================] - 0s 745us/step - loss: 224245104640.0000\n",
      "Epoch 255/500\n",
      "262/262 [==============================] - 0s 707us/step - loss: 224085016576.0000\n",
      "Epoch 256/500\n",
      "262/262 [==============================] - 0s 799us/step - loss: 223932940288.0000\n",
      "Epoch 257/500\n",
      "262/262 [==============================] - 0s 674us/step - loss: 223781076992.0000\n",
      "Epoch 258/500\n",
      "262/262 [==============================] - 0s 662us/step - loss: 223632785408.0000\n",
      "Epoch 259/500\n",
      "262/262 [==============================] - 0s 673us/step - loss: 223485345792.0000\n",
      "Epoch 260/500\n",
      "262/262 [==============================] - 0s 702us/step - loss: 223338790912.0000\n",
      "Epoch 261/500\n",
      "262/262 [==============================] - 0s 702us/step - loss: 223195496448.0000\n",
      "Epoch 262/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 223054381056.0000\n",
      "Epoch 263/500\n",
      "262/262 [==============================] - 0s 676us/step - loss: 222915248128.0000\n",
      "Epoch 264/500\n",
      "262/262 [==============================] - 0s 666us/step - loss: 222777917440.0000\n",
      "Epoch 265/500\n",
      "262/262 [==============================] - 0s 674us/step - loss: 222645338112.0000\n",
      "Epoch 266/500\n",
      "262/262 [==============================] - 0s 646us/step - loss: 222511661056.0000\n",
      "Epoch 267/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 222380818432.0000\n",
      "Epoch 268/500\n",
      "262/262 [==============================] - 0s 702us/step - loss: 222256791552.0000\n",
      "Epoch 269/500\n",
      "262/262 [==============================] - 0s 676us/step - loss: 222131961856.0000\n",
      "Epoch 270/500\n",
      "262/262 [==============================] - 0s 676us/step - loss: 222007705600.0000\n",
      "Epoch 271/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 221887332352.0000\n",
      "Epoch 272/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 221768810496.0000\n",
      "Epoch 273/500\n",
      "262/262 [==============================] - 0s 648us/step - loss: 221649371136.0000\n",
      "Epoch 274/500\n",
      "262/262 [==============================] - 0s 688us/step - loss: 221535338496.0000\n",
      "Epoch 275/500\n",
      "262/262 [==============================] - 0s 687us/step - loss: 221418979328.0000\n",
      "Epoch 276/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 221308092416.0000\n",
      "Epoch 277/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 221199990784.0000\n",
      "Epoch 278/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 221095641088.0000\n",
      "Epoch 279/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 220992454656.0000\n",
      "Epoch 280/500\n",
      "262/262 [==============================] - 0s 676us/step - loss: 220889251840.0000\n",
      "Epoch 281/500\n",
      "262/262 [==============================] - 0s 964us/step - loss: 220792700928.0000\n",
      "Epoch 282/500\n",
      "262/262 [==============================] - 0s 733us/step - loss: 220697100288.0000\n",
      "Epoch 283/500\n",
      "262/262 [==============================] - 0s 739us/step - loss: 220598648832.0000\n",
      "Epoch 284/500\n",
      "262/262 [==============================] - 0s 764us/step - loss: 220506537984.0000\n",
      "Epoch 285/500\n",
      "262/262 [==============================] - 0s 688us/step - loss: 220415803392.0000\n",
      "Epoch 286/500\n",
      "262/262 [==============================] - 0s 722us/step - loss: 220324495360.0000\n",
      "Epoch 287/500\n",
      "262/262 [==============================] - 0s 657us/step - loss: 220233940992.0000\n",
      "Epoch 288/500\n",
      "262/262 [==============================] - 0s 677us/step - loss: 220144549888.0000\n",
      "Epoch 289/500\n",
      "262/262 [==============================] - 0s 702us/step - loss: 220053716992.0000\n",
      "Epoch 290/500\n",
      "262/262 [==============================] - 0s 738us/step - loss: 219969273856.0000\n",
      "Epoch 291/500\n",
      "262/262 [==============================] - 0s 658us/step - loss: 219888304128.0000\n",
      "Epoch 292/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 219799797760.0000\n",
      "Epoch 293/500\n",
      "262/262 [==============================] - 0s 690us/step - loss: 219723726848.0000\n",
      "Epoch 294/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 219639545856.0000\n",
      "Epoch 295/500\n",
      "262/262 [==============================] - 0s 678us/step - loss: 219556200448.0000\n",
      "Epoch 296/500\n",
      "262/262 [==============================] - 0s 680us/step - loss: 219482259456.0000\n",
      "Epoch 297/500\n",
      "262/262 [==============================] - 0s 650us/step - loss: 219402223616.0000\n",
      "Epoch 298/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 219326726144.0000\n",
      "Epoch 299/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 219251802112.0000\n",
      "Epoch 300/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 219178024960.0000\n",
      "Epoch 301/500\n",
      "262/262 [==============================] - 0s 702us/step - loss: 219103690752.0000\n",
      "Epoch 302/500\n",
      "262/262 [==============================] - 0s 657us/step - loss: 219033468928.0000\n",
      "Epoch 303/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 218965245952.0000\n",
      "Epoch 304/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 218899316736.0000\n",
      "Epoch 305/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 218828439552.0000\n",
      "Epoch 306/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 218761691136.0000\n",
      "Epoch 307/500\n",
      "262/262 [==============================] - 0s 697us/step - loss: 218697957376.0000\n",
      "Epoch 308/500\n",
      "262/262 [==============================] - 0s 661us/step - loss: 218633158656.0000\n",
      "Epoch 309/500\n",
      "262/262 [==============================] - 0s 677us/step - loss: 218569883648.0000\n",
      "Epoch 310/500\n",
      "262/262 [==============================] - 0s 643us/step - loss: 218508460032.0000\n",
      "Epoch 311/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 218449412096.0000\n",
      "Epoch 312/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 218385629184.0000\n",
      "Epoch 313/500\n",
      "262/262 [==============================] - 0s 644us/step - loss: 218327547904.0000\n",
      "Epoch 314/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 218268401664.0000\n",
      "Epoch 315/500\n",
      "262/262 [==============================] - 0s 702us/step - loss: 218213433344.0000\n",
      "Epoch 316/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 218159464448.0000\n",
      "Epoch 317/500\n",
      "262/262 [==============================] - 0s 643us/step - loss: 218098515968.0000\n",
      "Epoch 318/500\n",
      "262/262 [==============================] - 0s 687us/step - loss: 218045825024.0000\n",
      "Epoch 319/500\n",
      "262/262 [==============================] - 0s 663us/step - loss: 217992216576.0000\n",
      "Epoch 320/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 217935806464.0000\n",
      "Epoch 321/500\n",
      "262/262 [==============================] - 0s 673us/step - loss: 217885622272.0000\n",
      "Epoch 322/500\n",
      "262/262 [==============================] - 0s 642us/step - loss: 217831636992.0000\n",
      "Epoch 323/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 217781682176.0000\n",
      "Epoch 324/500\n",
      "262/262 [==============================] - 0s 672us/step - loss: 217732153344.0000\n",
      "Epoch 325/500\n",
      "262/262 [==============================] - 0s 751us/step - loss: 217682952192.0000\n",
      "Epoch 326/500\n",
      "262/262 [==============================] - 0s 707us/step - loss: 217630834688.0000\n",
      "Epoch 327/500\n",
      "262/262 [==============================] - 0s 824us/step - loss: 217584615424.0000\n",
      "Epoch 328/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 217534676992.0000\n",
      "Epoch 329/500\n",
      "262/262 [==============================] - 0s 718us/step - loss: 217487540224.0000\n",
      "Epoch 330/500\n",
      "262/262 [==============================] - 0s 656us/step - loss: 217438683136.0000\n",
      "Epoch 331/500\n",
      "262/262 [==============================] - 0s 854us/step - loss: 217393496064.0000\n",
      "Epoch 332/500\n",
      "262/262 [==============================] - 0s 666us/step - loss: 217350995968.0000\n",
      "Epoch 333/500\n",
      "262/262 [==============================] - 0s 646us/step - loss: 217304334336.0000\n",
      "Epoch 334/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 217263112192.0000\n",
      "Epoch 335/500\n",
      "262/262 [==============================] - 0s 642us/step - loss: 217216942080.0000\n",
      "Epoch 336/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 217173671936.0000\n",
      "Epoch 337/500\n",
      "262/262 [==============================] - 0s 702us/step - loss: 217130352640.0000\n",
      "Epoch 338/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 217087524864.0000\n",
      "Epoch 339/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 217045598208.0000\n",
      "Epoch 340/500\n",
      "262/262 [==============================] - 0s 611us/step - loss: 217003835392.0000\n",
      "Epoch 341/500\n",
      "262/262 [==============================] - 0s 662us/step - loss: 216962514944.0000\n",
      "Epoch 342/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 216923783168.0000\n",
      "Epoch 343/500\n",
      "262/262 [==============================] - 0s 642us/step - loss: 216883445760.0000\n",
      "Epoch 344/500\n",
      "262/262 [==============================] - 0s 610us/step - loss: 216847581184.0000\n",
      "Epoch 345/500\n",
      "262/262 [==============================] - 0s 643us/step - loss: 216807391232.0000\n",
      "Epoch 346/500\n",
      "262/262 [==============================] - 0s 629us/step - loss: 216772558848.0000\n",
      "Epoch 347/500\n",
      "262/262 [==============================] - 0s 626us/step - loss: 216732418048.0000\n",
      "Epoch 348/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 216694128640.0000\n",
      "Epoch 349/500\n",
      "262/262 [==============================] - 0s 672us/step - loss: 216659378176.0000\n",
      "Epoch 350/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 216624431104.0000\n",
      "Epoch 351/500\n",
      "262/262 [==============================] - 0s 674us/step - loss: 216586534912.0000\n",
      "Epoch 352/500\n",
      "262/262 [==============================] - 0s 643us/step - loss: 216547966976.0000\n",
      "Epoch 353/500\n",
      "262/262 [==============================] - 0s 660us/step - loss: 216519950336.0000\n",
      "Epoch 354/500\n",
      "262/262 [==============================] - 0s 646us/step - loss: 216481284096.0000\n",
      "Epoch 355/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 216444059648.0000\n",
      "Epoch 356/500\n",
      "262/262 [==============================] - 0s 734us/step - loss: 216413241344.0000\n",
      "Epoch 357/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 216379473920.0000\n",
      "Epoch 358/500\n",
      "262/262 [==============================] - 0s 673us/step - loss: 216347377664.0000\n",
      "Epoch 359/500\n",
      "262/262 [==============================] - 0s 675us/step - loss: 216314085376.0000\n",
      "Epoch 360/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 216281808896.0000\n",
      "Epoch 361/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 216248958976.0000\n",
      "Epoch 362/500\n",
      "262/262 [==============================] - 0s 702us/step - loss: 216217370624.0000\n",
      "Epoch 363/500\n",
      "262/262 [==============================] - 0s 665us/step - loss: 216191729664.0000\n",
      "Epoch 364/500\n",
      "262/262 [==============================] - ETA: 0s - loss: 214640869376.00 - 0s 682us/step - loss: 216155717632.0000\n",
      "Epoch 365/500\n",
      "262/262 [==============================] - 0s 702us/step - loss: 216125030400.0000\n",
      "Epoch 366/500\n",
      "262/262 [==============================] - 0s 702us/step - loss: 216100765696.0000\n",
      "Epoch 367/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 216066179072.0000\n",
      "Epoch 368/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 216037310464.0000\n",
      "Epoch 369/500\n",
      "262/262 [==============================] - 0s 630us/step - loss: 216005328896.0000\n",
      "Epoch 370/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 215976443904.0000\n",
      "Epoch 371/500\n",
      "262/262 [==============================] - ETA: 0s - loss: 214878044160.00 - 0s 661us/step - loss: 215949344768.0000\n",
      "Epoch 372/500\n",
      "262/262 [==============================] - 0s 646us/step - loss: 215916478464.0000\n",
      "Epoch 373/500\n",
      "262/262 [==============================] - 0s 645us/step - loss: 215894409216.0000\n",
      "Epoch 374/500\n",
      "262/262 [==============================] - 0s 692us/step - loss: 215862591488.0000\n",
      "Epoch 375/500\n",
      "262/262 [==============================] - 0s 663us/step - loss: 215832543232.0000\n",
      "Epoch 376/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 215806132224.0000\n",
      "Epoch 377/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 215778263040.0000\n",
      "Epoch 378/500\n",
      "262/262 [==============================] - 0s 673us/step - loss: 215751933952.0000\n",
      "Epoch 379/500\n",
      "262/262 [==============================] - 0s 721us/step - loss: 215726374912.0000\n",
      "Epoch 380/500\n",
      "262/262 [==============================] - 0s 719us/step - loss: 215703109632.0000\n",
      "Epoch 381/500\n",
      "262/262 [==============================] - 0s 682us/step - loss: 215675731968.0000\n",
      "Epoch 382/500\n",
      "262/262 [==============================] - 0s 676us/step - loss: 215650631680.0000\n",
      "Epoch 383/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 215623745536.0000\n",
      "Epoch 384/500\n",
      "262/262 [==============================] - 0s 687us/step - loss: 215601135616.0000\n",
      "Epoch 385/500\n",
      "262/262 [==============================] - 0s 672us/step - loss: 215571677184.0000\n",
      "Epoch 386/500\n",
      "262/262 [==============================] - 0s 658us/step - loss: 215549132800.0000\n",
      "Epoch 387/500\n",
      "262/262 [==============================] - 0s 702us/step - loss: 215524098048.0000\n",
      "Epoch 388/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 215499505664.0000\n",
      "Epoch 389/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 215479123968.0000\n",
      "Epoch 390/500\n",
      "262/262 [==============================] - 0s 674us/step - loss: 215458889728.0000\n",
      "Epoch 391/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 215428595712.0000\n",
      "Epoch 392/500\n",
      "262/262 [==============================] - 0s 657us/step - loss: 215406919680.0000\n",
      "Epoch 393/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 215388274688.0000\n",
      "Epoch 394/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 215362174976.0000\n",
      "Epoch 395/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 215341039616.0000\n",
      "Epoch 396/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 215319592960.0000\n",
      "Epoch 397/500\n",
      "262/262 [==============================] - 0s 673us/step - loss: 215299670016.0000\n",
      "Epoch 398/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 215275012096.0000\n",
      "Epoch 399/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 215253008384.0000\n",
      "Epoch 400/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 215232987136.0000\n",
      "Epoch 401/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 215211868160.0000\n",
      "Epoch 402/500\n",
      "262/262 [==============================] - 0s 679us/step - loss: 215192305664.0000\n",
      "Epoch 403/500\n",
      "262/262 [==============================] - 0s 707us/step - loss: 215171645440.0000\n",
      "Epoch 404/500\n",
      "262/262 [==============================] - 0s 702us/step - loss: 215153377280.0000\n",
      "Epoch 405/500\n",
      "262/262 [==============================] - 0s 732us/step - loss: 215130931200.0000\n",
      "Epoch 406/500\n",
      "262/262 [==============================] - 0s 702us/step - loss: 215113891840.0000\n",
      "Epoch 407/500\n",
      "262/262 [==============================] - 0s 763us/step - loss: 215093346304.0000\n",
      "Epoch 408/500\n",
      "262/262 [==============================] - 0s 674us/step - loss: 215074783232.0000\n",
      "Epoch 409/500\n",
      "262/262 [==============================] - 0s 674us/step - loss: 215057203200.0000\n",
      "Epoch 410/500\n",
      "262/262 [==============================] - 0s 737us/step - loss: 215037706240.0000\n",
      "Epoch 411/500\n",
      "262/262 [==============================] - 0s 732us/step - loss: 215017603072.0000\n",
      "Epoch 412/500\n",
      "262/262 [==============================] - 0s 763us/step - loss: 215003627520.0000\n",
      "Epoch 413/500\n",
      "262/262 [==============================] - 0s 673us/step - loss: 214984884224.0000\n",
      "Epoch 414/500\n",
      "262/262 [==============================] - 0s 672us/step - loss: 214966173696.0000\n",
      "Epoch 415/500\n",
      "262/262 [==============================] - 0s 702us/step - loss: 214947053568.0000\n",
      "Epoch 416/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 214928703488.0000\n",
      "Epoch 417/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 214912172032.0000\n",
      "Epoch 418/500\n",
      "262/262 [==============================] - 0s 672us/step - loss: 214894673920.0000\n",
      "Epoch 419/500\n",
      "262/262 [==============================] - 0s 657us/step - loss: 214880747520.0000\n",
      "Epoch 420/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 214861922304.0000\n",
      "Epoch 421/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 214843768832.0000\n",
      "Epoch 422/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 214826795008.0000\n",
      "Epoch 423/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 214809755648.0000\n",
      "Epoch 424/500\n",
      "262/262 [==============================] - 0s 886us/step - loss: 214796550144.0000\n",
      "Epoch 425/500\n",
      "262/262 [==============================] - 0s 702us/step - loss: 214779478016.0000\n",
      "Epoch 426/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 214762455040.0000\n",
      "Epoch 427/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 214744793088.0000\n",
      "Epoch 428/500\n",
      "262/262 [==============================] - 0s 702us/step - loss: 214732832768.0000\n",
      "Epoch 429/500\n",
      "262/262 [==============================] - 0s 672us/step - loss: 214715547648.0000\n",
      "Epoch 430/500\n",
      "262/262 [==============================] - 0s 628us/step - loss: 214699507712.0000\n",
      "Epoch 431/500\n",
      "262/262 [==============================] - 0s 642us/step - loss: 214685597696.0000\n",
      "Epoch 432/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 214669492224.0000\n",
      "Epoch 433/500\n",
      "262/262 [==============================] - ETA: 0s - loss: 213463105536.00 - 0s 641us/step - loss: 214653337600.0000\n",
      "Epoch 434/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 214639427584.0000\n",
      "Epoch 435/500\n",
      "262/262 [==============================] - 0s 658us/step - loss: 214629138432.0000\n",
      "Epoch 436/500\n",
      "262/262 [==============================] - 0s 659us/step - loss: 214609149952.0000\n",
      "Epoch 437/500\n",
      "262/262 [==============================] - 0s 680us/step - loss: 214594633728.0000\n",
      "Epoch 438/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 214579904512.0000\n",
      "Epoch 439/500\n",
      "262/262 [==============================] - 0s 702us/step - loss: 214562013184.0000\n",
      "Epoch 440/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 214547169280.0000\n",
      "Epoch 441/500\n",
      "262/262 [==============================] - 0s 643us/step - loss: 214536093696.0000\n",
      "Epoch 442/500\n",
      "262/262 [==============================] - 0s 672us/step - loss: 214526181376.0000\n",
      "Epoch 443/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 214506848256.0000\n",
      "Epoch 444/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 214494609408.0000\n",
      "Epoch 445/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 214481321984.0000\n",
      "Epoch 446/500\n",
      "262/262 [==============================] - 0s 703us/step - loss: 214465675264.0000\n",
      "Epoch 447/500\n",
      "262/262 [==============================] - 0s 693us/step - loss: 214447865856.0000\n",
      "Epoch 448/500\n",
      "262/262 [==============================] - 0s 708us/step - loss: 214435774464.0000\n",
      "Epoch 449/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 214421438464.0000\n",
      "Epoch 450/500\n",
      "262/262 [==============================] - 0s 685us/step - loss: 214410690560.0000\n",
      "Epoch 451/500\n",
      "262/262 [==============================] - 0s 674us/step - loss: 214394814464.0000\n",
      "Epoch 452/500\n",
      "262/262 [==============================] - 0s 678us/step - loss: 214383755264.0000\n",
      "Epoch 453/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 214368010240.0000\n",
      "Epoch 454/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 214356492288.0000\n",
      "Epoch 455/500\n",
      "262/262 [==============================] - 0s 689us/step - loss: 214346907648.0000\n",
      "Epoch 456/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 214330982400.0000\n",
      "Epoch 457/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 214317334528.0000\n",
      "Epoch 458/500\n",
      "262/262 [==============================] - 0s 688us/step - loss: 214303571968.0000\n",
      "Epoch 459/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 214293315584.0000\n",
      "Epoch 460/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 214278504448.0000\n",
      "Epoch 461/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 214267117568.0000\n",
      "Epoch 462/500\n",
      "262/262 [==============================] - 0s 679us/step - loss: 214255976448.0000\n",
      "Epoch 463/500\n",
      "262/262 [==============================] - 0s 705us/step - loss: 214242820096.0000\n",
      "Epoch 464/500\n",
      "262/262 [==============================] - 0s 674us/step - loss: 214231236608.0000\n",
      "Epoch 465/500\n",
      "262/262 [==============================] - 0s 678us/step - loss: 214220095488.0000\n",
      "Epoch 466/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 214207922176.0000\n",
      "Epoch 467/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 214195453952.0000\n",
      "Epoch 468/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 214184525824.0000\n",
      "Epoch 469/500\n",
      "262/262 [==============================] - 0s 661us/step - loss: 214172516352.0000\n",
      "Epoch 470/500\n",
      "262/262 [==============================] - 0s 676us/step - loss: 214162817024.0000\n",
      "Epoch 471/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 214152790016.0000\n",
      "Epoch 472/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 214139731968.0000\n",
      "Epoch 473/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 214126575616.0000\n",
      "Epoch 474/500\n",
      "262/262 [==============================] - 0s 676us/step - loss: 214115696640.0000\n",
      "Epoch 475/500\n",
      "262/262 [==============================] - 0s 688us/step - loss: 214108602368.0000\n",
      "Epoch 476/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 214093611008.0000\n",
      "Epoch 477/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 214082551808.0000\n",
      "Epoch 478/500\n",
      "262/262 [==============================] - 0s 643us/step - loss: 214072164352.0000\n",
      "Epoch 479/500\n",
      "262/262 [==============================] - 0s 643us/step - loss: 214058549248.0000\n",
      "Epoch 480/500\n",
      "262/262 [==============================] - 0s 674us/step - loss: 214051012608.0000\n",
      "Epoch 481/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 214035890176.0000\n",
      "Epoch 482/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 214028533760.0000\n",
      "Epoch 483/500\n",
      "262/262 [==============================] - 0s 643us/step - loss: 214018555904.0000\n",
      "Epoch 484/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 214007447552.0000\n",
      "Epoch 485/500\n",
      "262/262 [==============================] - 0s 657us/step - loss: 213996929024.0000\n",
      "Epoch 486/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 213987508224.0000\n",
      "Epoch 487/500\n",
      "262/262 [==============================] - 0s 707us/step - loss: 213974089728.0000\n",
      "Epoch 488/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 213964996608.0000\n",
      "Epoch 489/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 213964521472.0000\n",
      "Epoch 490/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 213948710912.0000\n",
      "Epoch 491/500\n",
      "262/262 [==============================] - 0s 672us/step - loss: 213934309376.0000\n",
      "Epoch 492/500\n",
      "262/262 [==============================] - 0s 689us/step - loss: 213924020224.0000\n",
      "Epoch 493/500\n",
      "262/262 [==============================] - 0s 679us/step - loss: 213914075136.0000\n",
      "Epoch 494/500\n",
      "262/262 [==============================] - 0s 671us/step - loss: 213907226624.0000\n",
      "Epoch 495/500\n",
      "262/262 [==============================] - 0s 641us/step - loss: 213892349952.0000\n",
      "Epoch 496/500\n",
      "262/262 [==============================] - 0s 672us/step - loss: 213884583936.0000\n",
      "Epoch 497/500\n",
      "262/262 [==============================] - 0s 674us/step - loss: 213873065984.0000\n",
      "Epoch 498/500\n",
      "262/262 [==============================] - 0s 702us/step - loss: 213861138432.0000\n",
      "Epoch 499/500\n",
      "262/262 [==============================] - 0s 702us/step - loss: 213854552064.0000\n",
      "Epoch 500/500\n",
      "262/262 [==============================] - 0s 733us/step - loss: 213842788352.0000\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<tensorflow.python.keras.callbacks.History at 0x1aaa370b588>"
      ]
     },
     "execution_count": 189,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# step 1: build the model\n",
    "model1 = Sequential()\n",
    "#input layer\n",
    "model1.add(Dense(10, input_dim = X_train_nn.shape[1], activation = 'relu'))\n",
    "#hidden layer\n",
    "model1.add(Dense(5, activation = 'relu'))\n",
    "#output layer\n",
    "model1.add(Dense(1, activation = 'linear'))\n",
    "\n",
    "\n",
    "# step 2: build the computational graph - compile\n",
    "model1.compile(loss = 'mean_squared_error', optimizer = 'adam')\n",
    "\n",
    "# step 3: train the model\n",
    "model1.fit(X_train_nn, y_train, epochs = 500, batch_size = 100)\n",
    "\n",
    "# step 4: model evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.03203581, -0.63781632, -0.35857506, ...,  1.13915545,\n",
       "         0.25161365,  0.02049863],\n",
       "       [-0.03203581, -0.63781632, -1.36439173, ..., -1.78607287,\n",
       "         0.25161365,  1.01326287],\n",
       "       [ 0.99896716, -0.63781632, -0.35857506, ..., -0.81099676,\n",
       "         1.823252  , -1.63410844],\n",
       "       ...,\n",
       "       [-0.03203581, -0.63781632, -0.35857506, ...,  0.16407934,\n",
       "         0.25161365,  1.34418429],\n",
       "       [-0.03203581, -0.63781632, -0.35857506, ...,  0.65161739,\n",
       "         0.25161365,  1.34418429],\n",
       "       [-0.03203581, -0.63781632,  2.15596663, ..., -1.78607287,\n",
       "         0.25161365,  0.35142005]])"
      ]
     },
     "execution_count": 193,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = model1.predict(X_train_nn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.3463444840489641"
      ]
     },
     "execution_count": 195,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import r2_score\n",
    "r2_score(y_train, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.33402947692453167"
      ]
     },
     "execution_count": 196,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r2_score(y_test, model1.predict(X_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Neural networks has improved the accuracy of the model. The r-squared can be improved by performing hyper parameter tuning and adding data to the model. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
